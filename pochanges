class ZPTPCL_I1058_ORDCHG definition
  public
  final
  create public .

public section.

  types:                             "Updatetype complex/Simple
    BEGIN OF gs_h_ctyp,
        ptm TYPE abap_bool,
        pgp TYPE abap_bool,
        ict TYPE abap_bool,
        ic2 TYPE abap_bool,
        vca TYPE abap_bool,
        lsp TYPE abap_bool,
        spf TYPE abap_bool,
        ht1 TYPE abap_bool,
      END OF gs_h_ctyp .
  types:
    BEGIN OF gty_ekko_detail.
        INCLUDE TYPE gs_h_ctyp.
        INCLUDE TYPE ekko.
    TYPES: smp_flag TYPE char10,   "Updatetype complex/Simple
        lh1_text TYPE tdline,
      END OF  gty_ekko_detail .
  types:
    BEGIN OF gty_ekpo_detail,
        ctyp         TYPE char10,
        idoc_line    TYPE i,
        cmpt_del_flg TYPE flag.
        INCLUDE TYPE ekpo.
    TYPES: smp_flag     TYPE char10, "Updatetype complex/Simple
        smp_addtnl   TYPE char10,
        lt1_text     TYPE tdline,
        abgru        TYPE abgru,
      END OF  gty_ekpo_detail .
  types:
    gtt_ekko_detail TYPE STANDARD TABLE OF gty_ekko_detail .
  types:
    gtt_ekpo_detail     TYPE STANDARD TABLE OF gty_ekpo_detail .
  types:
    gtt_ekpo_detail_tmp TYPE TABLE OF gty_ekpo_detail .
  types:
    gtt_bapimepotext TYPE STANDARD TABLE OF bapimepotext .
  types:                             "Updatetype complex/Simple
    BEGIN OF gty_ctyp,
        ctyp(10) TYPE c,
      END OF gty_ctyp .
  types:
    gr_ctyp TYPE RANGE OF gty_ctyp .
  types:                             "Updatetype complex/Simple
** Begin of changes for CR 1203 by 24086849 on 28/08/2020
    BEGIN OF gty_tvarvc,
        name TYPE rvari_vnam,
        type TYPE rsscr_kind, " ++ Added for CR_1839 by 24093780 on 11/30/2020
        sign TYPE tvarv_sign,
        opti TYPE tvarv_opti,
        low  TYPE rvari_val_255,
        high TYPE rvari_val_255,
      END OF gty_tvarvc .
  types:
    gr_bsgru TYPE RANGE OF bsgru .
  types:
    gr_kschl TYPE RANGE OF kschl .
  types:
** End of changes for CR 1203 by 24086849 on 28/08/2020
    gtt_ctyp TYPE STANDARD TABLE OF gty_ctyp .
  types:
** Start of CR_1926 by 27097570 on 08/12/2020
    gr_bsart TYPE RANGE OF bsart .
  types:
    gr_meprf TYPE RANGE OF meprf .
  types:
    gr_txtid TYPE RANGE OF char20 .
  types:                             "Updatetype complex/Simple
** Start of CR_1926 by 27097570 on 08/12/2020
*        gt_return_po_change TYPE STANDARD TABLE OF bapiret2
*Local structure declaration
*    DATA:
*          gs_poheader      TYPE bapiekkol,
*         gs_header_change TYPE bapimepoheader,
*         gs_poheadx       TYPE bapimepoheaderx.
*
    BEGIN OF gty_ekkn ,
        ebeln	TYPE ebeln,
        ebelp	TYPE ebelp,
        vbeln	TYPE vbeln_co,
        vbelp	TYPE posnr_co,
      END OF gty_ekkn .
  types:                             "Updatetype complex/Simple
      "Updatetype complex/Simple
    BEGIN OF gty_so_po_text,
        low(10)  TYPE c,
        high(10) TYPE c,
      END OF gty_so_po_text .
  types:
    gtt_ekkn TYPE STANDARD TABLE OF gty_ekkn .
  types:                             "Updatetype complex/Simple
** End of changes for CR 1203 by 24086849 on 28/08/2020
** Start of changes for CR 1839 by 24093780 on 11/17/2020
    BEGIN OF gty_ekkn_delivery,
        ebeln TYPE ebeln,
        ebelp TYPE ebelp,
        kunnr TYPE kunnr,
      END  OF gty_ekkn_delivery .

  class-data:
    gt_tvarvc TYPE STANDARD TABLE OF gty_tvarvc .
  class-data GV_IDCO_NUMBER type EDI_DOCNUM .
  class-data GS_RETURN type BAPIRET1 .
  class-data:
    gt_return_so TYPE STANDARD TABLE OF bapiret2 .
  class-data GV_SYSUBRC type SY-SUBRC .
  class-data GV_FLAG type C .
  class-data:                                                       "Return changes
    gv_msg     TYPE c LENGTH 255 .
  class-data:
            "BAPI PO GET DATA declaraiton
             " Local Data declaration
    gt_header_texts     TYPE STANDARD TABLE OF bapiekkotx .
  class-data:
*    gt_header_texts     TYPE STANDARD TABLE OF BAPIMEPOTEXTHEADER .
            "BAPI PO GET DATA declaraiton
             " Local Data declaration
*    gt_header_texts     TYPE STANDARD TABLE OF bapiekkotx .
    gt_potextheader     TYPE STANDARD TABLE OF bapimepotextheader .
  class-data:
    gt_pm_po_text  TYPE STANDARD TABLE OF gty_so_po_text .
  data:
    gt_items            TYPE STANDARD TABLE OF bapiekpo .
  data:
    gt_item_texts       TYPE STANDARD TABLE OF bapiekpotx .
  data:
    gt_return           TYPE STANDARD TABLE OF bapireturn .
  data:
    gt_poschedule       TYPE STANDARD TABLE OF bapimeposchedule .
  data:
    gt_poschedulex      TYPE STANDARD TABLE OF bapimeposchedulx .
  data:
    gt_confirmations    TYPE STANDARD TABLE OF bapiekes .
  data:
    gt_schedule         TYPE STANDARD TABLE OF bapieket .
  data:
    gt_poitem           TYPE STANDARD TABLE OF bapimepoitem .
  data:
    gt_poitemx          TYPE STANDARD TABLE OF bapimepoitemx .
  data:
    gt_return_po_change TYPE STANDARD TABLE OF bapiret2 .
  data:                                                                 "Header texts
    gt_line             TYPE STANDARD TABLE OF tline .
  class-data GS_POHEADX type BAPIMEPOHEADERX .
  data GS_POITEMX type BAPIMEPOITEMX .
  data GS_POITEM type BAPIMEPOITEM .
  data GS_POSCHEDULE type BAPIMEPOSCHEDULE .
  data GS_POSCHEDULEX type BAPIMEPOSCHEDULX .
  data GS_POHEADER type BAPIEKKOL .
  class-data GS_HEADER_CHANGE type BAPIMEPOHEADER .
  data GS_HEADER type THEAD .
  data:
    gt_so_header        TYPE STANDARD TABLE OF bapisdhd .
  data:
    gt_so_items         TYPE STANDARD TABLE OF bapisditbos .
  data GT_SO_PARTNER type BAPISDPARTT .
  data:
    gt_so_schedule      TYPE STANDARD TABLE OF bapisdhedu .
  data:
    gt_order_item_in_c  TYPE STANDARD TABLE OF bapisditm .
  data:
    gt_order_item_inx_c TYPE STANDARD TABLE OF bapisditmx .
  data:
    gt_schedule_lines   TYPE STANDARD TABLE OF bapischdl .
  data:
    gt_schedule_linesx  TYPE STANDARD TABLE OF bapischdlx .
  data:
** Begin of changes for CR 1203 by 24086849 on 28/08/2020
    gt_cond_po          TYPE STANDARD TABLE OF bapimepocond .
  class-data:
    gt_pm_1058_lsp           TYPE STANDARD TABLE OF gty_so_po_text .
  class-data:
    gt_lsp_hoi_text          TYPE STANDARD TABLE OF gty_so_po_text .
  class-data:
    gt_moa_plat_sloc         TYPE STANDARD TABLE OF gty_so_po_text .
  class-data:
    gt_pm_1839_header_smp   TYPE STANDARD TABLE OF gty_so_po_text .
  class-data:
    gt_pm_1839_item_smp     TYPE STANDARD TABLE OF gty_so_po_text .
  class-data GR_1058_DIS_ICPRICE type GR_KSCHL .
  class-data GR_PM_PO_DOCTYPE type GR_KSCHL .
  class-data GV_UPDATE_SO_PARTNER_LSP type BOOLEAN .
  data:
    gt_ekkn_delivery TYPE STANDARD TABLE OF gty_ekkn_delivery .
  data:
    gt_popartner_lsp TYPE STANDARD TABLE OF bapiekkop .
** End of changes for CR 1839 by 24093780 on 11/17/2020
  data GS_ORDER_HEADER_IN type BAPISDH1 .
  data GS_ORDER_HEADER_INX type BAPISDH1X .
  class-data GV_PARENT_TEXT_ID type TDID .
  data GV_CHANGE_IDENTIFIER type TDLINE .
  data GV_HEADER_FLAG type ABAP_BOOL .
  data GV_ITEM_FLAG type ABAP_BOOL .
  data GO_REF type ref to DATA .
  data:
*
*Local Data declaration
    gt_popartner      TYPE STANDARD TABLE OF bapiekkop .
  constants:
    BEGIN OF gs_save_text,
        gc_tdid_f26 TYPE thead-tdid VALUE 'F26',
        gc_tdid_f48 TYPE thead-tdid VALUE 'F48',
        gc_tdid_f49 TYPE thead-tdid VALUE 'F49',
        gc_tdid_zfi TYPE thead-tdid VALUE 'ZFI',
        gc_tdid_f01 TYPE thead-tdid VALUE 'F01',
        gc_object_h TYPE thead-tdobject VALUE 'EKKO',
        gc_object_i TYPE thead-tdobject VALUE 'EKPO',
      END OF gs_save_text .
  constants:
    BEGIN OF gs_segments,
        gc_e1edkt1 TYPE edilsegtyp VALUE 'E1EDKT1' ##NO_TEXT,
        gc_e1edkt2 TYPE edilsegtyp VALUE 'E1EDKT2' ##NO_TEXT,
        gc_e1edpt1 TYPE edilsegtyp VALUE 'E1EDPT1' ##NO_TEXT,
        gc_e1edp20 TYPE edilsegtyp VALUE 'E1EDP20' ##NO_TEXT,
        gc_e1edp05 TYPE edilsegtyp VALUE 'E1EDP05' ##NO_TEXT,
        gc_i_ctyp  TYPE edilsegtyp VALUE 'E1EDPT2' ##NO_TEXT,
        gc_h_ctyp  TYPE edilsegtyp VALUE 'E1EDKT1' ##NO_TEXT,
        gc_e1edp01 TYPE edilsegtyp VALUE 'E1EDP01' ##NO_TEXT,
        gc_e1edk01 TYPE edilsegtyp VALUE 'E1EDK01' ##NO_TEXT,
        gc_e1edk02 TYPE edilsegtyp VALUE 'E1EDK02' ##NO_TEXT,
        gc_e1edka1 TYPE edilsegtyp VALUE 'E1EDKA1' ##NO_TEXT,
        gc_e1edk17 TYPE edilsegtyp VALUE 'E1EDK17' ##NO_TEXT,
        gc_e1edp19 TYPE edilsegtyp VALUE 'E1EDP19' ##NO_TEXT,
        gc_e1edpt2 TYPE edilsegtyp VALUE 'E1EDPT2' ##NO_TEXT,
        gc_e1edp35 TYPE edilsegtyp VALUE 'E1EDP35' ##NO_TEXT,
        gc_e1edk35 TYPE edilsegtyp VALUE 'E1EDK35' ##NO_TEXT,
      END OF   gs_segments .
  constants GC_Z_PTP_I1058 type RVARI_VNAM value 'Z_PTP_I1058' ##NO_TEXT.
  constants GC_QTY type RVARI_VAL_255 value 'QTY' ##NO_TEXT.
  constants GC_DDT type RVARI_VAL_255 value 'DDT' ##NO_TEXT.
  constants GC_SDP type RVARI_VAL_255 value 'SDP' ##NO_TEXT.
  constants GC_SDATA type EDILSEGTYP value 'SDATA' ##NO_TEXT.
  constants GC_TDLINE type EDILSEGTYP value 'TDLINE' ##NO_TEXT.
  constants GC_QUALZ type EDILSEGTYP value 'QUALZ' ##NO_TEXT.
  constants GC_PONUM type EDILSEGTYP value 'BELNR' ##NO_TEXT.
  constants GC_POSEX type EDILSEGTYP value 'POSEX' ##NO_TEXT.
  constants GC_EDATU type EDILSEGTYP value 'EDATU' ##NO_TEXT.
  constants GC_MENGE type EDILSEGTYP value 'MENGE' ##NO_TEXT.
  constants:
    gc_seperator(1) TYPE c value '_' ##NO_TEXT.
  constants GC_SMP type CHAR3 value 'SMP' ##NO_TEXT.
  constants GC_ZAK type CHAR3 value 'ZAK' ##NO_TEXT.
  constants GC_X2 type CHAR2 value 'X2' ##NO_TEXT.
  constants GC_CTYP type CHAR4 value 'CTYP' ##NO_TEXT.
  constants GC_PTM type CHAR3 value 'PTM' ##NO_TEXT.
  constants GC_PGP type CHAR3 value 'PGP' ##NO_TEXT.
  constants GC_ICT type CHAR3 value 'ICT' ##NO_TEXT.
  constants GC_IC2 type CHAR3 value 'IC2' ##NO_TEXT.
  constants GC_VCA type CHAR3 value 'VCA' ##NO_TEXT.
  constants GC_SPF type CHAR3 value 'SPF' ##NO_TEXT.
  constants GC_HT1 type CHAR3 value 'HT1' ##NO_TEXT.
  constants GC_002 type CHAR3 value '002' ##NO_TEXT.
  class-data GC_PSP type CHAR3 value 'PSP' ##NO_TEXT.
  class-data GC_QTY_DDT type CHAR7 value 'QTY_DDT' ##NO_TEXT.
  class-data GC_OSP type CHAR3 value 'OSP' ##NO_TEXT.
  class-data GT_IDOC_DATA type IDOC_DATA .
  class-data GV_PO_NUM type EBELN .
  class-data GS_EKKO_DETAIL type GTY_EKKO_DETAIL .
  class-data GR_START_FROM_SO type GR_CTYP .
  class-data GV_SO_NUM type VBELN .
  class-data GT_EKPO_DETAIL type GTT_EKPO_DETAIL .
  class-data GT_EKKN type GTT_EKKN .
  data GT_HEADER_CHANGES type GTT_CTYP .
  class-data GV_ONLY_HEADER_CHANGE type BOOLEAN .
  constants GC_ICL type CHAR3 value 'ICL' ##NO_TEXT.
  constants GC_LT1 type CHAR3 value 'LT1' ##NO_TEXT.
  class-data GV_UPDATE_SO_PARTNER type BOOLEAN .
  class-data GV_HEADER_ITEM_CHANGE type BOOLEAN .
  class-data GV_IDOC_ERR type CHAR1 .
  class-data GV_DBS_SO_SF type PARVW .
  class-data GV_DBS_SO_LSP type PARVW .
  class-data GR_SDP_COND_TYPE type GR_KSCHL .
  class-data GV_BAPI_CALL_COUNT type CHAR1 .
  constants GC_ZMZQ type CHAR4 value 'ZMZQ' ##NO_TEXT.
  constants GC_VBBP type CHAR4 value 'VBBP' ##NO_TEXT.
  class-data GR_DOC_PRC type GR_BSART .
  class-data GR_PRC_CTRL type GR_MEPRF .
  class-data GR_DEL_TXT type GR_TXTID .
  class-data GR_SHP_TXT type GR_TXTID .
  class-data GR_COND_TYPE type GR_KSCHL .
  class-data GV_FLAG_PRIC_PO type FLAG .
  constants GC_ZMPP type CHAR4 value 'ZMPP' ##NO_TEXT.

  methods CONSTRUCTOR .
  methods FETCH_ITEM_HEADER_INDICATORS
    exporting
      !ES_RETURN type BAPIRET1
      !ET_EKPO_DETAIL type GTT_EKPO_DETAIL .
  methods UPDATE_PO_LINE_ITEMS
    importing
      !IS_EKPO_DETAIL type GTY_EKPO_DETAIL optional
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL optional
      !IV_CALL_COUNT type CHAR1 optional
    exporting
      !ES_RETURN type BAPIRET1
      !ET_RETURN type BAPIRET1_T
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods DELETE_AB_TEXTS
    importing
      !IV_EBELP type EBELP
    exporting
      !ES_RETURN type BAPIRETURN .
  methods UPDATE_SIMPLE_CHANGE_FLAG
    importing
      !IV_HEADER type ABAP_BOOL optional
      !IV_ITEM_FLAG type ABAP_BOOL optional
      !IV_ADDITIONAL_FLAG type ABAP_BOOL optional
      !IV_NUM type THEAD-TDNAME
      !IV_TEXT type TDLINE .
  methods UPDATE_PO_SPLIT
    importing
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL
      !IV_CALL_COUNT type CHAR1 optional
    exporting
      !ES_RETURN type BAPIRET1
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods UPDATE_PO_HEADER
    importing
      !IV_CALL_COUNT type CHAR1 optional
    exporting
      !ES_RETURN type BAPIRET1
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods SET_DATA
    exporting
      !ES_RETURN type BAPIRET1 .
  methods CLEAR_DATA .
  methods UPDATE_SO_LINE_ITEM
    importing
      !IS_EKPO_DETAIL type GTY_EKPO_DETAIL optional
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL optional
      !IV_CALL_COUNT type CHAR1 optional
    exporting
      !ES_RETURN type BAPIRET1
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  class-methods RESPONSE
    importing
      value(P_TASK) type CLIKE .
  methods UPDATE_PO_LINE_ITEM_TEXTS
    importing
      !IT_BAPIMEPOTEXT type GTT_BAPIMEPOTEXT
    exporting
      !ET_RETURN type BAPIRET1_T .
protected section.
private section.

  constants GV_SPLIT_TEXT type TDID value 'F60' ##NO_TEXT.
  class-data GR_ORD_REASON type GR_BSGRU .
  constants GC_N type CHAR1 value 'N' ##NO_TEXT.
  constants GC_ZRSO type CHAR4 value 'ZRSO' ##NO_TEXT.
  data GC_L type CHAR1 value 'L' ##NO_TEXT.
  constants GC_ZICG type CHAR4 value 'ZICG' ##NO_TEXT.
*  CONSTANTS gc_zrso TYPE char4 VALUE 'ZRSO' ##NO_TEXT.
  constants GC_ZSRN type CHAR4 value 'ZSRN' ##NO_TEXT.
  constants GC_ZRSI type CHAR4 value 'ZRSI' ##NO_TEXT.
  constants GC_F01 type CHAR3 value 'F01' ##NO_TEXT.
  constants GC_CR type CHAR2 value 'CR' ##NO_TEXT.
  constants GC_SF type CHAR2 value 'SF' ##NO_TEXT.
*  data GV_ABGRU type ABGRU_VA .
  constants GC_XS type CHAR2 value 'XS' ##NO_TEXT.
  data GC_D type CHAR1 value 'D' ##NO_TEXT.
*  data GV_QTY_ABGRU type ABGRU_VA .
  data GC_I type CHAR1 value 'I' ##NO_TEXT.
  constants GC_001 type ETENR value 0001 ##NO_TEXT.
  constants GC_AB type CHAR2 value 'AB' ##NO_TEXT.
  constants LC_000010 type POSNR_VA value 000010 ##NO_TEXT.
  constants GC_U type CHAR1 value 'U' ##NO_TEXT.
  constants GC_RSC type CHAR3 value 'RSC' ##NO_TEXT.
  constants GC_XC type CHAR2 value 'XC' ##NO_TEXT.
  constants GC_ZPB0 type KSCHL value 'ZPB0' ##NO_TEXT.
  constants GC_PB00 type KSCHL value 'PB00' ##NO_TEXT.
  constants GC_ZMZP type CHAR4 value 'ZMZP' ##NO_TEXT.
  constants GC_EK type CHAR2 value 'EK' ##NO_TEXT.
  constants GC_QUALF_002 type CHAR3 value '002' ##NO_TEXT.
  constants GC_QUALF_001 type CHAR3 value '001' ##NO_TEXT.
  constants GC_CHANGE_TYPE type CHAR4 value 'CTYP' ##NO_TEXT.
*  constants GC_A type CHAR1 value 'A' ##NO_TEXT.
  constants GC_VPN type CHAR3 value 'VPN' ##NO_TEXT.
  constants GC_DBS_REASONCODES type RVARI_VNAM value 'PTP_DBS_REASONCODES' ##NO_TEXT.
  constants GC_PARENT_TEXT type RVARI_VNAM value 'PTP_P&M_PARENT_TEXT' ##NO_TEXT.
  constants GC_SDP_COND_TYPE type RVARI_VNAM value 'PTP_P&M_SDP_COND_TYPES' ##NO_TEXT.
  constants GC_DBS_SO_LSP type RVARI_VNAM value 'PTP_DBS_SO_LSP' ##NO_TEXT.
  constants GC_DBS_SO_SF type RVARI_VNAM value 'PTP_DBS_SO_SF' ##NO_TEXT.
  constants GC_SHIP_FROM_COUNTRY type RVARI_VNAM value 'ZOTC_SHIP_COUNTRY' ##NO_TEXT.

  methods CHECK_INFO_TERM_VALID
    importing
      !IV_INCOTERMS1 type INCO1
    returning
      value(EV_RETURN) type BOOLEAN .
  methods CHECK_SPLIT_MENGE_EXCEED
    importing
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL
    returning
      value(EV_RESULT) type ABAP_BOOL .
*      !LV_MENGE type MENGE_D optional
  methods CHECK_SO_PO_QTY_DDT_EQUAL
    importing
      !IV_QTY_FLAG type ABAP_BOOL optional
      !IV_DDT_FLAG type ABAP_BOOL optional
      !LV_EBELP type EBELP optional
      value(IS_EKKN) type GTY_EKKN optional
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL optional
    exporting
      !EV_RESULT type ABAP_BOOL
      !ET_EKPO_DETAIL_EQUAL type GTT_EKPO_DETAIL
      !ET_EKPO_DETAIL_NOT_EQUAL type GTT_EKPO_DETAIL .
  methods UPDATE_REASON_REJEC_SO
    importing
      !IV_EBELP type EBELP optional
      !IV_ABGRU type ABGRU optional
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL optional
    exporting
      !ES_RETURN type BAPIRET1
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods FETCH_HEADER_SMPFLAG_TEXT
    returning
      value(RV_TEXT) type CHAR10 .
  methods READ_PO_NUM_IDOC .
*      !ES_RETURN type BAPIRET1 optional
  methods UPDATE_DELIVERY_COMPLETE_PO
    importing
      !IV_EBELP type EBELP optional
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL optional
    exporting
      !ET_POITEM type BAPIMEPOITEM_TP
      !ET_POITEMX type BAPIMEPOITEMX_TP
      !ET_RETURN type BAPIRET1_T .
  methods CHECK_ZMZP_CONDITIONS_EXIST
    importing
      !LV_ITEM type EBELP
    exporting
      value(EV_RESULT) type ABAP_BOOL .
  methods CHECK_SO_PARTNER
    importing
      !IV_SO_NUM type VBELN
    returning
      value(EV_RETURN) type BOOLEAN .
  methods CHECK_SO_PARTNER_LSP_EXIST
    importing
      !IV_SO_NUM type VBELN
    returning
      value(EV_RETURN) type BOOLEAN .
  methods UPDATE_DELIVERY_DCI_INCOMPLETE
    importing
      !IV_EBELP type EBELP optional
      !IT_EKPO_DETAIL type GTT_EKPO_DETAIL optional
    exporting
      !ET_POITEM type BAPIMEPOITEM_TP
      !ET_POITEMX type BAPIMEPOITEMX_TP
      !ET_RETURN type BAPIRET1_T .
  methods UPDATE_DELIVERY_ADDRESS_PO .
  methods UPDATE_PR_CHANGE .
ENDCLASS.



CLASS ZPTPCL_I1058_ORDCHG IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->CHECK_INFO_TERM_VALID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INCOTERMS1                  TYPE        INCO1
* | [<-()] EV_RETURN                      TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_info_term_valid.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  CHECK_INFO_TERM_VALID                            *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Check Validity of Incoterms                      *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
    CLEAR ev_return.
    SELECT SINGLE inco1 FROM tinc INTO @DATA(lv_inco) WHERE inco1 = @iv_incoterms1.
    IF sy-subrc EQ 0.
      ev_return = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->CHECK_SO_PARTNER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SO_NUM                      TYPE        VBELN
* | [<-()] EV_RETURN                      TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_so_partner.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  CHECK_SO_PARTNER                                 *
*  Author            :  24086849                                         *
*  Creation Date     :  08/31/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Check Validity of Incoterms                      *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
    CLEAR ev_return.
    SELECT COUNT(*) FROM vbpa WHERE vbeln = iv_so_num
                                 AND posnr = '000000'
                                 AND parvw = gv_dbs_so_lsp .
    IF sy-subrc <> 0.
      ev_return = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->CHECK_SO_PARTNER_LSP_EXIST
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SO_NUM                      TYPE        VBELN
* | [<-()] EV_RETURN                      TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_so_partner_lsp_exist.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  CHECK_SO_PARTNER_LSP_EXIST                       *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  11/19/2020                                       *
*  Object ID         :  CR_1839                                          *
*  Business Contact  :  Simran Kaur                                      *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Additional Mapping for existing ORDCHG           *
*  Transport Request :  S4DK952570                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By  | Description                   *
*&-----------------------------------------------------------------------*

* Local Constants
    CONSTANTS: lc_posnr_0 TYPE posnr VALUE '000000'.   "Line item 0

*   Clear Return
    CLEAR ev_return.
    "Check if SO Headr contains Partner details for PL
    SELECT COUNT(*) FROM vbpa WHERE  vbeln = iv_so_num
                                 AND posnr = lc_posnr_0
                                 AND parvw = gv_dbs_so_lsp.
    "Mark flag ev_return as true if SO Header has PL details
    IF sy-subrc = 0.
      ev_return = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->CHECK_SO_PO_QTY_DDT_EQUAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_QTY_FLAG                    TYPE        ABAP_BOOL(optional)
* | [--->] IV_DDT_FLAG                    TYPE        ABAP_BOOL(optional)
* | [--->] LV_EBELP                       TYPE        EBELP(optional)
* | [--->] IS_EKKN                        TYPE        GTY_EKKN(optional)
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL(optional)
* | [<---] EV_RESULT                      TYPE        ABAP_BOOL
* | [<---] ET_EKPO_DETAIL_EQUAL           TYPE        GTT_EKPO_DETAIL
* | [<---] ET_EKPO_DETAIL_NOT_EQUAL       TYPE        GTT_EKPO_DETAIL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_so_po_qty_ddt_equal.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  v                                                *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Initialize  variables                            *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD CHECK_SO_PO_QTY_DDT_EQUAL
**&----------------------------------------------------------------------*
    CLEAR : et_ekpo_detail_equal, et_ekpo_detail_not_equal.
    IF gt_ekkn IS NOT INITIAL.
** Fetch SO Details
      SELECT vbeln,posnr,wmeng,mbdat
        FROM vbep
        INTO TABLE @DATA(lt_vbep)
        FOR ALL ENTRIES IN @gt_ekkn
        WHERE vbeln EQ @gv_so_num AND posnr EQ @gt_ekkn-vbelp.
      IF sy-subrc <> 0.
        CLEAR lt_vbep.
      ELSE.
        DELETE lt_vbep WHERE wmeng IS INITIAL.
      ENDIF.
** Fetch Po Details
      SELECT a~ebeln, a~ebelp, a~menge, b~eindt
        FROM ekpo AS a
        LEFT OUTER JOIN eket AS b ON b~ebeln = a~ebeln AND b~ebelp = a~ebelp AND b~etenr = 001
        INTO TABLE @DATA(lt_ekpo)
        FOR ALL ENTRIES IN @gt_ekkn
       WHERE a~ebeln = @gv_po_num
         AND a~ebelp = @gt_ekkn-ebelp.
      IF sy-subrc <> 0.
        CLEAR : lt_ekpo.
      ENDIF.
    ENDIF.
**  Compare Qty and Date
    LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_lt_ekpo>).
      TRY .
          DATA(ls_ekkn) = gt_ekkn[ ebeln = <lfs_lt_ekpo>-ebeln ebelp = <lfs_lt_ekpo>-ebelp ].
** Read PO Data
          TRY .
              DATA(ls_ekpo) = lt_ekpo[ ebelp = ls_ekkn-ebelp  ].
            CATCH cx_sy_itab_line_not_found.
              CLEAR : ls_ekpo.
          ENDTRY.
** Read SO Data
          TRY .
              DATA(ls_vbep) = lt_vbep[ posnr = ls_ekkn-vbelp ].
            CATCH cx_sy_itab_line_not_found.
              CLEAR : ls_vbep.
          ENDTRY.
        CATCH cx_sy_itab_line_not_found.
          CLEAR : ls_ekkn.
      ENDTRY.
** Compare the data
      IF ls_vbep IS NOT INITIAL AND ls_ekpo IS NOT INITIAL.
        CASE <lfs_lt_ekpo>-ctyp.
          WHEN gc_qty.
            IF ls_vbep-wmeng NE ls_ekpo-menge .
              APPEND <lfs_lt_ekpo> TO et_ekpo_detail_not_equal.
            ELSE.
              APPEND <lfs_lt_ekpo> TO et_ekpo_detail_equal.
            ENDIF.
          WHEN gc_ddt.
            IF  ls_vbep-mbdat NE ls_ekpo-eindt .
              APPEND <lfs_lt_ekpo> TO et_ekpo_detail_not_equal.
            ELSE.
              APPEND <lfs_lt_ekpo> TO et_ekpo_detail_equal.
            ENDIF.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->CHECK_SPLIT_MENGE_EXCEED
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL
* | [<-()] EV_RESULT                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_split_menge_exceed.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  CHECK_SPLIT_MENGE_EXCEED                         *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Initialize  variables                            *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD CHECK_SPLIT_MENGE_EXCEED
**&----------------------------------------------------------------------*
*   Local data declarations
    DATA lv_menge TYPE menge_d.
    CLEAR:lv_menge,
          ev_result.
    "Read first line item to be changed .
    IF line_exists( it_ekpo_detail[ 1 ] ).
      "Fetch line line item intolocal work area
      DATA(lv_ebelp) = it_ekpo_detail[ 1 ]-ebelp.
      "Collect sum into local variable
      LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs>).
        lv_menge = lv_menge  +  <lfs>-menge.
      ENDLOOP.
      "Fetch actual MENGE from DB
      SELECT SINGLE ebeln,ebelp,menge
              FROM ekpo INTO @DATA(ls_ekpo)
             WHERE ebeln = @gv_po_num
              AND ebelp = @lv_ebelp.
      IF sy-subrc EQ 0.
        "Check if split data and quantity in DB match. Else split should not be executed
        IF lv_menge EQ ls_ekpo-menge.
          ev_result = abap_true.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->CHECK_ZMZP_CONDITIONS_EXIST
* +-------------------------------------------------------------------------------------------------+
* | [--->] LV_ITEM                        TYPE        EBELP
* | [<---] EV_RESULT                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_zmzp_conditions_exist.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  CHECK_ZMZP_CONDITIONS_EXIST                      *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Verify if PO Line item has ZMZP condition        *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD CHECK_ZMZP_CONDITIONS_EXIST
**&----------------------------------------------------------------------*
    CLEAR ev_result.
    "Fetch Number of the Document Condition
    SELECT SINGLE ebeln,knumv FROM ekko
                              INTO @DATA(ls_ekko)
                              WHERE ebeln = @gv_po_num.
    IF sy-subrc EQ 0.
*     Pass KNUMV in PRCD_ELEMENTS-cONDITION RECORD NO
      SELECT SINGLE knumv FROM prcd_elements
                          INTO @DATA(lv_knumv)
                          WHERE knumv = @ls_ekko-knumv
                          AND kposn = @lv_item
                          AND kschl = @gc_zmzp.
      IF sy-subrc EQ 0.
        ev_result = abap_true.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->CLEAR_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear_data.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  CLEAR_DATA                                      *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Initialize  variables                            *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Change ID | Date       | Request #  | Changed By   | Description      *
*&-----------------------------------------------------------------------*
**& CR#1203   28/08/2020   S4DK914229   24086849     Price change for ZMZP
** CR 997
** CR_1839   28/11/2020   S4DK952570   24093840     Additional Mapping for
**                                                  existing ORDCHG
**&----------------------------------------------------------------------*
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD CLEAR_DATA
**&----------------------------------------------------------------------*
    CLEAR:
        zptpcl_i1058_ordchg=>gv_po_num,"Global variable for PO
        zptpcl_i1058_ordchg=>gv_so_num,"Global variable for SO
        zptpcl_i1058_ordchg=>gt_idoc_data, ""Global variable for IDOC
        zptpcl_i1058_ordchg=>gt_ekpo_detail, "Global variable for EKPO details tab
        zptpcl_i1058_ordchg=>gs_ekko_detail, ""Global variable for EKKO structure
        zptpcl_i1058_ordchg=>gs_return,"Global structure for error
        zptpcl_i1058_ordchg=>gt_potextheader,"PO Text header
        zptpcl_i1058_ordchg=>gv_only_header_change,
        zptpcl_i1058_ordchg=>gv_header_item_change,
        zptpcl_i1058_ordchg=>gt_pm_po_text,
** Begin of changes for CR 1203 / 997 by 24086849 on 28/08/2020
        zptpcl_i1058_ordchg=>gr_ord_reason,
        zptpcl_i1058_ordchg=>gr_sdp_cond_type,
        zptpcl_i1058_ordchg=>gv_parent_text_id,
        zptpcl_i1058_ordchg=>gv_dbs_so_lsp,
        zptpcl_i1058_ordchg=>gv_update_so_partner,
        zptpcl_i1058_ordchg=>gv_dbs_so_sf,
        zptpcl_i1058_ordchg=>gt_tvarvc,
** End of changes for CR 1203 / 997 by 24086849 on 28/08/2020
** Begin of changes for CR_1839 by 24093780 on 11/19/2020
       gt_popartner_lsp,
       gv_update_so_partner_lsp,
       gt_pm_1058_lsp,
       gr_pm_po_doctype,
       gt_lsp_hoi_text,
       gt_moa_plat_sloc,
       gt_ekkn_delivery,
       gr_1058_dis_icprice.
** End of changes for CR_1839 by 24093780 on 11/19/2020

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  CONSTRUCTOR                                      *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Initialize  variables                            *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*

*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD CONSTRUCTOR
**&----------------------------------------------------------------------*
    clear_data( )."clear global variables
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->DELETE_AB_TEXTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EBELP                       TYPE        EBELP
* | [<---] ES_RETURN                      TYPE        BAPIRETURN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_ab_texts.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  DELETE_AB_TEXTS                                  *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Delete confirmation texts                        *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&ALM#34439
** 07/10/2020  S4DK914229   24086849       Adding commit work to avaoid  *
*                                          locking issue.                *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD DELETE_AB_TEXTS
**&----------------------------------------------------------------------*
    "Local Data declaration
    DATA:lt_return_po_con TYPE bapiconf_t_return, "Error tab
         ls_return        TYPE bapireturn,
         lt_item          TYPE bapimeconf_t_item, "Items tab for update
         lt_itemx         TYPE bapimeconf_t_itemx, "Items tab for update
         lt_con           TYPE bapimeconf_t_detail, "Confirmations tab
         lt_conx          TYPE bapimeconf_t_detailx. "Confirmations update tab

    "Check if Line item contains AB texts
    IF line_exists( gt_confirmations[ po_item = iv_ebelp conf_type = gc_ab ] ) .
      "Populate internal tables for ME_PO_CONFIRM
      DATA(ls_con_bapi) = gt_confirmations[ po_item = iv_ebelp conf_type = gc_ab ].
      lt_con = VALUE #(  ( item_no = ls_con_bapi-po_item conf_ser = ls_con_bapi-conf_ser  delete_ind = abap_true ) ).
      lt_conx = VALUE #(  ( item_no = ls_con_bapi-po_item conf_ser = ls_con_bapi-conf_ser  delete_ind = abap_true
                           item_nox = abap_true
                           conf_serx = abap_true
                           ) ).

      "Call FM ME_PO_CONFIRM to update AB texts
      CALL FUNCTION 'ME_PO_CONFIRM'
        EXPORTING
          document_no   = gv_po_num
          item          = lt_item
          itemx         = lt_itemx
          confirmation  = lt_con
          confirmationx = lt_conx
        IMPORTING
          return        = lt_return_po_con.
      IF line_exists( lt_return_po_con[ type = if_mrm_constants=>gc_msgty_e ] ).
        es_return = VALUE #( type = ls_return-type
                             message = ls_return-message ).
** Begin of change for ALM#34439 by 24086849 on 07/10/2020
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
** End of change for ALM#34439 by 24086849 on 07/10/2020
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->FETCH_HEADER_SMPFLAG_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_TEXT                        TYPE        CHAR10
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD fetch_header_smpflag_text.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  FETCH_HEADER_SMPFLAG_TEXT                        *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Fetch simple flag for header                     *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
** CR_1839   30/11/2020    S4DK952570   24093780    Additional Mapping for
**                                                  existing ORDCHG
**&----------------------------------------------------------------------*
**& METHOD fetch_header_smpflag_text
**&----------------------------------------------------------------------*
*Local Variables declaration
    DATA: lv_qualz        TYPE edi_qualz,

*Local structure declaration
          ls_1058_e1edp35 TYPE e1edp35,
          ls_e1edpt1      TYPE e1edpt1,
          ls_e1edk35      TYPE e1edk35.

* Local constants
    CONSTANTS:lc_name TYPE string VALUE 'P&M_HEADER_SMP_FLAG',     " Tvarvc parameter name.
              lc_type TYPE c VALUE 'S'.                      " Tvarvc parameter type.

*   If only header is to be updated just update header and not item
    LOOP AT gt_idoc_data INTO DATA(ls_e1edk35_tmp) WHERE segnam = gs_segments-gc_e1edk35.
      ls_e1edk35 = ls_e1edk35_tmp-sdata.
      IF ls_e1edk35-qualz EQ gc_smp.
        rv_text = ls_e1edk35-cusadd.
        EXIT.
      ENDIF.
    ENDLOOP.


    IF rv_text IS NOT INITIAL.
      RETURN.
    ENDIF.

    "RV text is the update flag, if it is initial check for E1EDP01 for CTYP initial
    LOOP AT gt_idoc_data ASSIGNING FIELD-SYMBOL(<lfs_idoc_data>) WHERE segnam = gs_segments-gc_e1edp01.
      IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edpt1 psgnum = <lfs_idoc_data>-segnum ] ).
        LOOP AT gt_idoc_data ASSIGNING FIELD-SYMBOL(<lfs_ctyp>) WHERE segnam = gs_segments-gc_e1edpt1 AND  psgnum = <lfs_idoc_data>-segnum.
          CLEAR ls_e1edpt1.
          ls_e1edpt1 = <lfs_ctyp>-sdata.
          "IF changet type CTYP read E1EDPT2
          IF ls_e1edpt1-tdid NE gc_ctyp.
            DATA(lv_ctyp_not_found) = abap_true.
            EXIT.
          ELSE.
            lv_ctyp_not_found = abap_false.
          ENDIF.
        ENDLOOP.
      ELSE.
        lv_ctyp_not_found = abap_true.
      ENDIF.
      IF lv_ctyp_not_found EQ abap_true.
        CLEAR lv_ctyp_not_found.
        LOOP AT gt_idoc_data  INTO DATA(ls_idoc_data) WHERE segnam = gs_segments-gc_e1edp35 AND psgnum = <lfs_idoc_data>-segnum .
          ls_1058_e1edp35 = ls_idoc_data-sdata.
          lv_qualz = ls_1058_e1edp35-qualz.
          IF lv_qualz  EQ gc_smp .
            rv_text = ls_1058_e1edp35-cusadd.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.
      IF rv_text IS NOT INITIAL.
        EXIT.
      ENDIF.
    ENDLOOP.

    IF rv_text IS NOT INITIAL.
      RETURN.
    ENDIF.

*" Get Tvarvc Variable data
    SELECT name, sign, opti, low, high
    FROM tvarvc
    INTO TABLE @DATA(lt_tvarvc)
    WHERE name EQ @lc_name
    AND   type EQ @lc_type
    ORDER BY name.
    IF sy-subrc EQ 0.
      LOOP AT gt_header_changes ASSIGNING FIELD-SYMBOL(<lfs_changes>).
        CONDENSE <lfs_changes> NO-GAPS.
        IF line_exists( lt_tvarvc[ name = lc_name low = <lfs_changes> ] ). ##WARN_OK
          rv_text = lt_tvarvc[ name = lc_name low = <lfs_changes> ]-high ##WARN_OK.
          EXIT.
        ELSEIF line_exists( gt_pm_1839_header_smp[ low = <lfs_changes> ] ).  " ++ Added for CR_1839  by 24093780 on 11/30/2020
          rv_text = gt_pm_1839_header_smp[ low = <lfs_changes> ]-high  ##WARN_OK. " ++Added for CR_1839  by 24093780 on 11/30/2020
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->FETCH_ITEM_HEADER_INDICATORS
* +-------------------------------------------------------------------------------------------------+
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* | [<---] ET_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD fetch_item_header_indicators.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  FETCH_ITEM_HEADER_INDICATORS                     *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Populate change types for Header/Item            *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Change ID | Date       | Request #  | Changed By   | Description      *
*&-----------------------------------------------------------------------*
**& CR#1203   28/08/2020   S4DK914229   24086849    Price change for ZMZP
** CR 997
** ALM33906   06/10/2020   S4DK914229   24086849    OSP change code logic
**                                                  change
** CR_1839   30/11/2020    S4DK952570   24093780    Additional Mapping for
**                                                  existing ORDCHG
**&----------------------------------------------------------------------*
**& METHOD FETCH_ITEM_HEADER_INDICATORS
**&----------------------------------------------------------------------*
  "Local data declarations
  DATA:lt_changes     TYPE gtt_ctyp, "table type for changes
       lt_ekpo_detail TYPE STANDARD TABLE OF gty_ekpo_detail. "table type for EKPO
  "Local Structure declarations
  DATA:
    ls_ekpo_detail       TYPE gty_ekpo_detail, "Local structure for EKPO
    ls_1058_e1edp35      TYPE e1edp35,
    ls_e1edkt1           TYPE e1edkt1,
    ls_e1edpt1           TYPE e1edpt1,
    ls_e1edk17           TYPE e1edk17,
    ls_e1edkt2           TYPE e1edkt2,
    ls_e1edka1           TYPE e1edka1,
    ls_e1edp01           TYPE e1edp01,
    ls_change_identifier TYPE tdline,
    lv_itm_indx          TYPE char1,
    lv_partner           TYPE lifnr. " Added for CR_1839 by 24093780 on 11/30/2020

  CONSTANTS: lc_poheader_textid(6) TYPE c        VALUE 'HEADER',
             lc_lsp                TYPE gty_ctyp VALUE 'LSP', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_pl                 TYPE parvw    VALUE 'PL',  " Added for CR_1839 by 24093780 on 11/30/2020
             lc_xf                 TYPE parvw    VALUE 'XF' ##NO_TEXT, " Added for CR_1839 by 24093780 on 11/30/2020
             lc_stl                TYPE gty_ctyp VALUE 'STL', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_hoi(3)             TYPE c        VALUE 'HOI', "Added for CR_1839 by 24093780 on 11/30/2020
             lc_f33                TYPE tdid     VALUE 'F33', "Added for CR_1839 by 24093780 on 11/30/2020
             lc_y                  TYPE c        VALUE 'Y', "Added for CR_1839 by 24093780 on 11/30/2020
             lc_x                  TYPE c        VALUE 'X'. "Added for CR_1839 by 24093780 on 11/30/2020

  "Header Level Changes
  "Verify IDOC_DATA contains segment E1EDKT1
  LOOP  AT gt_idoc_data INTO DATA(ls_ctyp) WHERE segnam = gs_segments-gc_e1edkt1.
    CLEAR: ls_e1edkt1.
    ls_e1edkt1 = ls_ctyp-sdata.
    DATA(lv_segnum) = ls_ctyp-segnum.
    IF ls_e1edkt1-tdid EQ gc_change_type."ctyp
      "Verify IDOC_DATA contains segment E1EDKT2
      IF line_exists(  gt_idoc_data[ segnam = gs_segments-gc_e1edkt2  psgnum = lv_segnum ]  ).
        CLEAR ls_e1edkt2.
        ls_e1edkt2 =  gt_idoc_data[ segnam = gs_segments-gc_e1edkt2 psgnum = lv_segnum ]-sdata.
        IF ls_e1edkt2 IS NOT INITIAL.
          CLEAR ls_change_identifier.
          ls_change_identifier  = ls_e1edkt2-tdline.
          CLEAR gt_header_changes.
          SPLIT ls_change_identifier AT gc_seperator INTO TABLE gt_header_changes.
          EXIT.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  "Header Simple Flag
  IF gt_header_changes  IS NOT INITIAL.
    gv_only_header_change = abap_true.
    "Populate Header Table
    LOOP AT gt_header_changes ASSIGNING FIELD-SYMBOL(<lfs_changes>).
      "Populate PO number in to structure
      "Case statement to fetch values for all identifiers
      CASE <lfs_changes>-ctyp.
        WHEN gc_ptm."When PTM read E1EDK01 else populate return structure es_return
          IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edk01 ] ).
            DATA(ls_e1edk01) = CONV e1edk01( gt_idoc_data[ segnam = gs_segments-gc_e1edk01 ]-sdata ).
            gs_header_change-pmnttrms  = ls_e1edk01-zterm.
            gs_poheadx-pmnttrms = abap_true.
            DATA(lv_found) = abap_true.
          ELSE.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                 number = 005
                                 message_v1 = gs_segments-gc_e1edk01 ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.
          IF lv_found IS INITIAL.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                 number = 019
                                 message_v1 = gc_ptm ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.
        WHEN gc_pgp. "When pgp read E1EDKA1 else populate return structure es_return
          LOOP AT gt_idoc_data ASSIGNING FIELD-SYMBOL(<lfs_idoc>) WHERE segnam = gs_segments-gc_e1edka1.
            CLEAR ls_e1edka1.
            ls_e1edka1  = <lfs_idoc>-sdata.
            IF ls_e1edka1-parvw EQ gc_ek.
              gs_header_change-pur_group  = ls_e1edka1-partn.
              gs_poheadx-pur_group = abap_true.
              lv_found = abap_true.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_found IS INITIAL.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                 number = 019
                                 message_v1 = gc_pgp ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.
        WHEN gc_ict."When ICT read E1EDK17 else populate return structure es_return
          LOOP AT gt_idoc_data ASSIGNING <lfs_idoc> WHERE segnam = gs_segments-gc_e1edk17.
            CLEAR ls_e1edk17.
            ls_e1edk17  = <lfs_idoc>-sdata.
            IF ls_e1edk17-qualf = gc_qualf_001.
              gs_header_change-incoterms1  = ls_e1edk17-lkond.
              IF gs_header_change-incoterms1 IS  NOT INITIAL.
                IF  check_info_term_valid( gs_header_change-incoterms1 ) IS INITIAL.
                  es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                   number = 022
                                   message_v1 = gs_header_change-incoterms1 ).
                  zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
                  RETURN.
                ENDIF.
              ENDIF.
              gs_poheadx-incoterms1 = abap_true.
              lv_found = abap_true.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_found IS INITIAL.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                 number = 019
                                 message_v1 = gc_ict ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.
        WHEN gc_ic2."When IC2 read E1EDK17
          LOOP AT gt_idoc_data ASSIGNING <lfs_idoc> WHERE segnam = gs_segments-gc_e1edk17.
            CLEAR ls_e1edk17.
            ls_e1edk17  = <lfs_idoc>-sdata.
            IF ls_e1edk17-qualf = gc_qualf_002.
              IF ls_e1edk17-lktext IS NOT INITIAL.
                gs_header_change-incoterms2  = ls_e1edk17-lktext.
                gs_poheadx-incoterms2 = abap_true.
                lv_found = abap_true.
              ENDIF.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_found EQ abap_false.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                        number = 019
                        message_v1 = gc_ic2 ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.
        WHEN gc_vca."When VCA read E1EDKA1
          LOOP AT gt_idoc_data ASSIGNING <lfs_idoc> WHERE segnam = gs_segments-gc_e1edka1.
            CLEAR ls_e1edka1.
            ls_e1edka1  = <lfs_idoc>-sdata.
            IF ls_e1edka1-parvw EQ gc_xc
              AND NOT line_exists( gt_popartner[ partnerdesc = gc_cr buspartno = ls_e1edka1-lifnr ] ).
              DATA(ls_popartner) = VALUE bapiekkop( partnerdesc = gc_cr
                                                    langu = sy-langu
                                                    buspartno = |{ ls_e1edka1-lifnr ALPHA = IN  WIDTH = 10 }| ).
              APPEND ls_popartner TO gt_popartner.
              lv_found = abap_true.
            ENDIF.
          ENDLOOP.
          IF lv_found EQ abap_false.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                     number = 019
                     message_v1 = gc_vca ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.
        WHEN gc_spf."When SPF read E1EDKA1
          LOOP AT gt_idoc_data ASSIGNING <lfs_idoc> WHERE segnam = gs_segments-gc_e1edka1.
            CLEAR ls_e1edka1.
            ls_e1edka1  = <lfs_idoc>-sdata.
** Begin of changes for CR 1203/CR 997 by 24086849 on 28/08/2020
*            IF ls_e1edka1-parvw EQ gc_xs
*                            AND NOT line_exists( gt_popartner[ partnerdesc = gc_sf buspartno = ls_e1edka1-partn ] ).
*              ls_popartner = VALUE bapiekkop( partnerdesc = gc_sf
*                                             langu = sy-langu
*                                     buspartno = |{ ls_e1edka1-partn ALPHA = IN  WIDTH = 10 }| ).
*              APPEND ls_popartner TO gt_popartner.
*              lv_found = abap_true.
*            ENDIF.
            IF ls_e1edka1-parvw EQ gc_xs
                AND NOT line_exists( gt_popartner[ partnerdesc = gc_sf buspartno = ls_e1edka1-partn ] ).
              ls_popartner = VALUE bapiekkop( partnerdesc = gc_sf
                                                    langu = sy-langu
                                                    buspartno = |{ ls_e1edka1-partn ALPHA = IN  WIDTH = 10 }| ).
              APPEND ls_popartner TO gt_popartner.
              lv_found = abap_true.
              IF check_so_partner( gv_so_num ) IS NOT INITIAL.
                gv_update_so_partner = abap_true.
              ENDIF.
            ENDIF.
** End of changes for CR 1203/ CR 997 by 24086849 on 28/08/2020
          ENDLOOP.
          IF lv_found EQ abap_false.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                     number = 019
                     message_v1 = gc_spf ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.
        WHEN gc_ht1."When HT1 read E1EDKT1
          LOOP  AT gt_idoc_data INTO ls_ctyp WHERE segnam = gs_segments-gc_e1edkt1.
            CLEAR ls_e1edkt1.
            ls_e1edkt1 = ls_ctyp-sdata.
            CLEAR lv_segnum.
            lv_segnum = ls_ctyp-segnum.
            "IF changet type CTYP read E1EDPT2
            IF ls_e1edkt1-tdid EQ gc_f01.
              IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edkt2  psgnum = lv_segnum ] ).
                CLEAR ls_e1edkt2.
                ls_e1edkt2  = gt_idoc_data[ segnam = gs_segments-gc_e1edkt2  psgnum = lv_segnum ]-sdata .
                CLEAR ls_change_identifier.
                ls_change_identifier  = ls_e1edkt2-tdline."*LT1 value is for E1EDPT1 for any TDID
                IF ls_change_identifier IS NOT INITIAL.
                  DATA(ls_potextheader) = VALUE bapimepotextheader( po_number = gv_po_num
                                                                    text_id   = gv_parent_text_id "gs_save_text-gc_tdid_f01
                                                                    text_line = ls_change_identifier ) .
                  APPEND ls_potextheader TO gt_potextheader.
                  CLEAR ls_potextheader.
                  lv_found = abap_true.
                  EXIT.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDLOOP. "loop
          IF lv_found EQ abap_false.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                     number = 019
                     message_v1 = gc_ht1 ).
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
          ENDIF.

        WHEN lc_lsp.    " Added for CR_1839 by 24093780 on 11/17/2020
*/  Begin of CR_1839 by 24093780 on 11/17/2020
          IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                low  = abap_true ] ). "TVARVC for Feb object
*           "Check  IDOC for Segment E1EDKA1 where PARVW value maintained 'XF'
            LOOP AT gt_idoc_data ASSIGNING <lfs_idoc> WHERE segnam = gs_segments-gc_e1edka1. "#EC CI_STDSEQ "#EC CI_NESTED
              CLEAR ls_e1edka1.
              ls_e1edka1  = <lfs_idoc>-sdata.
*              "XF for LSP.
              IF ls_e1edka1-parvw EQ lc_xf.
**               Save data in SO. Populate global variable gt_popartner_lsp with partner details for PL
                IF gv_so_num IS NOT INITIAL . "If SO exists, NOn HOI
                  IF line_exists( gt_so_partner[ sd_doc = gv_so_num partn_role = lc_pl ] ). "IF SO exist and no data maintained in So header PL
                    APPEND INITIAL LINE TO gt_popartner_lsp ASSIGNING FIELD-SYMBOL(<lfs_popartner>).
                    "Populate gt_popartner_lsp with Partner type Language and Business Partno data.
                    <lfs_popartner> = VALUE bapiekkop(
                                      partnerdesc = lc_pl    "Partner Type PL
                                      langu       = sy-langu "Language
                                      buspartno   = |{ ls_e1edka1-partn ALPHA = IN  WIDTH = 10 }| ). "Business Partner Number

                    "Check if change type LSP, data exists in IDOC
                    lv_found = abap_true.
*
*                  "Call method check_so_partner_lsp_exist to check if SO has PL maintained in Partners.
                    IF check_so_partner_lsp_exist( gv_so_num ) IS NOT INITIAL.
                      "++ added gv_update_so_partner_lsp flag to use in method UPDATE_SO_LINE_ITEM
                      gv_update_so_partner_lsp = abap_true.
                      gv_update_so_partner     = abap_true. "Mark the flags to Populate PO data in method UPDATE_SO_LINE_ITEM
                    ENDIF.
                  ELSE.
                    es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                     number = 025 " There is no LSP Partner maintained at Sales order
                     message_v1 = lc_lsp ).
                    zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
                    RETURN.
                  ENDIF.
                ELSE. "For PO with no SO . HOI case
                  lv_found = abap_true.
*                 "Fetch Text ID for PO Text Header
                  DATA(lv_hoi_text_id) = COND #( WHEN line_exists( gt_lsp_hoi_text[ low = lc_hoi ] )
                                                 THEN gt_pm_1058_lsp[ low = lc_hoi ]-high
                                                 ELSE lc_f33 ).

                  "Populate lv_partner with Partner number. Apply internal conversion.
                  lv_partner = |{ ls_e1edka1-partn ALPHA = IN  WIDTH = 10 }|.

                  "If lv_partner number is present in IDOC, Populate GT_POTEXTHEADER table
                  IF lv_partner IS NOT INITIAL.
                    APPEND INITIAL LINE TO gt_potextheader ASSIGNING FIELD-SYMBOL(<ls_potextheader>).
                    <ls_potextheader> = VALUE bapimepotextheader( po_number = gv_po_num
                                                   text_id = lv_hoi_text_id
                                                   text_line = lv_partner ) .

*                    "Fetch Address number from LFA1
                    SELECT SINGLE adrnr                             "Address
                       INTO  @DATA(lv_adrnr)
                             FROM lfa1
                            WHERE lifnr EQ @lv_partner.
                    IF sy-subrc EQ 0.
*                    "Popualte gt_ekkn_delivery table with PO line item and Address details
                      LOOP AT gt_ekkn ASSIGNING FIELD-SYMBOL(<lfs_ekkn>). "#EC CI_STDSEQ "#EC CI_NESTED

                        APPEND INITIAL LINE TO gt_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail>).
                        <lfs_ekpo_detail> = VALUE gty_ekpo_detail( ebeln = gv_po_num
                                                                   ebelp = <lfs_ekkn>-ebelp
                                                                   adrnr = lv_adrnr
                                                                   ctyp  = lc_lsp
                                                                   smp_flag = VALUE #( gt_pm_1839_item_smp[ low = lc_lsp ]-high DEFAULT lc_y ) ).
                      ENDLOOP.


*  ******************************************************************************
*  LSP is a header level change in SO and also Item level change in PO
*  When PO contains SO , we mark only gv_only_header_change
*  For HOI in PO where SO is not available , mark gv_header_item_change true
*  and gv_only_header_change false. to fill PO line items
* *******************************************************************************
                      IF gv_only_header_change = abap_true.
                        gv_header_item_change = abap_true.
                        gv_only_header_change = abap_false."LSP is for PO line item change given in Header. Mark header and item as TRUE
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDLOOP.
*
            IF lv_found EQ abap_false.
              es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                       number = 019 "No data maintained for change type LSP
                       message_v1 = lc_lsp ).
              zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
              RETURN.
            ENDIF.
          ENDIF.
*       End of CR_1839 by 24093780 on 11/17/2020

        WHEN OTHERS.
      ENDCASE.
      CLEAR:lv_found,lv_segnum.
    ENDLOOP.

    "Fetch simple header flag
    DATA(lv_smp_flag) = fetch_header_smpflag_text( ).
    IF lv_smp_flag IS NOT INITIAL.
      ls_potextheader = VALUE bapimepotextheader( po_number = gv_po_num
                                                  text_id = gs_save_text-gc_tdid_f26
                                                  text_line = lv_smp_flag ) .
      APPEND ls_potextheader TO gt_potextheader.



      "Append Dummy text ID with date and time to trigger BAPI_PO_CHANGE
      DATA(ls_bapimepotextheader_tmp) =  CORRESPONDING bapimepotextheader( ls_potextheader ).

      TRY.
          ls_bapimepotextheader_tmp-text_id = gt_pm_po_text[ low = lc_poheader_textid ]-high.
        CATCH cx_sy_itab_line_not_found.
          CLEAR ls_bapimepotextheader_tmp-text_id .
      ENDTRY.

      ls_bapimepotextheader_tmp-text_line = |{ sy-datum }| && |{ sy-uzeit }|.
      APPEND ls_bapimepotextheader_tmp TO gt_potextheader.

      CLEAR ls_potextheader.
    ELSE."If header changes are not initial and simple flag ls_ekko_detail-smp_flag is empty , return
      es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                           number = 007
                           message_v1 = gv_po_num ).
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      RETURN.
    ENDIF.
  ENDIF.

  "Item Level idoc changes
  LOOP AT gt_idoc_data ASSIGNING FIELD-SYMBOL(<lfs_e1edp01>) WHERE segnam = gs_segments-gc_e1edp01."Loop at item level
    ls_e1edp01 = <lfs_e1edp01>-sdata.
    ls_ekpo_detail-ebeln = gv_po_num.
    ls_ekpo_detail-ebelp = ls_e1edp01-posex.
    ls_ekpo_detail-menge = ls_e1edp01-menge.

    IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edp20 psgnum = <lfs_e1edp01>-segnum ] ) .
      DATA(ls_e1edp20) = CONV e1edp20( gt_idoc_data[ segnam = gs_segments-gc_e1edp20 psgnum = <lfs_e1edp01>-segnum ]-sdata ).
      ls_ekpo_detail-aedat = ls_e1edp20-edatu.
    ENDIF.

    "Read Change Flag in SEGMENT E1EDPT1
    LOOP  AT gt_idoc_data INTO ls_ctyp WHERE segnam = gs_segments-gc_e1edpt1 AND  psgnum = <lfs_e1edp01>-segnum.
      CLEAR ls_e1edpt1.
      ls_e1edpt1 = ls_ctyp-sdata.
      lv_segnum = ls_ctyp-segnum.
      "IF changet type CTYP read E1EDPT2
      IF ls_e1edpt1-tdid EQ  gc_ctyp.
        IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edpt2  psgnum = lv_segnum ] ).
          DATA(ls_e1edpt2)  = CONV e1edpt2( gt_idoc_data[ segnam = gs_segments-gc_e1edpt2  psgnum = lv_segnum ]-sdata ).
          CLEAR ls_change_identifier.
          ls_change_identifier  = ls_e1edpt2-tdline.
**  BOC for ALM 33906 by 24086849 on 6th Oct 2020
          IF ls_change_identifier = gc_osp.
            CLEAR:ls_change_identifier.
            ls_change_identifier = gc_qty_ddt.
          ENDIF.
**  EOC for ALM 33906 by 24086849 on 6th Oct 2020
          CLEAR lt_changes.
          SPLIT ls_change_identifier AT gc_seperator INTO TABLE lt_changes.
          ls_ekpo_detail-idoc_line = ls_ekpo_detail-idoc_line + 1.
          "Populate ekpo detail table with change types
          LOOP AT lt_changes ASSIGNING FIELD-SYMBOL(<lfs_change1>).
            IF gv_only_header_change = abap_true.
              gv_header_item_change = abap_true.
              gv_only_header_change = abap_false.
            ENDIF.
            ls_ekpo_detail-ctyp = <lfs_change1>-ctyp.
            APPEND ls_ekpo_detail TO lt_ekpo_detail.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDLOOP. "loop
  ENDLOOP.

  IF <lfs_ekpo_detail> IS ASSIGNED.
    UNASSIGN <lfs_ekpo_detail>.
  ENDIF.
  "Fetch data for each qualifier. For every loop each line in LT_EKPO_DETAIL is filled.
  LOOP AT lt_ekpo_detail ASSIGNING <lfs_ekpo_detail>.
    "Loop at item level data in idoc where line item of EKPO detail eq IDOC_DATA
    CLEAR: lv_itm_indx.
    LOOP AT gt_idoc_data ASSIGNING <lfs_e1edp01> WHERE segnam = gs_segments-gc_e1edp01.
      lv_itm_indx = lv_itm_indx + 1."Check index of line item for which E1EDP01 is being read and only read data for respective line item
      IF lv_itm_indx = <lfs_ekpo_detail>-idoc_line.
        ls_e1edp01 = <lfs_e1edp01>-sdata.
        IF ls_e1edp01-posex EQ <lfs_ekpo_detail>-ebelp.
          "Fetch data for each CTYP
          CASE <lfs_ekpo_detail>-ctyp.
            WHEN gc_qty.
*            <lfs_ekpo_detail>-abgru = ls_e1edp01-abgru.
            WHEN gc_ddt ."When date fetch data from E1EDP20
*            IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edp20 psgnum = <lfs_e1edp01>-segnum ] ) .
*              DATA(ls_e1edp20) = CONV e1edp20( gt_idoc_data[ segnam = gs_segments-gc_e1edp20 psgnum = <lfs_e1edp01>-segnum ]-sdata ).
*              <lfs_ekpo_detail>-aedat = ls_e1edp20-edatu.
*            ELSE."if segment does not exist return
*              es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
*                                   number = 005
*                                   message_v1 =  gs_segments-gc_e1edp20 ).
*              RETURN.
*            ENDIF.
            WHEN gc_psp OR gc_osp.
*            IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edp20 psgnum = <lfs_e1edp01>-segnum ] ) .
*              ls_e1edp20 = gt_idoc_data[ segnam = gs_segments-gc_e1edp20 psgnum = <lfs_e1edp01>-segnum ]-sdata.
*              <lfs_ekpo_detail>-aedat = ls_e1edp20-edatu.
*              EXIT.
*            ELSE."if segment does not exist return
*              es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
*                                   number = 005
*                                   message_v1 =  gs_segments-gc_e1edp20 ).
*              RETURN.
*            ENDIF.
            WHEN gc_vpn.  "When VPN fetch data from E1EDP01
              IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edp19 psgnum = <lfs_e1edp01>-segnum ] ).
                DATA(ls_e1edp19) = CONV e1edp19( gt_idoc_data[ segnam = gs_segments-gc_e1edp19 psgnum = <lfs_e1edp01>-segnum ]-sdata ).
                IF ls_e1edp19-qualf = gc_qualf_002.
                  <lfs_ekpo_detail>-idnlf = ls_e1edp19-idtnr.
                ENDIF.
              ELSE."Else return
                es_return = VALUE #( type       = if_mrm_constants=>gc_msgty_e
                                     number     = 005
                                     message_v1 = gs_segments-gc_e1edp19 ).
                zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
                RETURN.
              ENDIF.
            WHEN gc_sdp."When date fetch data from E1EDP20
              IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edp05 psgnum = <lfs_e1edp01>-segnum ] ).
                DATA(ls_e1edp05) = CONV e1edp05( gt_idoc_data[ segnam = gs_segments-gc_e1edp05 psgnum = <lfs_e1edp01>-segnum ]-sdata ).
                IF ls_e1edp05-kschl EQ gc_zmzp.
*         Begin of CR_1839 by 24093780 on 11/17/2020
                  IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                               low  = abap_true ] ).
*             Get Purchasing Doc type
                    SELECT SINGLE bsart
                                 INTO @DATA(lv_bsart)
                                 FROM ekko
                                 WHERE ebeln EQ @gv_po_num.
                    IF sy-subrc EQ 0 AND lv_bsart NOT IN gr_1058_dis_icprice.
*         End of CR_1839 by 24093780 on 11/17/2020

                      lv_found = abap_true.
                      <lfs_ekpo_detail>-netpr = ls_e1edp05-krate.
                      <lfs_ekpo_detail>-peinh = ls_e1edp05-uprbs. " ++ CR#37182  by 24093780 on 29/10/2020

                      <lfs_ekpo_detail>-meins = ls_e1edp05-meaun.
                      "if E1EDP05 exists fetch data from E1EDP35
                      LOOP  AT gt_idoc_data ASSIGNING FIELD-SYMBOL(<lfs_e1edp35>)
                        WHERE segnam = gs_segments-gc_e1edp35 AND psgnum = <lfs_e1edp01>-segnum.
                        ls_1058_e1edp35 = <lfs_e1edp35>-sdata.
                        IF ls_1058_e1edp35-qualz EQ gc_rsc.
** Begin of changes for CR 1203 by 24086849 on 28/08/2020
                          READ TABLE gr_ord_reason INTO DATA(ls_ord_reason) WITH KEY low = ls_1058_e1edp35-cusadd.
                          IF sy-subrc = 0.
*                    <lfs_ekpo_detail>-bsgru = ls_1058_e1edp35-cusadd.
                            <lfs_ekpo_detail>-bsgru = ls_ord_reason-high.
                            EXIT.
                          ENDIF.
** End of changes for CR 1203 by 24086849 on 28/08/2020
                        ENDIF.
                      ENDLOOP.
*                 Begin of CR_1839 by 24093780 on 11/18/2020
                    ELSE.
                      es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                         number = 023 "No Price Change is Allowed for IC PO in S4
                                         message_v2 = <lfs_ekpo_detail>-ebelp ).
                      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
                      RETURN.
                    ENDIF.
                  ENDIF.
*                 End of CR_1839 by 24093780 on 11/18/2020

*                  lv_found = abap_true.
*                  <lfs_ekpo_detail>-netpr = ls_e1edp05-krate.
**                  <lfs_ekpo_detail>-bprme = ls_e1edp05-uprbs.
*                  <lfs_ekpo_detail>-peinh = ls_e1edp05-uprbs. " ++ CR#37182  by 24093780 on 29/10/2020
*
*                  <lfs_ekpo_detail>-meins = ls_e1edp05-meaun.
*                  "if E1EDP05 exists fetch data from E1EDP35
*                  LOOP  AT gt_idoc_data ASSIGNING FIELD-SYMBOL(<lfs_e1edp35>)
*                    WHERE segnam = gs_segments-gc_e1edp35 AND psgnum = <lfs_e1edp01>-segnum.
*                    ls_1058_e1edp35 = <lfs_e1edp35>-sdata.
*                    IF ls_1058_e1edp35-qualz EQ gc_rsc.
*** Begin of changes for CR 1203 by 24086849 on 28/08/2020
*                      READ TABLE gr_ord_reason INTO DATA(ls_ord_reason) WITH KEY low = ls_1058_e1edp35-cusadd.
*                      IF sy-subrc = 0.
**                    <lfs_ekpo_detail>-bsgru = ls_1058_e1edp35-cusadd.
*                        <lfs_ekpo_detail>-bsgru = ls_ord_reason-high.
*                        EXIT.
*                      ENDIF.
*** End of changes for CR 1203 by 24086849 on 28/08/2020
*                    ENDIF.
*                  ENDLOOP.
                ENDIF.

                IF lv_found EQ abap_false.
                  es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                    number = 020
                    message_v2 = <lfs_ekpo_detail>-ebelp ).
                  zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
                  RETURN.
                ENDIF.
              ELSE."If segment does not exst , return
                es_return = VALUE #( type       = if_mrm_constants=>gc_msgty_e
                                     number     = 005
                                     message_v1 =  gs_segments-gc_e1edp05 ).
                zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
                RETURN.
              ENDIF.
            WHEN gc_lt1."When date fetch data from E1EDPT1
              "Read Change Flag in SEGMENT E1EDPT1
              LOOP  AT gt_idoc_data INTO ls_ctyp WHERE segnam = gs_segments-gc_e1edpt1 AND  psgnum = <lfs_e1edp01>-segnum.
                CLEAR ls_e1edkt1.
                ls_e1edpt1 = ls_ctyp-sdata.
                lv_segnum = ls_ctyp-segnum.
                "IF changet type CTYP read E1EDPT2
                IF ls_e1edpt1-tdid EQ gc_f01.
                  IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edpt2  psgnum = lv_segnum ] ).
                    CLEAR ls_e1edpt2.
                    ls_e1edpt2  = gt_idoc_data[ segnam = gs_segments-gc_e1edpt2  psgnum = lv_segnum ]-sdata.
                    CLEAR ls_change_identifier.
                    ls_change_identifier  = ls_e1edpt2-tdline."*LT1 value is for E1EDPT1 for any TDID
                    <lfs_ekpo_detail>-lt1_text =  ls_change_identifier .
                  ENDIF.
                  EXIT.
                ENDIF.
              ENDLOOP. "loop
            WHEN gc_icl.
              <lfs_ekpo_detail>-abgru = ls_e1edp01-abgru.
*         Begin of CR_1839 by 24093780 on 11/17/2020
            WHEN  lc_stl.
              IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                              low  = abap_true ] ).
                "Populate Storage location in PO line item Final internal table
                <lfs_ekpo_detail>-lgort = ls_e1edp01-lgort.

*               Check PLANT and WERKS combination is updated in TVARVC
                TRY.
                    "Fetch PO line item from GT_ITEMS table
                    DATA(lv_plant) = gt_items[ po_item =  <lfs_ekpo_detail>-ebelp ]-plant.
                    "Fetch storage location from TVARVC by passing WERKS
                    DATA(lv_sloc) =  gt_moa_plat_sloc[ low = lv_plant ]-high.
                    IF lv_sloc EQ ls_e1edp01-lgort.
                      <lfs_ekpo_detail>-weora = abap_true.
                    ENDIF.

                  CATCH cx_sy_itab_line_not_found.
                    CLEAR:lv_plant,lv_sloc.
                ENDTRY.
              ENDIF.
*         End of CR_1839 by 24093780 on 11/17/2020
          ENDCASE.

          IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edp35 psgnum =  <lfs_e1edp01>-segnum ] ).
            "Fetchg SMP Flag from segmet 35 for QUALZ SMP and ZAK
            LOOP  AT gt_idoc_data ASSIGNING <lfs_e1edp35> WHERE segnam = gs_segments-gc_e1edp35 AND
                                                                psgnum = <lfs_e1edp01>-segnum.
              ls_1058_e1edp35 = <lfs_e1edp35>-sdata.
              IF ls_1058_e1edp35-qualz EQ gc_smp.
                <lfs_ekpo_detail>-smp_flag = ls_1058_e1edp35-cusadd.
              ELSEIF  ls_1058_e1edp35-qualz EQ gc_zak.
                <lfs_ekpo_detail>-smp_addtnl = ls_1058_e1edp35-cusadd.
                IF ls_1058_e1edp35-cusadd = gc_x2.
                  <lfs_ekpo_detail>-cmpt_del_flg = abap_true.
                ENDIF.
              ENDIF.
            ENDLOOP.
          ENDIF.

          IF <lfs_ekpo_detail>-smp_flag IS INITIAL.
*         Begin of CR_1839 by 24093780 on 11/17/2020
            IF <lfs_ekpo_detail>-ctyp EQ gc_qty.
              <lfs_ekpo_detail>-smp_flag = VALUE #( gt_pm_1839_item_smp[ low = gc_qty ]-high DEFAULT lc_x ).
            ELSEIF  <lfs_ekpo_detail>-ctyp EQ lc_stl.
              <lfs_ekpo_detail>-smp_flag = VALUE #( gt_pm_1839_item_smp[ low = lc_stl ]-high DEFAULT lc_x ).
*         End of CR_1839 by 24093780 on 11/17/2020
            ELSE.
              es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                 number = 003
                                 message =   | { TEXT-010 } { <lfs_ekpo_detail>-ebelp } |
                                 message_v2 = <lfs_ekpo_detail>-ebelp  ).
              zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            ENDIF.
          ENDIF.
        ELSE.
          CONTINUE.
        ENDIF.
      ELSE."IF lv_itm_indx = <lfs_ekpo_detail>-idoc_line.
        CONTINUE.
      ENDIF."IF lv_itm_indx = <lfs_ekpo_detail>-idoc_line.
    ENDLOOP.
  ENDLOOP.

  "Populate final internal table GT_EKPO_DETAIL
  IF lt_ekpo_detail IS NOT INITIAL.
    APPEND LINES OF lt_ekpo_detail TO gt_ekpo_detail.
  ENDIF.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->READ_PO_NUM_IDOC
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_po_num_idoc.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  READ_PO_NUM_IDOC                                 *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Read BELNR from Idoc Segment E1EDK01             *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Change ID | Date       | Request #  | Changed By   | Description      *
*&-----------------------------------------------------------------------*
**& CR#1203   28/08/2020   S4DK914229   24086849     Price change for ZMZP
**  CR 997
**ALM#33029   24/09/2020   S4DK914229   24086849     PO number frm E1EDK02
** CR_1839   28/11/2020   S4DK952570   24093780     Additional Mapping for
**                                                  existing ORDCHG
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD read_po_num_idoc
**&----------------------------------------------------------------------*
    "Read PO Number
    DATA:ls_e1edk02 TYPE e1edk02.
**  Begin of change for ALM#33029 by 24086849 on 24/09/2020
*    IF line_exists( gt_idoc_data[ segnam = gs_segments-gc_e1edk01 ] ).
*      DATA(ls_e1edk01) = CONV e1edk01( gt_idoc_data[ segnam = gs_segments-gc_e1edk01 ]-sdata ).
*      gv_po_num = |{ ls_e1edk01-belnr ALPHA = IN }| .
*    ELSE.
*      gs_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
*                         number = 005
*                         message_v1 = gs_segments-gc_e1edk01 ) .
*      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
*      RETURN.
*    ENDIF.
    CLEAR:ls_e1edk02.
    LOOP AT gt_idoc_data INTO DATA(ls_idoc_data) WHERE segnam = gs_segments-gc_e1edk02.
      ls_e1edk02 = ls_idoc_data-sdata.
      IF ls_e1edk02-qualf = gc_qualf_001.
        gv_po_num = |{ ls_e1edk02-belnr ALPHA = IN }| .
        EXIT.
      ENDIF.
    ENDLOOP.
**  End of change for ALM#33029 by 24086849 on 24/09/2020

    IF gv_po_num IS NOT INITIAL.
      "Check PO valid
      SELECT SINGLE ebeln, bsart
        FROM ekko
        WHERE ebeln EQ @gv_po_num
        INTO @DATA(ls_ekko).
      IF sy-subrc NE 0.
        CLEAR gs_return.
        gs_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                             number = 004
                             message_v1 = gv_po_num ) .
        zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      ENDIF.

*   Begin of CR_1839 by 24093780 on 11/18/2020
      IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                   low  = abap_true ] ).
        IF ls_ekko-bsart NOT IN gr_pm_po_doctype.
          "Check PO valid for DOCUMENT TYPES in gr_pm_po_doctype
            CLEAR gs_return.
            gs_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                number = 024 ) .
            zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
            RETURN.
        ENDIF.
      ENDIF.
*   End of CR_1839 by 24093780 on 11/18/2020
      ELSE.
        CLEAR gs_return.
        gs_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                            number = 012 ) .
        zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
        RETURN.
      ENDIF.

      CLEAR: gs_poheader,gt_header_texts,gt_items,gt_schedule,gt_item_texts,gt_confirmations,gt_return,gt_cond_po.
      "Fetch PO details from BAPI_PO_GETDETAIL
      CALL FUNCTION 'BAPI_PO_GETDETAIL' "#EC CI_USAGE_OK[2438131] "#EC CI_USAGE_OK[1803189]
        EXPORTING
          purchaseorder         = gv_po_num
          items                 = abap_true
          schedules             = abap_true
          item_texts            = abap_true
          header_texts          = abap_true
          confirmations         = abap_true
        IMPORTING
          po_header             = gs_poheader
        TABLES
          po_header_texts       = gt_header_texts
          po_items              = gt_items
          po_item_schedules     = gt_schedule
          po_item_texts         = gt_item_texts
          po_item_confirmations = gt_confirmations
          return                = gt_return.
      IF gs_poheader-delete_ind IS NOT INITIAL.
        gs_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                             number = 016
                             message_v1 = gv_po_num ).
        zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
        RETURN.
      ENDIF.

      "Populate header structure
      gs_header_change = CORRESPONDING #( gs_poheader ). ##ENH_OK.
      gs_poheadx-po_number = abap_true.

** Begin of changes for CR 1203 / 997 by 24086849 on 28/08/2020
      "Used the below BAPI because needed all codition recoreds available for the PO
      CALL FUNCTION 'BAPI_PO_GETDETAIL1'
        EXPORTING
          purchaseorder = gv_po_num
        TABLES
          pocond        = gt_cond_po.
** End of changes for CR 1203 / 997 by 24086849 on 28/08/2020
    ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZPTPCL_I1058_ORDCHG=>RESPONSE
* +-------------------------------------------------------------------------------------------------+
* | [--->] P_TASK                         TYPE        CLIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD RESPONSE.
    RECEIVE RESULTS FROM FUNCTION 'ZPTP_I1058_ORDCHG' "#EC CI_USAGE_OK ##FM_ARG_OK
     TABLES
       return  = gt_return_so
     EXCEPTIONS
       system_failure         = 1 MESSAGE gv_msg
       communication_failure  = 2 MESSAGE gv_msg
       OTHERS                 = 3.
    CLEAR gv_sysubrc.
    gv_sysubrc = sy-subrc.
    gv_flag = abap_true.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->SET_DATA
* +-------------------------------------------------------------------------------------------------+
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD set_data.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  SET_DATA                                         *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/10/2020                                       *
**  Object ID         :  PTPI1058                                         *
**  Business Contact  :  Dhinesh Kulaseharan                              *
**  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
**  TS Author         :  Kishore.S                                        *
**  Description       :  Initialize  variables                            *
**  Transport Request :  S4DK914229                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
*&-----------------------------------------------------------------------*
**& CR#1203   28/08/2020   S4DK914229   24086849     Price change for ZMZP
** CR997
** CR_1839   28/11/2020    S4DK952570   24093780     Additional Mapping for
**                                                   existing ORDCHG
*&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD SET_DATA
***&----------------------------------------------------------------------*
  "Local structures
  TYPES:BEGIN OF lty_vbeln,
          vbeln TYPE vbeln,
        END OF lty_vbeln.
* Local data declaration
  DATA:lt_vbeln  TYPE STANDARD TABLE OF lty_vbeln, "So table
       lt_return TYPE STANDARD TABLE OF bapiret2.
* Local structure declaration
  DATA:ls_order_view   TYPE order_view,
       ls_order_header TYPE bapisdhd.

* Local Constant declaration
  CONSTANTS :lc_name               TYPE string     VALUE 'ZI1058_CTYP_START_FROM_SO',    " Tvarvc parameter name.
             lc_pm_po_texts        TYPE rvari_vnam VALUE 'P&M_PO_TEXTS',                 "PO Text ID for Header and Item
             lc_pm_1058_po_doctype TYPE rvari_vnam VALUE 'P&M_1058_PO_DOCTYPE', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_pm_1058_lsp        TYPE rvari_vnam VALUE 'P&M_1058_LSP', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_moa_plat_sloc      TYPE rvari_vnam VALUE 'ZPTPI1238_MOA_PLAT_SLOC', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_1058_dis_icprice   TYPE rvari_vnam VALUE 'P&M_1058_DIS_ICPRICE', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_lsp_hoi_text       TYPE rvari_vnam VALUE 'P&M_1050_LSP_HOI_TEXT', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_pm_1839_header_smp TYPE rvari_vnam VALUE 'P&M_1839_HEADER_SMP', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_pm_1839_item_smp   TYPE rvari_vnam VALUE 'P&M_1839_ITEM_SMP ', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_s                  TYPE c          VALUE 'S', " Added for CR_1839 by 24093780 on 11/30/2020
             lc_doc_prc            TYPE rvari_vnam VALUE 'P&M_1926_DOC_PRICE', "Doc price TVARV - Added for CR_1926 by 24097570 on 08/12/2020
             lc_prc_ctrl           TYPE rvari_vnam VALUE 'P&M_1926_DEL_PCTRL ', "Price control TVARV - Added for CR_1926 by 24097570 on 08/12/2020
             lc_shp_txt            TYPE rvari_vnam VALUE 'PTPE1110_SHIPDATE_TEXTID ', "Text ID for ship date TVARV - Added for CR_1926 by 24097570 on 08/12/2020
             lc_del_txt            TYPE rvari_vnam VALUE 'PTPE1110_DELDATE_TEXTID', "Text ID for delivery date TVARV -  Added for CR_1926 by 24097570 on 08/12/2020
             lc_kschl              TYPE rvari_vnam VALUE 'PTPE1110_COND_TYPES'. "Cond types TVARV - Added for CR_1926 by 24097570 on 08/12/2020
* Get Tvarvc Variable data
  SELECT name,
         type,  "++ Added for CR_1839 by 24086849 on 30/11/2020.
         sign,
         opti,
         low,
         high
    FROM tvarvc
    INTO TABLE @gt_tvarvc "@DATA(lt_tvarvc)
    WHERE name IN ( @lc_name, @lc_pm_po_texts,
** Begin of changes for CR 1203 / 997 by 24086849 on 28/08/2020
    @gc_dbs_reasoncodes,
    @gc_parent_text,
    @gc_sdp_cond_type,
    @gc_dbs_so_lsp,
    @gc_dbs_so_sf,
    @gc_ship_from_country,
** End of changes for CR 1203 /997 by 24086849 on 28/08/2020.

** Begin of CR_1839 by 24086849 on 28/11/2020.
    @lc_1058_dis_icprice,
    @lc_pm_1058_lsp,
    @lc_pm_1058_po_doctype ,
    @lc_moa_plat_sloc,
    @lc_pm_1839_header_smp,
    @lc_pm_1839_item_smp,
    @lc_lsp_hoi_text,
** End of CR_1839 by 24086849 on 28/11/2020.

** Start of CR_1926 by 24097570 on 08/12/2020
    @lc_doc_prc,
    @lc_prc_ctrl,
    @lc_shp_txt,
    @lc_del_txt,
    @lc_kschl
** End of CR_1926 by 24097570 on 08/12/2020
    ).
  IF sy-subrc IS INITIAL.
    "TVARVC entry to check if the processing must start from SO to PO
    gr_start_from_so = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_name )
                                    ( sign   = ls_tvarvc-sign
                                      option = ls_tvarvc-opti
                                      low    = ls_tvarvc-low
                                      high   = ls_tvarvc-high ) ).

** Begin of changes for CR 1203 /997 by 24086849 on 28/08/2020
    gr_ord_reason = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = gc_dbs_reasoncodes )
                                ( sign   = ls_tvarvc-sign
                                  option = ls_tvarvc-opti
                                  low    = ls_tvarvc-low
                                  high   = ls_tvarvc-high ) ).
    gr_sdp_cond_type = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = gc_sdp_cond_type )
                                ( sign   = ls_tvarvc-sign
                                  option = ls_tvarvc-opti
                                  low    = ls_tvarvc-low
                                  high   = ls_tvarvc-high ) ).
    READ TABLE gt_tvarvc INTO DATA(ls_tvarvc1) WITH KEY name = gc_parent_text.
    IF sy-subrc = 0.
      gv_parent_text_id = ls_tvarvc1-low.
    ENDIF.
    READ TABLE gt_tvarvc INTO ls_tvarvc1 WITH KEY name = gc_dbs_so_lsp.
    IF sy-subrc = 0.
      gv_dbs_so_lsp = ls_tvarvc1-low.
    ENDIF.
    READ TABLE gt_tvarvc INTO ls_tvarvc1 WITH KEY name = gc_dbs_so_sf.
    IF sy-subrc = 0.
      gv_dbs_so_sf = ls_tvarvc1-low.
    ENDIF.
** End of changes for CR 1203 /997 by 24086849 on 28/08/2020.

    "Text ID's to save Text ID's for Header and Item
    gt_pm_po_text = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_pm_po_texts )
                                  ( low    = ls_tvarvc-low
                                    high   = ls_tvarvc-high ) ).

*  Begin of CR_1839 by 24093780 on 11/11/2020
    "Partner function value for Internal mapping from XF to PL in SAP
    gt_pm_1058_lsp = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_pm_1058_lsp AND type = lc_s )
                                 ( low    = ls_tvarvc-low
                                   high   = ls_tvarvc-high ) ).

    "Document types valid for this Enhancement to allow HOI objects
    gr_pm_po_doctype = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_pm_1058_po_doctype AND type = lc_s )
                                    ( sign   = ls_tvarvc-sign
                                      option = ls_tvarvc-opti
                                      low    = ls_tvarvc-low
                                      high   = ls_tvarvc-high ) ).

    "PO header Text ID for HOI documents
    gt_lsp_hoi_text = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_lsp_hoi_text AND type = lc_s )
                                  ( low    = ls_tvarvc-low
                                    high   = ls_tvarvc-high ) ).
*
*    "PO Plant Storage Location
    gt_moa_plat_sloc = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_moa_plat_sloc AND type = lc_s )
                                  ( low    = ls_tvarvc-low
                                    high   = ls_tvarvc-high ) ).

    "BSART types for SDP
    gr_1058_dis_icprice = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_1058_dis_icprice  AND type = lc_s )
                                    ( sign   = ls_tvarvc-sign
                                      option = ls_tvarvc-opti
                                      low    = ls_tvarvc-low
                                      high   = ls_tvarvc-high ) ).
    "Header Text for SMP
    gt_pm_1839_header_smp = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_pm_1839_header_smp  AND type = lc_s )
                                  ( low    = ls_tvarvc-low
                                    high   = ls_tvarvc-high ) ).
    "Item Text for SMP
    gt_pm_1839_item_smp = VALUE #( FOR ls_tvarvc  IN gt_tvarvc WHERE ( name = lc_pm_1839_item_smp  AND type = lc_s )
                                  ( low    = ls_tvarvc-low
                                    high   = ls_tvarvc-high ) ).
*  End of CR_1839 by 24093780 on 11/11/2020

** Start of CR_1926 by 24097570 on 08/12/2020

    gr_cond_type = VALUE #( FOR ls_tvarvc IN gt_tvarvc
                         WHERE ( name EQ lc_kschl )
                               ( sign   = ls_tvarvc-sign
                                 option = ls_tvarvc-opti
                                 low    = ls_tvarvc-low
                                 high   = ls_tvarvc-high ) ) .

    gr_doc_prc = VALUE #( FOR ls_tvarvc IN gt_tvarvc
                         WHERE ( name EQ lc_doc_prc )
                               ( sign   = ls_tvarvc-sign
                                 option = ls_tvarvc-opti
                                 low    = ls_tvarvc-low
                                 high   = ls_tvarvc-high ) ) .

    gr_prc_ctrl = VALUE #( FOR ls_tvarvc IN gt_tvarvc
                         WHERE ( name EQ lc_prc_ctrl )
                               ( sign   = ls_tvarvc-sign
                                 option = ls_tvarvc-opti
                                 low    = ls_tvarvc-low
                                 high   = ls_tvarvc-high ) ) .

    gr_shp_txt = VALUE #( FOR ls_tvarvc IN gt_tvarvc
                         WHERE ( name EQ lc_shp_txt )
                               ( sign   = ls_tvarvc-sign
                                 option = ls_tvarvc-opti
                                 low    = ls_tvarvc-low
                                 high   = ls_tvarvc-high ) ) .

    gr_del_txt = VALUE #( FOR ls_tvarvc IN gt_tvarvc
                         WHERE ( name EQ lc_del_txt )
                               ( sign   = ls_tvarvc-sign
                                 option = ls_tvarvc-opti
                                 low    = ls_tvarvc-low
                                 high   = ls_tvarvc-high ) ) .
** End of CR_1926 by 24097570 on 08/12/2020

  ELSE.
    "Populate global return structure with error message
    gs_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                            number = 006
                            message_v1 = lc_name ) .
    zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
  ENDIF.

  "Reads Purchase Order number from IDOC data to gv_po_num
  read_po_num_idoc( ).

  "Populate SO number from Database based onpo
  IF gv_po_num IS NOT INITIAL.
    SELECT ebeln, "PO number
           ebelp, "PO Item
           vbeln, "SO number
           vbelp  "SO Item
    FROM ekkn
    INTO TABLE @gt_ekkn
    WHERE ebeln EQ @gv_po_num ORDER BY ebeln,ebelp.
    IF sy-subrc EQ 0.
      gv_so_num = gt_ekkn[ 1 ]-vbeln.
      "populate vbeln itab
      CALL FUNCTION 'BS01_SALESORDER_GETDETAIL'
        EXPORTING
          salesdocument        = gv_so_num
        IMPORTING
          order_header         = ls_order_header
        TABLES
          return               = lt_return
          order_items          = gt_so_items
          order_schedule_lines = gt_so_schedule
          order_partners       = gt_so_partner.
    ENDIF.
  ENDIF.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->UPDATE_DELIVERY_ADDRESS_PO
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_delivery_address_po.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->UPDATE_DELIVERY_COMPLETE_PO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EBELP                       TYPE        EBELP(optional)
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL(optional)
* | [<---] ET_POITEM                      TYPE        BAPIMEPOITEM_TP
* | [<---] ET_POITEMX                     TYPE        BAPIMEPOITEMX_TP
* | [<---] ET_RETURN                      TYPE        BAPIRET1_T
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_delivery_complete_po.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_DELIVERY_COMPLETE_PO                      *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update PO line items to delivery completion      *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_DELIVERY_COMPLETE_PO
**&----------------------------------------------------------------------*
    DATA: lt_return TYPE STANDARD TABLE OF bapiret2,
          lt_item   TYPE STANDARD TABLE OF bapimepoitem,
          lt_itemx  TYPE STANDARD TABLE OF bapimepoitemx.

    CLEAR : et_poitem[], et_poitemx[].

    LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail>).
      CLEAR : lt_item, lt_itemx.
      IF NOT line_exists( et_poitem[ po_item = <lfs_ekpo_detail>-ebelp ] ).

        lt_item = VALUE #( ( po_item = <lfs_ekpo_detail>-ebelp  " set position here
*                             delete_ind = gc_l
                             no_more_gr = abap_true ) ).
        APPEND LINES OF lt_item TO et_poitem.
      ENDIF.

      IF NOT line_exists( et_poitemx[ po_item = <lfs_ekpo_detail>-ebelp ] ).
        lt_itemx = VALUE #( ( po_item = <lfs_ekpo_detail>-ebelp " set position here
                              po_itemx = abap_true
*                              delete_ind = abap_true
                              no_more_gr = abap_true ) ).
        APPEND LINES OF lt_itemx TO et_poitemx.
      ENDIF.
    ENDLOOP.

*    CALL FUNCTION 'ZPTP_I1058_ORDCHG_PO'
*      DESTINATION 'NONE '
*      EXPORTING
*        iv_po_num           = gv_po_num
*      TABLES
*        it_return_po_change = lt_return
*        it_poitem           = lt_poitem
*        it_poitemx          = lt_poitemx.
*    IF lt_return IS NOT INITIAL .
*      APPEND LINES OF lt_return TO et_return.
*    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->UPDATE_DELIVERY_DCI_INCOMPLETE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EBELP                       TYPE        EBELP(optional)
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL(optional)
* | [<---] ET_POITEM                      TYPE        BAPIMEPOITEM_TP
* | [<---] ET_POITEMX                     TYPE        BAPIMEPOITEMX_TP
* | [<---] ET_RETURN                      TYPE        BAPIRET1_T
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_delivery_dci_incomplete.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_DELIVERY_DCI_INCOMPLETE                   *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  11/30/2020                                       *
*  Object ID         :  PTPI1058_CR_1839                                 *
*  Business Contact  :  Simran Kaur                                      *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Mark DCI indicator space for ZAK X3              *
*  Transport Request :  S4DK952570                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_DELIVERY_DCI_INCOMPLETE
**&----------------------------------------------------------------------*
*   Local data declaration
    DATA:lt_item   TYPE STANDARD TABLE OF bapimepoitem,
         lt_itemx  TYPE STANDARD TABLE OF bapimepoitemx.

    CLEAR : et_poitem[], et_poitemx[].
    LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail>).
      CLEAR : lt_item, lt_itemx.
      IF NOT line_exists( et_poitem[ po_item = <lfs_ekpo_detail>-ebelp ] ).

        lt_item = VALUE #( ( po_item = <lfs_ekpo_detail>-ebelp  " set position here
                             no_more_gr = abap_false ) ).
        APPEND LINES OF lt_item TO et_poitem.
      ENDIF.

      IF NOT line_exists( et_poitemx[ po_item = <lfs_ekpo_detail>-ebelp ] ).
        lt_itemx = VALUE #( ( po_item = <lfs_ekpo_detail>-ebelp " set position here
                              po_itemx = abap_true
                              no_more_gr = abap_true ) ).
        APPEND LINES OF lt_itemx TO et_poitemx.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->UPDATE_PO_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CALL_COUNT                  TYPE        CHAR1(optional)
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
 METHOD update_po_header.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_PO_HEADER                                 *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update PO header                                 *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_PO_HEADER
**&----------------------------------------------------------------------*
   "Change header details
*Export final BAPI call flag to output routine 964
   EXPORT lv_call_count FROM iv_call_count TO MEMORY ID gv_po_num. "Added by 24072555 on 29th Aug 2020
   CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
     EXPORTING
       purchaseorder = gv_po_num
       poheader      = gs_header_change
       poheaderx     = gs_poheadx
     TABLES
       return        = gt_return_po_change
       popartner     = gt_popartner
       potextheader  = gt_potextheader.
   IF line_exists( gt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ] ) OR line_exists( gt_return_po_change[ type = if_mrm_constants=>gc_msgty_a ] ).
     DATA(ls_err) = gt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ].

     es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                          number = 011
                          message_v1 = gv_po_num
                          message =  | { ls_err-number } { ls_err-message } { gv_po_num } | ).

     LOOP AT gt_return_po_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_e.
       DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idco_number
                                              status  = 51
                                              msgty  = ls_err-type
                                              msgid  = ls_err-id
                                              msgno  = ls_err-number
                                              msgv1  = ls_err-message_v1
                                              msgv2  = ls_err-message_v2
                                              msgv3  = ls_err-message_v3
                                              msgv4  = ls_err-message_v4
                                              repid  = sy-repid
                                              ).

       APPEND ls_idoc_status TO ct_idoc_status.
     ENDLOOP.
*     DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idco_number
*                                           status  = 51
*                                           msgty  = ls_err-type
*                                           msgid  = ls_err-id
*                                           msgno  = ls_err-number
*                                           msgv1  = ls_err-message_v1
*                                           msgv2  = ls_err-message_v2
*                                           msgv3  = ls_err-message_v3
*                                           msgv4  = ls_err-message_v4
*                                           repid  = sy-repid
*                                           ).
*
*     APPEND ls_idoc_status TO ct_idoc_status.


     CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
   ELSE.
     CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
       EXPORTING
         wait = abap_true.

     es_return = VALUE #( type = if_mrm_constants=>gc_msgty_s
                         number = 010
                         message_v1 = gv_po_num
                         message =  | { 'Header details updated sucessfully for PO'(004) } { gv_po_num } | ).

     LOOP AT gt_return_po_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_s.
       ls_idoc_status = VALUE bdidocstat( docnum = gv_idco_number
                                              status  = 53
                                              msgty  = ls_err-type
                                              msgid  = ls_err-id
                                              msgno  = ls_err-number
                                              msgv1  = ls_err-message_v1
                                              msgv2  = ls_err-message_v2
                                              msgv3  = ls_err-message_v3
                                              msgv4  = ls_err-message_v4
                                              repid  = sy-repid
                                              ).

       APPEND ls_idoc_status TO ct_idoc_status.
     ENDLOOP.
   ENDIF.
 ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->UPDATE_PO_LINE_ITEMS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_EKPO_DETAIL                 TYPE        GTY_EKPO_DETAIL(optional)
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL(optional)
* | [--->] IV_CALL_COUNT                  TYPE        CHAR1(optional)
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* | [<---] ET_RETURN                      TYPE        BAPIRET1_T
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD update_po_line_items.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_PO_LINE_ITEMS                             *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update PO line items                             *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Change ID | Date       | Request #  | Changed By   | Description      *
*&-----------------------------------------------------------------------*
**& CR#1203   28/08/2020   S4DK914229   24086849     Price change for ZMZP
** CR_1839   28/08/2020    S4DK952570   24093780     Additional Mapping for
**                                                   existing ORDCHG
**&----------------------------------------------------------------------*
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_PO_LINE_ITEMS
**&----------------------------------------------------------------------*
  " Local Data declaration
  DATA:
    lt_poschedule       TYPE STANDARD TABLE OF bapimeposchedule, "schedule table
    lt_poschedulex      TYPE STANDARD TABLE OF bapimeposchedulx, "schedule update table
    lt_poitem           TYPE STANDARD TABLE OF bapimepoitem, "Line item tab
    lt_poitemx          TYPE STANDARD TABLE OF bapimepoitemx, "line item update
    lt_return_po_change TYPE STANDARD TABLE OF bapiret2, "return tab
    lt_potextitem       TYPE STANDARD TABLE OF bapimepotext,
    lt_condition        TYPE STANDARD TABLE OF bapimepocondheader,
    lt_conditionx       TYPE STANDARD TABLE OF bapimepocondheaderx,
    lt_ekpo_cancel      TYPE gtt_ekpo_detail,
    lt_delivery_address TYPE STANDARD TABLE OF bapimepoaddrdelivery. "++ For CR_1839 by 24093780

  " Local structure declaration
  DATA:
    ls_poitemx          TYPE bapimepoitemx,
    ls_poitem           TYPE bapimepoitem,
    ls_poschedule       TYPE bapimeposchedule,
    ls_poschedulex      TYPE bapimeposchedulx,
    ls_potextitem       TYPE bapimepotext,
*    ls_bapimepotext_tmp TYPE bapimepotext, "++ Add dummy text
    ls_condition        TYPE bapimepocondheader,
    ls_conditionx       TYPE bapimepocondheaderx,
    ls_delivery_address TYPE bapimepoaddrdelivery, " ++ For CR_1839 by 24093780
    lv_cond_no          TYPE knumv, "+ CR_1926 by 24097570
    lv_cond_value       TYPE kbetr, "+ CR_1926 by 24097570
    lv_cond_type        TYPE kschl. "+ CR_1926 by 24097570

  CONSTANTS: lc_poitem_textid(4) TYPE c VALUE 'ITEM',
             lc_lsp(3)           TYPE c VALUE 'LSP',  "Added for CR_1839 by 24093780 on 11/18/2020
             lc_stl(3)           TYPE c VALUE 'STL'.  "Added for CR_1839 by 24093780 on 11/18/2020

  "Move all important details of haeder
  CLEAR : et_return,lt_ekpo_cancel.
  CLEAR et_return.
  "Populate internal tables for BAPI PO change
  IF it_ekpo_detail IS NOT INITIAL.
*    IF <lfs_ekpo_detail> IS NOT INITIAL."Data populated from IDOC
    LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail>).
      IF line_exists( gt_items[ po_number = <lfs_ekpo_detail>-ebeln  po_item = <lfs_ekpo_detail>-ebelp ] ).
        TRY .
            "Read BAPI item table with each record in it_ekpo_detail
            DATA(ls_items) = gt_items[ po_number = <lfs_ekpo_detail>-ebeln po_item = <lfs_ekpo_detail>-ebelp ].
            IF ls_items-delete_ind IS NOT INITIAL.
              "Populate error message table if delete indicator is set
              es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                   number = 015
                                   message_v2 = <lfs_ekpo_detail>-ebelp ).
              zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
              APPEND es_return TO et_return.
              CONTINUE.
            ENDIF.

            "Populate Internal tables based on change type
            CASE <lfs_ekpo_detail>-ctyp.
                "When QTY
              WHEN gc_qty.
                "Fill Item Table
                READ TABLE lt_poitem ASSIGNING FIELD-SYMBOL(<lfs_po_item>)
                           WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_item>-material = ls_items-material.
                  <lfs_po_item>-quantity = <lfs_ekpo_detail>-menge.
                ELSE.
                  "Populate the Internal table to pass to BAPI_PO_CHANGE
                  ##ENH_OK MOVE-CORRESPONDING ls_items TO ls_poitem.
                  ls_poitem-quantity =  <lfs_ekpo_detail>-menge. "Change Menge Here
                  "append to bapi change itabs
                  APPEND:ls_poitem TO lt_poitem.
                ENDIF.
                "Fill ITEMX Table
                READ TABLE lt_poitemx ASSIGNING FIELD-SYMBOL(<lfs_po_itemx>)
                           WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_itemx>-po_itemx = abap_true.
                  <lfs_po_itemx>-material = abap_true.
                  <lfs_po_itemx>-quantity = abap_true.
                ELSE.
                  "Update Item structure
                  ls_poitemx = VALUE #( po_item = ls_poitem-po_item
                                        po_itemx = abap_true
                                        material = abap_true
                                        quantity = abap_true ).
                  "append to bapi change itabs
                  APPEND:ls_poitemx TO lt_poitemx.
                ENDIF.
                CLEAR:ls_poitem,ls_poitemx.
                "when date changes
              WHEN gc_ddt.
                READ TABLE lt_poitem ASSIGNING <lfs_po_item>
                           WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_item>-material = ls_items-material.
*                  <lfs_po_item>-quantity = <lfs_ekpo_detail>-menge.
                  <lfs_po_item>-plant    = ls_items-plant.
                ELSE.
                  MOVE-CORRESPONDING ls_items TO ls_poitem.
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitem TO lt_poitem.
                ENDIF.
                "Fill ITEMX Table
                READ TABLE lt_poitemx ASSIGNING <lfs_po_itemx>
                           WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_itemx>-po_itemx = abap_true.
                  <lfs_po_itemx>-material = abap_true.
*                  <lfs_po_itemx>-quantity = abap_true.
                  <lfs_po_itemx>-plant    = abap_true.
                ELSE.
                  "Itex update itab
                  ls_poitemx = VALUE #( po_item  = ls_poitem-po_item
                                        po_itemx = abap_true
                                        material = abap_true
*                                        quantity = abap_true
                                        plant    = abap_true ).
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitemx TO lt_poitemx.
                ENDIF.
                CLEAR:ls_poitem,ls_poitemx.
                "Populate Delivery Date from LS_schedule
                IF line_exists( gt_schedule[ po_item = ls_items-po_item ] ).
                  TRY .
                      DATA(ls_schedule) = gt_schedule[ po_item = ls_items-po_item ].
                      "Fill POSCHEDULEX table
                      READ TABLE lt_poschedule ASSIGNING FIELD-SYMBOL(<lfs_poschedule>)
                                               WITH KEY po_item    = ls_schedule-po_item
                                                        sched_line = ls_schedule-serial_no.
                      IF sy-subrc IS INITIAL.
                        <lfs_poschedule>-sched_line = ls_schedule-serial_no.
                        <lfs_poschedule>-delivery_date = ls_schedule-deliv_date.
                      ELSE.
                        MOVE-CORRESPONDING ls_schedule TO ls_poschedule.
                        ls_poschedule-sched_line = ls_schedule-serial_no.
*                        ls_poschedule-delivery_date = CONV #( <lfs_ekpo_detail>-aedat ).
                        WRITE <lfs_ekpo_detail>-aedat TO ls_poschedule-delivery_date.

                        APPEND:ls_poschedule TO lt_poschedule.
                      ENDIF.
                      "Fill POSCHEDULEX table
                      READ TABLE lt_poschedulex ASSIGNING FIELD-SYMBOL(<lfs_poschedulex>)
                                               WITH KEY po_item    = ls_schedule-po_item
                                                        sched_line = ls_schedule-serial_no.
                      IF sy-subrc IS INITIAL.
                        <lfs_poschedulex>-po_itemx      = abap_true.
                        <lfs_poschedulex>-sched_linex   = abap_true.
                        <lfs_poschedulex>-delivery_date = abap_true.
                      ELSE.
                        ls_poschedulex = VALUE #( po_item       = ls_schedule-po_item
                                                  sched_line    = ls_schedule-serial_no
                                                  po_itemx      = abap_true
                                                  sched_linex   = abap_true
                                                  delivery_date = abap_true ).

                        APPEND:ls_poschedulex TO lt_poschedulex.
                      ENDIF.
                      CLEAR:ls_poschedule,ls_poschedulex.


                    CATCH cx_sy_itab_line_not_found.
                  ENDTRY.
                ENDIF.
** Start of CR_1926 by 240975750 on 08/12/2020

                  CLEAR gv_flag_pric_po.
                  IF line_exists( gr_prc_ctrl[ low = ls_items-price_ctr ] ) . " Check for Price date control, if found in TVARVC
                    gv_flag_pric_po = abap_true.
                  ENDIF.

                  IF gv_flag_pric_po EQ abap_true.

                    CALL FUNCTION 'ZPTP_I1058_DBS_PO_PRICING_UPD'
                      EXPORTING
                        iv_belnr      = <lfs_ekpo_detail>-ebeln
                        iv_ebelp      = <lfs_ekpo_detail>-ebelp
                        iv_aedat      = <lfs_ekpo_detail>-aedat
                      IMPORTING
                        ev_cond_no    = lv_cond_no
                        ev_cond_value = lv_cond_value
                        ev_cond_type  = lv_cond_type.

                    IF lv_cond_value IS NOT INITIAL .

                      ls_condition = VALUE #(  itm_number = <lfs_ekpo_detail>-ebelp
                                               cond_type  = lv_cond_type
                                               cond_value =  lv_cond_value / 10
*                                               cond_p_unt = ls_items-po_unit
*                                               cond_unit  = ls_items-po_unit_iso
                                               change_id  = gc_u   ).
                      APPEND: ls_condition TO lt_condition.
                      ls_conditionx = VALUE #(  itm_number = ls_items-po_item
                                                cond_type  = abap_true
                                                cond_value = abap_true
*                                                cond_p_unt = abap_true
*                                                cond_unit  = abap_true
                                                change_id  = abap_true ).

                      APPEND : ls_conditionx TO lt_conditionx.
                      CLEAR:ls_condition,ls_conditionx.
                    ENDIF.
                  ENDIF.


** End of CR_1926 by 240975750 on 08/12/2020

              WHEN gc_sdp.

** Begin of changes for CR 1203 by 24086849 on 28/08/2020
*                "Check for the PO , if ZMZP exist for current line item
*                CALL METHOD me->check_zmzp_conditions_exist
*                  EXPORTING
*                    lv_item   = ls_items-po_item
*                  IMPORTING
*                    ev_result = DATA(lv_return_flag).
*                IF lv_return_flag IS INITIAL.
*                  es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
*                                       number = 020
*                                       message_v2 = <lfs_ekpo_detail>-ebelp ).
*                  zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
*                  APPEND es_return TO et_return.
*                  CONTINUE.
*                ENDIF.
** End of changes for CR 1203 by 24086849 on 28/08/2020

** Fill ITEM Table
                READ TABLE lt_poitem ASSIGNING <lfs_po_item>
                                     WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_item>-order_reason = <lfs_ekpo_detail>-bsgru.
                ELSE.
                  "Populate the Internal table to pass to BAPI_PO_CHANGE
                  MOVE-CORRESPONDING ls_items TO ls_poitem.
                  ls_poitem-order_reason =  <lfs_ekpo_detail>-bsgru. "Change Menge Here
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitem TO lt_poitem.
                ENDIF.
** Fill ITEMX Table
                READ TABLE lt_poitemx ASSIGNING <lfs_po_itemx>
                           WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_itemx>-po_itemx = abap_true.
                  <lfs_po_itemx>-order_reason = abap_true.
                ELSE.
                  "Update Item structure
                  ls_poitemx = VALUE #( po_item = ls_poitem-po_item
                                          po_itemx = abap_true
                                         order_reason = abap_true ).
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitemx TO lt_poitemx.
                ENDIF.
                CLEAR:ls_poitem,ls_poitemx.

** Begin of changes for CR 1203 by 24086849 on 28/08/2020
*                  "append to bapi change itabs
*                  READ TABLE lt_condition ASSIGNING FIELD-SYMBOL(<lfs_condition>)
*                                          WITH KEY itm_number = ls_items-po_item.
*                  IF sy-subrc IS INITIAL.
*
*                    <lfs_condition>-cond_type = gc_zmzp.
*                    IF <lfs_ekpo_detail>-netpr IS ASSIGNED.
*                      DATA(lv_netwr) = <lfs_ekpo_detail>-netpr .
*                      TRY.
*                          lv_netwr = lv_netwr / 10.
*                        CATCH cx_sy_zerodivide.
*                          CLEAR lv_netwr.
*                      ENDTRY.
*                    ENDIF.
*
*                    <lfs_condition>-cond_value  = lv_netwr.
*                    <lfs_condition>-cond_p_unt = <lfs_ekpo_detail>-bprme.
*                    <lfs_condition>-cond_unit = <lfs_ekpo_detail>-meins.
*                    <lfs_condition>-change_id = gc_u.
*
*                  ELSE.
*                    IF <lfs_ekpo_detail>-netpr IS ASSIGNED.
*                      lv_netwr = <lfs_ekpo_detail>-netpr .
*                      TRY.
*                          lv_netwr = lv_netwr / 10.
*                        CATCH cx_sy_zerodivide.
*                          CLEAR lv_netwr.
*                      ENDTRY.
*                    ENDIF.
*                    ls_condition = VALUE #(  itm_number = ls_items-po_item
*                                             cond_type  = gc_zmzp
*                                             cond_value =  lv_netwr
*                                             cond_p_unt = <lfs_ekpo_detail>-bprme
*                                             cond_unit  = <lfs_ekpo_detail>-meins
*                                             change_id  = gc_u   ).
*                    APPEND: ls_condition TO lt_condition.
*                  ENDIF.
*
*                  READ TABLE lt_conditionx ASSIGNING FIELD-SYMBOL(<lfs_conditionx>)
*                                          WITH KEY itm_number = ls_items-po_item.
*                  IF sy-subrc IS INITIAL.
*                    <lfs_condition>-cond_type  = gc_zmzp.
*                    <lfs_condition>-cond_value = abap_true.
*                    <lfs_condition>-cond_p_unt = abap_true.
*                    <lfs_condition>-cond_unit  = abap_true.
*                    <lfs_condition>-change_id  = abap_true.
*                  ELSE.
*                    ls_conditionx = VALUE #(  itm_number = ls_items-po_item
*                                              cond_type  = gc_zmzp
*                                              cond_value = abap_true
*                                              cond_p_unt = abap_true
*                                              cond_unit  = abap_true
*                                              change_id  = abap_true ).
*
*                    APPEND : ls_conditionx TO lt_conditionx.
*                  ENDIF.

                "append to bapi change itabs
                "Checking ZMZP is existing or not
                READ TABLE gt_cond_po INTO DATA(ls_cond_po)
                                        WITH KEY itm_number = ls_items-po_item
                                                 cond_type  = gc_zmzp.
                IF sy-subrc IS INITIAL.
                  "If ZMZP is already there then changing the value
                  ls_cond_po-cond_type = gc_zmzp.
                  IF <lfs_ekpo_detail>-netpr IS ASSIGNED.
                    DATA(lv_netwr) = <lfs_ekpo_detail>-netpr .
                    TRY.
                        lv_netwr = lv_netwr / 10.
                      CATCH cx_sy_zerodivide.
                        CLEAR lv_netwr.
                    ENDTRY.
                  ENDIF.
                  ls_condition = VALUE #(  itm_number = ls_items-po_item
                                           cond_type  = gc_zmzp
                                           cond_value =  lv_netwr
*                                           cond_p_unt = <lfs_ekpo_detail>-bprme
                                           cond_p_unt = <lfs_ekpo_detail>-peinh "++ CR#37182  by 24093780 on 29/10/2020
                                           cond_unit  = <lfs_ekpo_detail>-meins
                                           change_id  = gc_u   ).
                  APPEND: ls_condition TO lt_condition.
                  ls_conditionx = VALUE #(  itm_number = ls_items-po_item
                                            cond_type  = abap_true
                                            cond_value = abap_true
                                            cond_p_unt = abap_true
                                            cond_unit  = abap_true
                                            change_id  = abap_true ).

                  APPEND : ls_conditionx TO lt_conditionx.
                  CLEAR:ls_condition,ls_conditionx.
                ELSE.
                  "If ZMZP is no there then inserting the value
                  IF <lfs_ekpo_detail>-netpr IS ASSIGNED.
                    lv_netwr = <lfs_ekpo_detail>-netpr .
                    TRY.
                        lv_netwr = lv_netwr / 10.
                      CATCH cx_sy_zerodivide.
                        CLEAR lv_netwr.
                    ENDTRY.
                  ENDIF.
                  ls_condition = VALUE #(  itm_number = ls_items-po_item
                                           cond_type  = gc_zmzp
                                           cond_value =  lv_netwr
*                                           cond_p_unt = <lfs_ekpo_detail>-bprme
                                           cond_p_unt = <lfs_ekpo_detail>-peinh  " ++ CR#37182  by 24093780 on 29/10/2020
                                           cond_unit  = <lfs_ekpo_detail>-meins
                                           change_id  = gc_i   ).
                  APPEND: ls_condition TO lt_condition.
                  ls_conditionx = VALUE #(  itm_number = ls_items-po_item
                                            cond_type  = abap_true
                                            cond_value = abap_true
                                            cond_p_unt = abap_true
                                            cond_unit  = abap_true
                                            change_id  = abap_true ).

                  APPEND : ls_conditionx TO lt_conditionx.
                  CLEAR:ls_condition,ls_conditionx.
                ENDIF.
                "Deleting the other condition types mentioned in the TVARVC
                LOOP AT gt_cond_po INTO ls_cond_po WHERE itm_number = ls_items-po_item
                                              AND cond_type  IN gr_sdp_cond_type.

                  ls_condition = VALUE #(  itm_number = ls_items-po_item
                                           cond_type  = ls_cond_po-cond_type
                                           cond_value = ls_cond_po-cond_value
                                           cond_p_unt = ls_cond_po-cond_p_unt
                                           cond_unit  = ls_cond_po-cond_unit
                                           change_id  = gc_d   ).
                  APPEND: ls_condition TO lt_condition.
                  ls_conditionx = VALUE #(  itm_number = ls_items-po_item
                                            cond_type  = abap_true
                                            cond_value = abap_true
                                            cond_p_unt = abap_true
                                            cond_unit  = abap_true
                                            change_id  = abap_true ).
                  APPEND : ls_conditionx TO lt_conditionx.
                  CLEAR:ls_condition,ls_conditionx.
                  "Coping PB00 price to ZPB0 after deleting PB00
                  IF ls_cond_po-cond_type  = gc_pb00. "'PB00'.
                    ls_condition = VALUE #(  itm_number = ls_items-po_item
                                            cond_type  = gc_zpb0 "'ZPB0'
                                            cond_value = ls_cond_po-cond_value / 10
                                            cond_p_unt = ls_cond_po-cond_p_unt
                                            cond_unit  = ls_cond_po-cond_unit
                                            change_id  = gc_i   ).
                    APPEND: ls_condition TO lt_condition.
                    ls_conditionx = VALUE #(  itm_number = ls_items-po_item
                                              cond_type  = abap_true
                                              cond_value = abap_true
                                              cond_p_unt = abap_true
                                              cond_unit  = abap_true
                                              change_id  = abap_true ).
                    APPEND : ls_conditionx TO lt_conditionx.
                    CLEAR:ls_condition,ls_conditionx.
                  ENDIF.
                ENDLOOP.
** End of changes for CR 1203 by 24086849 on 28/08/2020

                CLEAR:ls_condition,ls_conditionx.

              WHEN gc_vpn."VPN changes
** Fill ITEM Table
                READ TABLE lt_poitem ASSIGNING <lfs_po_item>
                                     WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_item>-vend_mat = <lfs_ekpo_detail>-idnlf.
                ELSE.
                  "Populate the Internal table to pass to BAPI_PO_CHANGE
                  MOVE-CORRESPONDING ls_items TO ls_poitem.
                  ls_poitem-vend_mat =  <lfs_ekpo_detail>-idnlf. "Change Menge Here
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitem TO lt_poitem.
                ENDIF.
** Fill ITEMX Table
                READ TABLE lt_poitemx ASSIGNING <lfs_po_itemx>
                           WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_itemx>-po_itemx = abap_true.
                  <lfs_po_itemx>-material = abap_true.
                  <lfs_po_itemx>-vend_mat = abap_true.
                ELSE.
                  "Populate itemx update table
                  ls_poitemx = VALUE #( po_item  = ls_items-po_item
                                        po_itemx = abap_true
                                        material = abap_true
                                        vend_mat = abap_true ).
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitemx TO lt_poitemx.
                ENDIF.

                CLEAR:ls_poitem,ls_poitemx.

              WHEN gc_icl."For icl changes gv_abgru
** Fill ITEM Table
                READ TABLE lt_poitem ASSIGNING <lfs_po_item>
                                     WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_item>-delete_ind = gc_l.
                ELSE.
                  "Populate the Internal table to pass to BAPI_PO_CHANGE
                  MOVE-CORRESPONDING ls_items TO ls_poitem.
                  ls_poitem-delete_ind = gc_l.
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitem TO lt_poitem.
                ENDIF.
** Fill ITEMX Table
                READ TABLE lt_poitemx ASSIGNING <lfs_po_itemx>
                           WITH KEY po_item = ls_items-po_item.
                IF sy-subrc IS INITIAL.
                  <lfs_po_itemx>-po_itemx = abap_true.
                  <lfs_po_itemx>-delete_ind = abap_true.
                ELSE.
                  "Populate itemx update table
                  ls_poitemx = VALUE #( po_item = ls_items-po_item
                                        po_itemx = abap_true
                                        delete_ind = abap_true  ).
                  "Populate itabs for Bapi_change
                  APPEND:ls_poitemx TO lt_poitemx.
                ENDIF.

                CLEAR:ls_poitem,ls_poitemx.
                APPEND <lfs_ekpo_detail> TO lt_ekpo_cancel.
              WHEN gc_lt1 ."For text changes
                IF NOT line_exists( lt_potextitem[ po_number = <lfs_ekpo_detail>-ebeln po_item =  <lfs_ekpo_detail>-ebelp
                                                    text_id =  gv_parent_text_id ] ). "gs_save_text-gc_tdid_f01
                  ls_potextitem = VALUE #( po_number = <lfs_ekpo_detail>-ebeln
                                           po_item =  <lfs_ekpo_detail>-ebelp
                                           text_id =  gv_parent_text_id "gs_save_text-gc_tdid_f01
                                           text_line =  <lfs_ekpo_detail>-lt1_text ).
                  APPEND ls_potextitem TO lt_potextitem.
                ENDIF.

*  Begin of CR_1839 by 24093780 on 11/17/2020
              WHEN lc_lsp.
                IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                               low  = abap_true ] ).

                  APPEND INITIAL LINE TO lt_delivery_address ASSIGNING FIELD-SYMBOL(<lfs_delivery_address>).
                  <lfs_delivery_address>   = VALUE #( po_item = ls_items-po_item
                                                      addr_no = <lfs_ekpo_detail>-adrnr ).

                  "Fill Item Table
                  IF NOT line_exists( lt_poitem[ po_item = ls_items-po_item ] ).
                    "Populate the Internal table to pass to BAPI_PO_CHANGE
                    ls_poitem = CORRESPONDING bapimepoitem( ls_items ) .
                    "append to bapi change itabs
                    APPEND:ls_poitem TO lt_poitem.
                  ENDIF.
                  "Fill ITEMX Table

                  IF NOT line_exists( lt_poitemx[ po_item = ls_items-po_item ] ).
                    "Update Item structure
                    ls_poitemx = VALUE #( po_item = ls_poitem-po_item
                                          po_itemx = abap_true ).
                    "append to bapi change itabs
                    APPEND:ls_poitemx TO lt_poitemx.
                  ENDIF.
                  CLEAR:ls_poitem,ls_poitemx.
                ENDIF.
                "when date changes
              WHEN lc_stl.
                IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                             low  = abap_true ] ).
** Fill ITEM Table
                  ASSIGN lt_poitem[ po_item = ls_items-po_item ] TO <lfs_po_item>.
                  IF sy-subrc EQ 0 AND <lfs_po_item> IS ASSIGNED.
                    <lfs_po_item>-stge_loc = <lfs_ekpo_detail>-lgort.
                    <lfs_po_item>-orig_accept = <lfs_ekpo_detail>-weora.
                  ELSE.
                    "Populate the Internal table to pass to BAPI_PO_CHANGE
                    ls_poitem = CORRESPONDING bapimepoitem( ls_items ) .
                    ls_poitem-stge_loc =  <lfs_ekpo_detail>-lgort. "Change Storage Location Here
                    ls_poitem-orig_accept =  <lfs_ekpo_detail>-weora. "Change Storage Location Here
                    "Populate itabs for Bapi_change
                    APPEND:ls_poitem TO lt_poitem.
                  ENDIF.
** Fill ITEMX Table
                  ASSIGN lt_poitemx[ po_item = ls_items-po_item ] TO <lfs_po_itemx>.
                  IF sy-subrc EQ 0 AND <lfs_po_itemx> IS ASSIGNED.
                    <lfs_po_itemx>-po_itemx = abap_true.
                    <lfs_po_itemx>-stge_loc = abap_true.
                    <lfs_po_itemx>-orig_accept = abap_true.
                  ELSE.
                    "Populate itemx update table
                    ls_poitemx = VALUE #( po_item  = ls_items-po_item
                                          po_itemx = abap_true
                                          stge_loc = abap_true
                                          orig_accept = abap_true ).
                    "Populate itabs for Bapi_change
                    APPEND:ls_poitemx TO lt_poitemx.
                  ENDIF.

                  CLEAR:ls_poitem,ls_poitemx.
                ENDIF.
** End of CR_1839 by 24093780 on 11/19/2020

              WHEN OTHERS.
            ENDCASE.
          CATCH cx_sy_itab_line_not_found.
            CLEAR : ls_items.
        ENDTRY.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF et_return IS NOT INITIAL.
    RETURN.
  ENDIF.

  "Add SMP flag text to PO line item
  LOOP AT it_ekpo_detail  ASSIGNING <lfs_ekpo_detail>.
    IF <lfs_ekpo_detail>-smp_flag IS NOT INITIAL.
      IF NOT line_exists( lt_potextitem[ po_number = <lfs_ekpo_detail>-ebeln
                                     po_item =  <lfs_ekpo_detail>-ebelp
                                     text_id =  gs_save_text-gc_tdid_f48 ] ).
        ls_potextitem = VALUE #( po_number = <lfs_ekpo_detail>-ebeln
                                   po_item =  <lfs_ekpo_detail>-ebelp
                                   text_id =  gs_save_text-gc_tdid_f48
                                   text_line =  <lfs_ekpo_detail>-smp_flag ).
        APPEND ls_potextitem TO lt_potextitem.
        "Append Dummy text ID with date and time to trigger BAPI_PO_CHANGE

        DATA(ls_bapimepotext_tmp) =  CORRESPONDING bapimepotext( ls_potextitem ).

        "FETCH PO Line ITEM Dummy TEXT ID FROM TVARVC
        TRY.
            ls_bapimepotext_tmp-text_id = gt_pm_po_text[ low = lc_poitem_textid ]-high.
          CATCH cx_sy_itab_line_not_found.
            CLEAR ls_bapimepotext_tmp-text_id.
        ENDTRY.

        ls_bapimepotext_tmp-text_line = |{ sy-datum }| && |{ sy-uzeit }|.
        APPEND ls_bapimepotext_tmp TO lt_potextitem.

        CLEAR ls_potextitem.
      ENDIF.
    ENDIF.

    "Add Dummy text ID to trigger Output Type

    IF <lfs_ekpo_detail>-smp_addtnl IS NOT INITIAL.
      IF NOT line_exists( lt_potextitem[ po_number = <lfs_ekpo_detail>-ebeln
                                        po_item =  <lfs_ekpo_detail>-ebelp
                                        text_id =  gs_save_text-gc_tdid_f49 ] ).
        ls_potextitem = VALUE #( po_number = <lfs_ekpo_detail>-ebeln
                                   po_item =  <lfs_ekpo_detail>-ebelp
                                   text_id =  gs_save_text-gc_tdid_f49
                                   text_line =  <lfs_ekpo_detail>-smp_addtnl ).
        APPEND ls_potextitem TO lt_potextitem.CLEAR ls_potextitem.
      ENDIF.
    ENDIF.
  ENDLOOP.
  IF zptpcl_i1058_ordchg=>gv_idoc_err <> abap_true.
    "Call PO Change to Update Purchase Order Details
    IF lt_condition IS NOT INITIAL.
      "Export values to VOFM routine 950/951/952
      EXPORT lt_condition FROM lt_condition TO DATABASE indx(pt) ID gv_po_num.
    ENDIF.
    CALL FUNCTION 'ZPTP_I1058_ORDCHG_PO'
      DESTINATION 'NONE'
      EXPORTING
        iv_po_num           = gv_po_num
        iv_header_change    = gs_header_change
        iv_poheadx          = gs_poheadx
        iv_bapi_call_count  = iv_call_count "Added by 24072555 on 29th Aug 2020
      TABLES
        it_return_po_change = lt_return_po_change
        it_poitem           = lt_poitem
        it_poitemx          = lt_poitemx
        it_poschedule       = lt_poschedule
        it_poschedulex      = lt_poschedulex
        it_condition        = lt_condition
        it_conditionx       = lt_conditionx
        it_potextheader     = gt_potextheader
        it_potextitem       = lt_potextitem
        it_popartner        = gt_popartner
        it_poaddrdelivery   = lt_delivery_address. " Delivery Address  " ++ For CR_1839 by 24093780

    "For errors populate ES_STRUCTURE and return
    IF line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ] ) OR line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_a ] ).

      IF line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ] ).
        DATA(ls_err) = lt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ].
      ENDIF.
      IF line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_a ] ).
        DATA(ls_abrt) = lt_return_po_change[ type = if_mrm_constants=>gc_msgty_a ].
      ENDIF.
      IF ls_err IS NOT INITIAL.
        es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                             message =  | { ls_err-message } { gv_po_num } | ).
      ELSEIF ls_abrt IS NOT INITIAL.
        es_return = VALUE #( type = if_mrm_constants=>gc_msgty_a
                 message =  | { ls_abrt-message } { gv_po_num } | ).
      ENDIF.

      APPEND es_return TO et_return.


      LOOP AT lt_return_po_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_e OR type = if_mrm_constants=>gc_msgty_a.
        DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idco_number
                                               status  = 51
                                               msgty  = ls_err-type
                                               msgid  = ls_err-id
                                               msgno  = ls_err-number
                                               msgv1  = ls_err-message_v1
                                               msgv2  = ls_err-message_v2
                                               msgv3  = ls_err-message_v3
                                               msgv4  = ls_err-message_v4
                                               repid  = sy-repid
                                               ).

        APPEND ls_idoc_status TO ct_idoc_status.
      ENDLOOP.
    ELSE.
      LOOP AT lt_return_po_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_s.
        ls_idoc_status = VALUE bdidocstat( docnum = gv_idco_number
                                               status  = 53
                                               msgty  = ls_err-type
                                               msgid  = ls_err-id
                                               msgno  = ls_err-number
                                               msgv1  = ls_err-message_v1
                                               msgv2  = ls_err-message_v2
                                               msgv3  = ls_err-message_v3
                                               msgv4  = ls_err-message_v4
                                               repid  = sy-repid
                                               ).

        APPEND ls_idoc_status TO ct_idoc_status.
      ENDLOOP.

      IF lt_ekpo_cancel IS NOT INITIAL.
        CALL METHOD me->update_reason_rejec_so
          EXPORTING
            it_ekpo_detail = lt_ekpo_cancel
          IMPORTING
            es_return      = DATA(ls_return)
          CHANGING
            ct_idoc_status = ct_idoc_status.
        IF NOT ls_return-type = if_mrm_constants=>gc_msgty_e.
          CLEAR ls_return-type.
          CALL FUNCTION 'DEQUEUE_ALL'.
          es_return = VALUE #( type = if_mrm_constants=>gc_msgty_s
                               message =  | { 'Item details updated sucessfully for PO'(009)  } { gv_po_num } | ).
          APPEND es_return TO et_return.
        ENDIF.
      ELSE.
        CALL FUNCTION 'DEQUEUE_ALL'.
        es_return = VALUE #( type = if_mrm_constants=>gc_msgty_s
                                  message =  | { 'Item details updated sucessfully for PO'(009)  } { gv_po_num } | ).
        APPEND es_return TO et_return.
      ENDIF.

    ENDIF.
  ENDIF.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->UPDATE_PO_LINE_ITEM_TEXTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_BAPIMEPOTEXT                TYPE        GTT_BAPIMEPOTEXT
* | [<---] ET_RETURN                      TYPE        BAPIRET1_T
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_po_line_item_texts.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_PO_LINE_ITEM_TEXTS                        *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update PO line item texts                        *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_PO_LINE_ITEM_TEXTS
**&----------------------------------------------------------------------*
    DATA: lt_return  TYPE STANDARD TABLE OF bapiret2.
    CALL FUNCTION 'ZPTP_I1058_ORDCHG_PO'
      DESTINATION 'NONE'
      EXPORTING
        iv_po_num           = gv_po_num
      TABLES
        it_return_po_change = lt_return
        it_potextitem       = it_bapimepotext.
    IF lt_return IS NOT INITIAL.
      APPEND LINES OF lt_return TO et_return.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->UPDATE_PO_SPLIT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL
* | [--->] IV_CALL_COUNT                  TYPE        CHAR1(optional)
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_po_split.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_PO_SPLIT                                  *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update PO for split values                       *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By | Description                  *
*&-----------------------------------------------------------------------*
*& 10/27/2020 | CR# 36950  | 24093780   | Needed Contract and Contract line
*                                         item only for new Line item
*  11/24/2020 | CR_39940   | 24093780   | Contract locked before SO Split
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD CONSTRUCTOR
**&----------------------------------------------------------------------*
    "Local types declaration
    TYPES:BEGIN OF lty_vbeln,
            vbeln TYPE vbeln,
          END OF lty_vbeln,

          BEGIN OF lty_preq,
            vbeln TYPE ebeln,
            posnr TYPE ebelp,
          END OF lty_preq.
    "Local variable declaration
    DATA:lv_last_line_item    TYPE posnr_va,
         lv_po_last_line_item TYPE ebelp,
         lv_ps_psp_pnr        TYPE ps_posid,
         lv_msg               TYPE c LENGTH 255,
         lv_agreement         TYPE eqegraarg,               "CR_39940
         lv_uname             TYPE syst_uname VALUE '*',    "CR_39940
         lv_number            TYPE sy-tabix,                "CR_39940
         lv_subrc             TYPE sy-subrc.                "CR_39940
    "Local data declaration for tables
    DATA:
      lt_items                 TYPE STANDARD TABLE OF bapiekpo, "po item texts
      lt_return                TYPE STANDARD TABLE OF bapireturn, "Err tab
      lt_return_po_change      TYPE STANDARD TABLE OF bapiret2, "PO change return table
      lt_vbeln                 TYPE STANDARD TABLE OF lty_vbeln, "So table
      lt_poitem                TYPE STANDARD TABLE OF bapimepoitem, "Bapi get details tab
      lt_poitemx               TYPE STANDARD TABLE OF bapimepoitemx, "Bapi item update tab
      lt_poschedule            TYPE STANDARD TABLE OF bapimeposchedule, "Schedule item
      lt_poschedulex           TYPE STANDARD TABLE OF bapimeposchedulx, "Schedule item update
      lt_po_item_texts         TYPE STANDARD TABLE OF bapiekpotx,
      lt_po_item_confirmations TYPE STANDARD TABLE OF bapiekes,
      lt_potextitem            TYPE STANDARD TABLE OF bapimepotext,
      lt_order_text            TYPE STANDARD TABLE OF bapisdtext,
      lt_condition             TYPE STANDARD TABLE OF bapimepocondheader,
      lt_fieldinfo             TYPE TABLE OF dfies, "CR Defect 36963
      lt_enq                   TYPE STANDARD TABLE OF seqg3         , "CR_39940

      lt_conditionx            TYPE STANDARD TABLE OF bapimepocondheaderx,
      lt_so_items              TYPE STANDARD TABLE OF bapisditbos,
      lt_so_schedule           TYPE STANDARD TABLE OF bapisdhedu,
      lt_conditions_sox        TYPE STANDARD TABLE OF bapicondx,
      lt_conditions_so         TYPE STANDARD TABLE OF bapicond,
      lt_preq                  TYPE STANDARD TABLE OF lty_preq.

    "Local structure declaration
    DATA:
      ls_poitemx      TYPE bapimepoitemx,
      ls_potextitem   TYPE bapimepotext,
      ls_conditionx   TYPE bapimepocondheaderx,
      ls_items_backup TYPE bapiekpo,
      ls_poschedule   TYPE bapimeposchedule,
      ls_poschedulex  TYPE bapimeposchedulx,
      ls_header       TYPE bapiekkol,
      ls_condition    TYPE bapimepocondheader,
      ls_poitem       TYPE bapimepoitem,
      ls_order_text   TYPE bapisdtext,
      ls_preq         TYPE lty_preq,
      ls_cond         TYPE bapicond,
      ls_condx        TYPE bapicondx.

    "Local Constants Declaration
    CONSTANTS:
      lc_en        TYPE spras VALUE 'E',
      lc_read_db   TYPE char1 VALUE 'A',
      lc_msgid     TYPE sy-msgid VALUE 'ZPTP_MSGS',
      lc_msg046    TYPE char3 VALUE '046',
      lc_bapicond  TYPE ddobjname VALUE 'BAPICOND', "Order conditions
      lc_bapisditm TYPE ddobjname VALUE 'BAPISDITM', "Order item
      lc_ekko      TYPE eqegraname VALUE 'EKKO'.            "CR_39940
*  Start of changes for PTPI1059 by 24093785
    "Local contants declaration.
    CONSTANTS: lc_i   TYPE c VALUE 'I', " I flag for ordchg table
               lc_smp TYPE c LENGTH 3 VALUE 'SMP',  "smp flag for ordchg table.
               lc_zak TYPE c LENGTH 3 VALUE 'ZAK'. "zak flag for ordchg table.
*  End of changes for PTPI1059 by 24093785

    DATA:ls_order_header TYPE bapisdhd,
         ls_partners     TYPE bapiparnr,
         lt_partners     TYPE STANDARD TABLE OF bapiparnr.

    DATA : lv_cond_no    TYPE knumv, "+ CR_1926 by 24097570
           lv_cond_value TYPE kbetr, "+ CR_1926 by 24097570
           lv_cond_type  TYPE kschl. "+ CR_1926 by 24097570

    DATA: ls_bapi_view    TYPE order_view,
          lt_sales        TYPE STANDARD TABLE OF sales_key,
          lt_so_partners  TYPE STANDARD TABLE OF bapisdpart,
          lt_so_condiions TYPE STANDARD TABLE OF bapisdcond,
          lt_so_texts     TYPE STANDARD TABLE OF bapitextli,
          ls_sales        TYPE sales_key,
          lt_order_header TYPE STANDARD TABLE OF bapisdhd,
          lt_so_items1    TYPE STANDARD TABLE OF bapisdit.

    CLEAR:gt_return_so,
          gt_order_item_in_c,
          gt_order_item_inx_c,
          gt_schedule_lines,
          gt_schedule_linesx,
          lt_order_text,
          lt_return_po_change,
          lt_poitem,
          lt_poitemx,
          lt_poschedule,
          lt_poschedulex,
          gt_potextheader,
          lt_potextitem,
*          lt_partners,
*          lt_conditions_so,
*          lt_conditions_sox,
          gt_popartner.


*   Populate internal table lt_sales to pass it to BAPI BAPISDORDER_GETDETAILEDLIST
    ls_sales-vbeln = gv_so_num.
    APPEND ls_sales TO lt_sales.

*   Enable data to be read for SD Header, SD Items and SD Schedule Lines
    ls_bapi_view-header     = abap_true. "Fetch header data
    ls_bapi_view-item       = abap_true. "Fetch item data
    ls_bapi_view-sdschedule = abap_true. "Fetch schedule line data
    ls_bapi_view-partner    = abap_true. "Fetch Partner data
    ls_bapi_view-sdcond     = abap_true. "Fetch Condition tab  data
    ls_bapi_view-sdcond_add = abap_true. "Fetch Conditional tab data
    ls_bapi_view-text       = abap_true. "Fetch Texts for all line items

******************************************************************
*   Fetch data from memory using bapi BAPISDORDER_GETDETAILEDLIST
******************************************************************
    CALL FUNCTION 'BAPISDORDER_GETDETAILEDLIST'
      EXPORTING
        i_bapi_view          = ls_bapi_view
        i_memory_read        = lc_read_db
      TABLES
        sales_documents      = lt_sales
        order_headers_out    = lt_order_header
        order_items_out      = lt_so_items1
        order_schedules_out  = lt_so_schedule
        order_partners_out   = lt_so_partners
        order_conditions_out = lt_so_condiions
        order_textlines_out  = lt_so_texts.

    "Fetch header details of SO
    IF lt_order_header IS NOT INITIAL.
      ls_order_header = lt_order_header[ 1 ].
    ENDIF.
    "Move corresponding item data into lt_so_items from BAPI
    MOVE-CORRESPONDING lt_so_items1 TO lt_so_items.
*    CHECK Split value matches with VBEP(MENGE).Return if exceeds
    DATA(lv_mismatch_flag) = check_split_menge_exceed( it_ekpo_detail = it_ekpo_detail ). "if equal then true

    "Check if Quantity matches with Split Quantity from IDOC
    IF lv_mismatch_flag EQ abap_false.
      es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                            number = 021
                            message_v2 = it_ekpo_detail[ 1 ]-ebeln ).
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      RETURN.
    ENDIF.

    "Check if Split data exists
    IF line_exists( it_ekpo_detail[ 1 ] ) .
      "Idoc data gt_ekpo detail contains change items
      DATA(ls_ekpo_detail) = it_ekpo_detail[ 1 ].
      "Fetch first line item to change existing line item
      "GT_EKKN is the mapping table which contains SO - PO line item data
      IF line_exists( gt_ekkn[ ebeln = ls_ekpo_detail-ebeln ebelp = ls_ekpo_detail-ebelp ] ).
        DATA(ls_ekkn) =  gt_ekkn[ ebeln = ls_ekpo_detail-ebeln ebelp = ls_ekpo_detail-ebelp ].
      ELSE.
        RETURN.
      ENDIF.

      "Fetch SO line item
      IF line_exists( lt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ] ).
        "Read bapi data with first line item
        DATA(ls_so_items) = lt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ].
        "Populate item tabs to sen to bapi change
        DATA(ls_order_item_in_c) = VALUE bapisditm( itm_number = ls_so_items-itm_number
                                                    plant      = ls_so_items-plant
                                                    item_categ = ls_so_items-item_categ ).

        DATA(ls_order_item_inx_c) = VALUE bapisditmx( itm_number = ls_so_items-itm_number
                                                      plant = abap_true
                                                      item_categ = abap_true
                                                      updateflag = gc_u ).

        "SMP Flag
        IF NOT line_exists(  lt_order_text[ doc_number = gv_so_num
                                            itm_number = ls_so_items-itm_number
                                            text_id    = gc_zicg ] ).

          ls_order_text  = VALUE #( doc_number = gv_so_num
                                    itm_number = ls_so_items-itm_number
                                    text_id = gc_zicg
                                    langu = lc_en
                                    text_line = abap_true ).  " timestamp.

          APPEND ls_order_text TO lt_order_text.

        ENDIF.

**      ZAK Original Line item
*        IF NOT line_exists( lt_order_text[ doc_number =  gv_so_num
*                                           itm_number = ls_so_items-itm_number
*                                           text_id    = lc_zak ] ).
*          ls_order_text  = VALUE #( doc_number =  gv_so_num
*                                    itm_number = ls_so_items-itm_number
*                                    text_id    = lc_zak
*                                    langu      = lc_en
*                                    text_line  = ls_ekpo_detail-smp_addtnl ).  "timestamp.
*          APPEND ls_order_text TO lt_order_text.
*          CLEAR ls_order_text.
*        ENDIF.

        APPEND:ls_order_item_in_c TO gt_order_item_in_c,
               ls_order_item_inx_c TO gt_order_item_inx_c.

        CLEAR:ls_order_item_in_c,
              ls_order_item_inx_c,
              ls_order_text.
      ELSE.
        RETURN.
      ENDIF.

    ENDIF.

    "/* lt_so_schedule table contains all the schedule line for Current SO Line item
    "/* Only one schedule line item will have data in REQ_QTY not zero Loop through  lt_so_schedule to get the line item
    LOOP AT lt_so_schedule ASSIGNING FIELD-SYMBOL(<lfs_so_schd>) WHERE doc_number = gv_so_num AND
                                                                       itm_number = ls_so_items-itm_number  AND
                                                                       req_qty <> space.
      DATA(ls_vbep) = <lfs_so_schd>."populate VBEP structure if found
    ENDLOOP.

    "/* GT_ITEMS global internal table contains PO number and Line items.
    "/* Check the line item if it has Delete indicator set. Do not split line item if Delete indicator is L/Set
    IF line_exists( gt_items[ po_number = ls_ekpo_detail-ebeln  po_item = ls_ekpo_detail-ebelp ] ).
      DATA(ls_items) = gt_items[ po_number = ls_ekpo_detail-ebeln  po_item = ls_ekpo_detail-ebelp ].
      IF ls_items-delete_ind IS NOT INITIAL.
        es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                             number = 015
                             message_v2 = ls_ekpo_detail-ebelp ).
        zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
        RETURN.
      ENDIF.
    ENDIF.

    "/* AB lines are confirmations for PO line items . While quantity change Confirmations with type AB
    "/*for Line item to be changed is to be deldeted
    delete_ab_texts( ls_ekpo_detail-ebelp ).
    "Populate schedule lines internal table
    DATA(ls_schedule_lines) = VALUE bapischdl( itm_number = ls_so_items-itm_number   "Line item
                                               sched_line = ls_vbep-sched_line       "Schedule Line item
                                               req_date   = ls_ekpo_detail-aedat     "Date
                                               req_qty    = ls_ekpo_detail-menge  ). "Quantity
    "Populate schdule lines update tab
    DATA(ls_schedule_linesx) = VALUE  bapischdlx(
                                    itm_number = ls_so_items-itm_number             "Line Item
                                    sched_line = ls_vbep-sched_line                 "Schedule Line item
                                    updateflag = gc_u                               "Update
                                    req_date   = abap_true                          "Date
                                    req_qty    = abap_true  ).                      "Quantity

    APPEND:ls_schedule_lines TO gt_schedule_lines,
           ls_schedule_linesx TO gt_schedule_linesx.
    CLEAR: ls_schedule_lines, ls_schedule_linesx.

    "Insert new line item"lt_ekpo_detail[ 1 ] contains change line item
    "/* Fetch last line item in SO from BAPI
    DESCRIBE TABLE lt_so_items LINES DATA(lv_last_item).
    IF line_exists( lt_so_items[ lv_last_item ] ).
      "Fetch last line item and append rest of the lines with update U before passing to BAPI
      DATA(ls_so_last_item) = lt_so_items[ lv_last_item ].
      lv_last_line_item = ls_so_last_item-itm_number.
    ENDIF.
    CLEAR:lt_preq,
          lt_partners.

    "/* it_ekpo_detail contains all the line items with PSP change type
    "/* Line item 1 in it_ekpo_detail contains existing line item
    "/* Line item 2 and so on contains the number of Splits the line has to be done
    "Loop through the idoc changes from second row to Append to SO
    LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_ekpo>) FROM 2.
      lv_last_line_item = lv_last_line_item + lc_000010.
      "Append to item tab

      CLEAR lv_ps_psp_pnr.
      "Call FM CONVERSION_EXIT_ABPSP_OUTPUT to change WBS_ELEMENT to input type
      CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
        EXPORTING
          input  = ls_so_items-wbs_elem
        IMPORTING
          output = lv_ps_psp_pnr.


      "/* Details for each new line item along with SO is saved in table lt_preq.
      "/* This LT_PREQ in return fetches PR number based on new line items added
      ls_preq = VALUE lty_preq( vbeln = ls_so_items-doc_number
                                      posnr = lv_last_line_item ).
      APPEND ls_preq TO lt_preq.

*      Change Start 24093780 CUstomer Material not updated
*      ls_order_item_in_c = VALUE #( itm_number = lv_last_line_item
*                                    material  = ls_so_items-material
*                                    route     = ls_so_items-route
*                                    wbs_elem  = lv_ps_psp_pnr
*                                    plant  = ls_so_items-plant
*                                    item_categ = ls_so_items-item_categ
*                                    cust_mat35 = ls_so_items-cust_mat35    ).

      MOVE-CORRESPONDING ls_so_items TO ls_order_item_in_c.
      ls_order_item_in_c-itm_number  = lv_last_line_item.     "New line item to be added to the items
      ls_order_item_in_c-material    = ls_so_items-material.  "Material
      ls_order_item_in_c-route       = ls_so_items-route.     "Route
      ls_order_item_in_c-wbs_elem    = lv_ps_psp_pnr  .       "WBS element
      ls_order_item_in_c-plant       = ls_so_items-plant.     "Plant
      ls_order_item_in_c-cust_mat35  = ls_so_items-cust_mat35."Customer Material
      ls_order_item_in_c-untof_wght  = ls_so_items-unit_of_wt."Unit of Weight
      ls_order_item_in_c-unof_wtiso  = ls_so_items-unit_wtiso."Unit of weight ISO
      ls_order_item_in_c-store_loc   = ls_so_items-stge_loc.   "++ Storage location is missing in both line items 10 & 20: CR36963
      ls_order_item_in_c-ref_1       = lv_last_line_item.      "++ VBKD-IHREZ CR36963

      "/* We have moved all the line item data from ls_so_items to BAPI Structure ls_order_item_in_c
      "/* Update BAPI Structure ls_order_item_inx_c with X for every field value in ls_order_item_in_c which is not initial
      "/* FM DDIF_FIELDINFO_GET will fetch all the field names for any structure/Table and populate lt_fieldinfo table with all fields
*     CLEAR lt_fieldinfo.
      CALL FUNCTION 'DDIF_FIELDINFO_GET' "#EC CI_SUBRC
        EXPORTING
          tabname        = lc_bapisditm
          langu          = sy-langu
        TABLES
          dfies_tab      = lt_fieldinfo
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      "/* lt_fieldinfo contains all the fields in structure  BAPISDITM. Check for every field value not initial and populate X table
      LOOP AT lt_fieldinfo ASSIGNING FIELD-SYMBOL(<lfs_fieldinfo>). "#EC CI_NESTED
        ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE  ls_order_item_in_c TO FIELD-SYMBOL(<lfs_bapi>).
        IF sy-subrc <> 0. EXIT. ENDIF.
        ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_order_item_inx_c TO FIELD-SYMBOL(<lfs_bapix>).
        IF <lfs_bapi> IS NOT INITIAL.
          <lfs_bapix> = abap_true.
        ENDIF.
      ENDLOOP.

**      Updte ITEMX tab
**      ls_order_item_inx_c = VALUE #( itm_number = lv_last_line_item
**                                     updateflag = gc_i
**                                     material   = abap_true
**                                     route      = abap_true
**                                     wbs_elem   = abap_true
**                                     plant  = abap_true
**                                     item_categ = abap_true
**                                     cust_mat35 = abap_true ).

      ls_order_item_inx_c-itm_number  = lv_last_line_item.                 "Current line item/Last line item
      ls_order_item_inx_c-updateflag  = if_mrm_constants=>gc_updkz-insert. "Insert new line ite
      ls_order_item_inx_c-material    = abap_true.                         "material
      ls_order_item_inx_c-route       = abap_true.                         "Route
      ls_order_item_inx_c-wbs_elem    = abap_true.                         "WBS Element
      ls_order_item_inx_c-plant       = abap_true.                         "Plant
      ls_order_item_inx_c-item_categ  = abap_true.                         "Item Category
      ls_order_item_inx_c-cust_mat35  = abap_true.                         "Customer material
      ls_order_item_inx_c-untof_wght  = abap_true.                         "++ Added unit of weight
      ls_order_item_inx_c-store_loc   = abap_true.                         "++ Storage location is missing in both line items 10 & 20: CR36963
      ls_order_item_inx_c-ref_1       = abap_true.                         "++ VBKD-IHREZ CR36963

*      Changes end 24093780 CUstomer Material not updated

      "Populate schedule line table
      ls_schedule_lines = VALUE #( itm_number =  lv_last_line_item       "Last line item
                                   sched_line  = gc_001                  "Schedule line item
                                   req_date    = <lfs_ekpo>-aedat        "Date
                                   req_qty     = <lfs_ekpo>-menge  ).    "Quantity
      "Populate schedule update
      ls_schedule_linesx = VALUE #( itm_number =  lv_last_line_item      "last line item
                                    sched_line = gc_001                  "Schedule line item
                                    updateflag = gc_i                    "Insert flag
                                    req_date   = abap_true               "Date
                                    req_qty    = abap_true  ).           "Quantity

********************
*** Partners details
********************
      "lt_so_partners contains all the partner details for all line items. Fetch existing line item details and append to new line item
      LOOP AT lt_so_partners ASSIGNING FIELD-SYMBOL(<lfs_so_partners>) WHERE sd_doc = gv_so_num "#EC CI_STDSEQ "#EC CI_NESTED
                                                                 AND itm_number = ls_so_items-itm_number.
        ls_partners-partn_role = <lfs_so_partners>-partn_role.
        IF <lfs_so_partners>-customer IS ASSIGNED AND <lfs_so_partners>-customer IS NOT INITIAL.
          ls_partners-partn_numb = <lfs_so_partners>-customer.
        ENDIF.

        IF <lfs_so_partners>-vendor_no IS ASSIGNED AND <lfs_so_partners>-vendor_no IS NOT INITIAL.
          ls_partners-partn_numb = <lfs_so_partners>-vendor_no.
        ENDIF.

        ls_partners-itm_number = lv_last_line_item.
        APPEND ls_partners TO lt_partners.
      ENDLOOP.

**********************************
***   Condition data
**********************************
      "/*  lt_so_condiions contains data for all condition types . Fetch only ZMZQ condition pricing type data
      LOOP AT lt_so_condiions ASSIGNING FIELD-SYMBOL(<lfs_so_condiions>) WHERE sd_doc = gv_so_num "#EC CI_NESTED
                                                                          AND itm_number = ls_so_items-itm_number
                                                                          AND cond_type = gc_zmzq.

        MOVE-CORRESPONDING <lfs_so_condiions> TO ls_cond.    "Move all the line item data to structure
        APPEND ls_cond TO lt_conditions_so.
        CLEAR ls_condx.

        ls_condx-itm_number = ls_cond-itm_number .               "Line item
        ls_condx-cond_type  = gc_zmzq.                           "Pricing Type
        ls_condx-updateflag = if_mrm_constants=>gc_updkz-update. "Update Flag
        APPEND ls_condx TO lt_conditions_sox.

        DATA(ls_conditions_in) = VALUE bapicond( itm_number     = lv_last_line_item                   "Last line
                                                 cond_type      = <lfs_so_condiions>-cond_type        "Condition type
                                                 cond_value     = <lfs_so_condiions>-cond_value / 10  "Condition Value
                                                 cond_p_unt     = <lfs_so_condiions>-cond_p_unt ).    "Conditio Unit
        APPEND:ls_conditions_in TO lt_conditions_so.

        DATA(ls_conditions_inx) = VALUE bapicondx(  itm_number  = lv_last_line_item                      "Line item
                                                    cond_type     = <lfs_so_condiions>-cond_type         "Condition type
                                                    cond_value    = abap_true                            "Condition value
                                                    cond_p_unt    = abap_true                            "Condition unit
                                                    updateflag    = if_mrm_constants=>gc_updkz-insert ). "Insert
        APPEND ls_conditions_inx TO lt_conditions_sox.

        CLEAR lt_fieldinfo.
        "/* Fetch all the fields for structure BAPICOND
        CALL FUNCTION 'DDIF_FIELDINFO_GET' "#EC CI_SUBRC
          EXPORTING
            tabname        = lc_bapicond
            langu          = sy-langu
          TABLES
            dfies_tab      = lt_fieldinfo
          EXCEPTIONS
            not_found      = 1
            internal_error = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
        LOOP AT lt_fieldinfo ASSIGNING <lfs_fieldinfo>.  "#EC CI_NESTED
          ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_cond TO <lfs_bapi>.
          IF sy-subrc <> 0. EXIT. ENDIF.
          ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_condx TO <lfs_bapix>.
          IF <lfs_bapi> IS NOT INITIAL.
            <lfs_bapix> = abap_true.
          ENDIF.
        ENDLOOP.

      ENDLOOP.

*************************
**    Line Item Texts
*************************
      "Move SO and Line item to lv_text_name to pass as single entry to lt_so_texts-applobject
      DATA(lv_text_name) = |{ gv_so_num && ls_so_items-itm_number }|.
      CONDENSE lv_text_name NO-GAPS.
      "Fetch all Texts for SO line item in existing lien item and copy to new Line item
      LOOP AT lt_so_texts ASSIGNING FIELD-SYMBOL(<lfs_so_texts>)  WHERE applobject = gc_vbbp "#EC CI_STDSEQ "#EC CI_NESTED
                                                            AND text_name = lv_text_name.
        IF <lfs_so_texts>-text_id EQ gc_zicg OR
           <lfs_so_texts>-text_id EQ gc_zrso OR
           <lfs_so_texts>-text_id EQ gc_zrsi
*           <lfs_so_texts>-text_id EQ lc_zak
          .
          CONTINUE.
        ENDIF.

        ls_order_text  = VALUE #( doc_number = gv_so_num
                               itm_number = lv_last_line_item
                               text_id = <lfs_so_texts>-text_id
                               langu = lc_en
                               text_line = <lfs_so_texts>-line ).  " timestamp.
        APPEND ls_order_text TO lt_order_text.
        CLEAR ls_order_text.
      ENDLOOP.

      "Populate ZICG Flag
      IF NOT line_exists( lt_order_text[ doc_number = gv_so_num itm_number = lv_last_line_item text_id = gc_zicg ] ).
        ls_order_text  = VALUE #( doc_number = gv_so_num
                                itm_number = lv_last_line_item
                                text_id = gc_zicg
                                langu = lc_en
                                text_line = abap_true  ).  " timestamp.
        APPEND ls_order_text TO lt_order_text.
        CLEAR ls_order_text.
      ENDIF.

*    ZAK New Line Item
*      IF NOT line_exists( lt_order_text[ doc_number =  gv_so_num
*                                         itm_number = lv_last_line_item
*                                         text_id    = lc_zak ] ).
*        ls_order_text  = VALUE #( doc_number =  gv_so_num
*                                  itm_number = lv_last_line_item
*                                  text_id    = lc_zak
*                                  langu      = lc_en
*                                  text_line  = <lfs_ekpo>-smp_addtnl ).  "Additional change flag
*        APPEND ls_order_text TO lt_order_text.
*        CLEAR ls_order_text.
*      ENDIF.

      IF NOT line_exists( lt_order_text[ doc_number = gv_so_num itm_number = lv_last_line_item text_id = gc_zrso ] ).
*     SMP Flag
        ls_order_text  = VALUE #( doc_number = gv_so_num
                                itm_number = lv_last_line_item
                                text_id = gc_zrso
                                langu = lc_en
                                text_line = ls_so_items-itm_number  ).  " Original item number
        APPEND ls_order_text TO lt_order_text.
        CLEAR ls_order_text.
      ENDIF.

*     ls_order_text  = VALUE #( doc_number =  gv_so_num
*                            itm_number = lv_last_line_item
*                            text_id = gc_zrsi
*                            langu = lc_en
*                            text_line = <lfs_vbep>-zsi ).  " timestamp.  ZSI
*     APPEND ls_order_text TO lt_order_text.
*     CLEAR ls_order_text.

      "Populate itabs to send to Bapi Change
      APPEND:ls_order_item_in_c  TO gt_order_item_in_c,
             ls_order_item_inx_c TO gt_order_item_inx_c,
             ls_schedule_lines   TO gt_schedule_lines,
             ls_schedule_linesx  TO gt_schedule_linesx.
      CLEAR:ls_schedule_lines,
            ls_schedule_linesx,
            ls_order_item_in_c,
            ls_order_item_inx_c.
    ENDLOOP.

    "Update split Sales org using Bapi BAPI_SALESORDER_CHANGE
    gs_order_header_inx-updateflag = gc_u.

*   Check if Contract if open/locked by any user before proceeding to SO Split.
*   Return if Locked with error message
*   Begin of CR_39940 by 24093840 on 11/24/2020 S4DK949398
    CLEAR lt_enq.


    lv_agreement = | { sy-mandt } | && |{ ls_items-agreement }|.
    CONDENSE lv_agreement NO-GAPS.
    CALL FUNCTION 'ENQUEUE_READ'
      EXPORTING
        gclient               = sy-mandt
        gname                 = lc_ekko
        garg                  = lv_agreement
        guname                = lv_uname
*       LOCAL                 = lv_local
*       FAST                  = lv_fast
*       GARGNOWC              = lv_gargnowc
      IMPORTING
        number                = lv_number
        subrc                 = lv_subrc
      TABLES
        enq                   = lt_enq
      EXCEPTIONS
        communication_failure = 1
        system_failure        = 2
        OTHERS                = 3.
    IF sy-subrc = 0 AND lt_enq IS NOT INITIAL.
      es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                           number = 026
                           message_v1 = lt_enq[ 1 ]-guname
                           message_v2 = ls_items-agreement
                           ).
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      RETURN.
    ENDIF.
*   End of CR_39940 by 24093840 on 11/24/2020 S4DK949398

*   Unlock
    CALL FUNCTION 'DEQUEUE_ALL'
      EXPORTING
        _synchron = 'X'.

    CALL FUNCTION 'DEQUEUE_EVVBAKE'
      EXPORTING
        mode_vbak = 'E'
        mandt     = sy-mandt
        vbeln     = gv_so_num
        _synchron = abap_true.
    IF zptpcl_i1058_ordchg=>gv_idoc_err <> abap_true.
************************************************************************************
*   Call BAPI ZPTP_I1058_ORDCHG to PERFORM SPLIT using BAPI_SALESORDER_CHANGE
************************************************************************************
      CALL FUNCTION 'ZPTP_I1058_ORDCHG'
        DESTINATION 'NONE'
        EXPORTING
          iv_so_num             = gv_so_num          "SO
          is_order_header_inx   = gs_order_header_inx ##ENH_OK
        TABLES
          it_return_so          = gt_return_so       "Return table
          it_order_item_in_c    = gt_order_item_in_c ##ENH_OK
          it_order_item_inx_c   = gt_order_item_inx_c "Line item Update tab
          it_schedule_lines     = gt_schedule_lines  "Schedule Lines
          it_schedule_linesx    = gt_schedule_linesx "Schedule Lines
          it_order_text         = lt_order_text      " Order texts
          it_partners           = lt_partners        " Partner details
          it_conditions_in      = lt_conditions_so   " Communication Fields for Maintaining Conditions in the Order
          it_conditions_inx     = lt_conditions_sox  " Communication Fields for Maintaining Conditions in the Order
        EXCEPTIONS
          system_failure        = 1 MESSAGE lv_msg
          communication_failure = 2 MESSAGE lv_msg
          OTHERS                = 3.
      IF sy-subrc <> 0.
* Capture the Dump message from RFC Failure.
        DATA(gs_ret) = VALUE bapiret2( message = lv_msg
                                       id      = lc_msgid
                                       number  = lc_msg046
                                       type    = if_mrm_constants=>gc_msgty_e ).
        APPEND gs_ret TO gt_return_so.
      ENDIF.

      "If changes is not sucessful i.e Error type A or E and Populate ct_idoc_status with Error message texts
      IF line_exists( gt_return_so[ type = if_mrm_constants=>gc_msgty_e ] ) OR line_exists( gt_return_so[ type = if_mrm_constants=>gc_msgty_a ] ).
        IF line_exists( gt_return_so[ type = if_mrm_constants=>gc_msgty_e ] ).
          DATA(ls_err) = gt_return_so[ type = if_mrm_constants=>gc_msgty_e ].
        ENDIF.
        IF line_exists( gt_return_so[ type = if_mrm_constants=>gc_msgty_a ] ).
          DATA(ls_abrt) = gt_return_so[ type = if_mrm_constants=>gc_msgty_a ].
        ENDIF.
        IF ls_err IS NOT INITIAL.
          es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                               message_v1 =   ls_err-message_v1
                               message =  | { ls_err-message } { gv_po_num } | ).
        ELSEIF ls_abrt IS NOT INITIAL.
          es_return = VALUE #( type = if_mrm_constants=>gc_msgty_a
                   message_v1 =   ls_abrt-message_v1
                   message =  | { ls_abrt-message } { gv_po_num } | ).
        ENDIF.
        LOOP AT gt_return_so INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_e OR type = if_mrm_constants=>gc_msgty_a.
          DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idco_number
                                                 status  = 51
                                                 msgty  = ls_err-type
                                                 msgid  = ls_err-id
                                                 msgno  = ls_err-number
                                                 msgv1  = ls_err-message_v1
                                                 msgv2  = ls_err-message_v2
                                                 msgv3  = ls_err-message_v3
                                                 msgv4  = ls_err-message_v4
                                                 repid  = sy-repid ).

          APPEND ls_idoc_status TO ct_idoc_status.
        ENDLOOP.
        ROLLBACK WORK.
        CALL FUNCTION 'DEQUEUE_ALL'
          EXPORTING
            _synchron = 'X'.
        RETURN.
      ELSE.
        "Fetch PO details using gv_po_num
        CALL FUNCTION 'BAPI_PO_GETDETAIL' "#EC CI_USAGE_OK[2438131] "#EC CI_USAGE_OK[1803189]
          EXPORTING
            purchaseorder = gv_po_num
            items         = abap_true
            schedules     = abap_true
            item_texts    = abap_true
            header_texts  = abap_true
            confirmations = abap_true
          IMPORTING
            po_header     = ls_header
          TABLES
            po_items      = lt_items
            po_item_texts = lt_po_item_texts
            return        = lt_return.

        "if data does not exist return
        IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
          ls_err = lt_return[ type = if_mrm_constants=>gc_msgty_e ].

          es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                               message =  | { ls_err-message } { gv_po_num } | ).

          RETURN.
        ENDIF.
        "Fetch last item from header
        CLEAR lv_po_last_line_item.
        lv_po_last_line_item = ls_header-last_item.
        "check first line item and check if quantity is the same
        IF line_exists(  it_ekpo_detail[ 1 ] ).
************************************************************************************************
          "Line ls_ekpo_detail contains PO Line item to be spli
          ls_ekpo_detail = it_ekpo_detail[ 1 ]."first line item in lt_ekpo_detail contains change

***********************************************************************************************
          ls_items = lt_items[ po_number = ls_ekpo_detail-ebeln po_item = ls_ekpo_detail-ebelp ].

          READ TABLE lt_potextitem ASSIGNING FIELD-SYMBOL(<lfs_potextitem>) WITH KEY
           po_number = ls_ekpo_detail-ebeln  po_item =  ls_ekpo_detail-ebelp text_id =  gs_save_text-gc_tdid_f48.
          IF sy-subrc EQ 0.
            <lfs_potextitem>-text_line =  ls_ekpo_detail-smp_flag.
          ELSE.
            ls_potextitem  = VALUE #(  po_number = ls_ekpo_detail-ebeln
                                      po_item =  ls_ekpo_detail-ebelp
                                      text_id =  gs_save_text-gc_tdid_f48
                                      text_line =  ls_ekpo_detail-smp_flag ).
*  Start of changes for PTPI1059 by 24093785.
            IF ls_potextitem IS NOT INITIAL.
              APPEND VALUE #( flag = lc_i f_val = lc_smp posex = ls_potextitem-po_item ) TO  zptpcl_1059_pochg_flag=>gt_change_flag.
              zptpcl_1059_pochg_flag=>gv_txt_flag = abap_true.
            ENDIF.
            APPEND ls_potextitem  TO lt_potextitem .CLEAR ls_potextitem .
*  End of changes for PTPI1059 by 24093785.
          ENDIF.

          READ TABLE lt_potextitem ASSIGNING <lfs_potextitem> WITH KEY
            po_number = ls_ekpo_detail-ebeln  po_item =  ls_ekpo_detail-ebelp text_id =  gs_save_text-gc_tdid_f49.
          IF sy-subrc EQ 0.
            <lfs_potextitem>-text_line =  ls_ekpo_detail-smp_addtnl.
          ELSE.
            ls_potextitem  = VALUE #(  po_number = ls_ekpo_detail-ebeln
                                    po_item =  ls_ekpo_detail-ebelp
                                    text_id =  gs_save_text-gc_tdid_f49
                                    text_line =  ls_ekpo_detail-smp_addtnl ).
*  Start of changes for PTPI1059 by 24093785.
            IF ls_potextitem IS NOT INITIAL.
              APPEND VALUE #( flag = lc_i f_val = lc_zak posex = ls_potextitem-po_item ) TO  zptpcl_1059_pochg_flag=>gt_change_flag.
              zptpcl_1059_pochg_flag=>gv_txt_flag = abap_true.
            ENDIF.
*  End of changes for PTPI1059 by 24093785.
            APPEND ls_potextitem  TO lt_potextitem  . CLEAR ls_potextitem .
          ENDIF.
          IF ls_ekpo_detail-lt1_text IS NOT INITIAL." Add F01 text only if its sent in IDOC else update parent line item
            READ TABLE lt_potextitem ASSIGNING <lfs_potextitem> WITH KEY po_number = ls_ekpo_detail-ebeln
            po_item = ls_ekpo_detail-ebelp
             text_id = gv_parent_text_id. " gs_save_text-gc_tdid_f01.
            IF sy-subrc EQ 0.
              <lfs_potextitem>-text_line = ls_ekpo_detail-lt1_text.
            ELSE.
              ls_potextitem = VALUE #( po_number = ls_ekpo_detail-ebeln
                                       po_item = ls_ekpo_detail-ebelp
                                       text_id = gv_parent_text_id "gs_save_text-gc_tdid_f01
                                       text_line = ls_ekpo_detail-lt1_text ).

              APPEND ls_potextitem TO lt_potextitem.
            ENDIF.
          ENDIF.
          CLEAR ls_items_backup.
*********************************************************************************************
          "ls_items_backup contains back up of BAPI line item details
          ls_items_backup = ls_items.
*********************************************************************************************
        ENDIF.


* Start of CR_1926 by 24097570 on 08/12/2020
        CLEAR gv_flag_pric_po.
        IF line_exists( gr_prc_ctrl[ low = ls_items-price_ctr ] ) . " Check for Price date control, if found in TVARVC
          gv_flag_pric_po = abap_true.
        ENDIF.
* End of CR_1926 by 24097570 on 08/12/2020

        "Change Quantity for the first line item
        MOVE-CORRESPONDING ls_items_backup TO ls_poitem.
        IF ls_poitem-quantity NE ls_ekpo_detail-menge.
          ls_poitem-quantity = ls_ekpo_detail-menge.

          ls_poitemx = VALUE #( po_item  = ls_poitem-po_item
                                po_itemx = abap_true
                                material = abap_true
                                quantity = abap_true
                                plant    = abap_true
                                acctasscat = abap_true ).
          APPEND:ls_poitem TO lt_poitem,
                 ls_poitemx TO lt_poitemx.


          ls_poschedule = VALUE #( po_item       = ls_poitem-po_item
                                   sched_line    = gc_001
                                   delivery_date = ls_ekpo_detail-aedat
                                   quantity      = ls_ekpo_detail-menge
                                    ).
          APPEND ls_poschedule TO lt_poschedule.

          ls_poschedulex = VALUE #( po_item     = ls_poitem-po_item
                                  sched_line    = gc_001
                                  po_itemx      = abap_true
                                  sched_linex   = abap_true
                                  delivery_date = abap_true
                                  quantity      = abap_true
                                 ).
          APPEND ls_poschedulex TO lt_poschedulex.
          CLEAR:ls_poschedulex,ls_poschedule.

** SOC - Added by 24097570 for CR_1926 on 09/12/2020
          SELECT SINGLE ebeln,knumv FROM ekko
                                 INTO @DATA(ls_ekko)
                                 WHERE ebeln = @gv_po_num.
          IF ls_ekko IS NOT INITIAL.

            SELECT knumv, kposn, kschl, kpein, kmein FROM prcd_elements
                                INTO TABLE @DATA(lt_knumv_pric)
                                WHERE knumv = @ls_ekko-knumv
                                  AND kposn = @ls_ekpo_detail-ebelp  "ls_poitem-po_item
                                  AND kschl IN ( @gc_zmpp, @gc_pb00 ).

          ENDIF.
** EOC - Added by 24097570 for CR_1926 on 09/12/2020

** Start of CR_1926 by 240975750 on 08/12/2020

            IF gv_flag_pric_po EQ abap_true.

              CALL FUNCTION 'ZPTP_I1058_DBS_PO_PRICING_UPD'
                EXPORTING
                  iv_belnr      = ls_ekpo_detail-ebeln
                  iv_ebelp      = ls_poitem-po_item
                  iv_aedat      = ls_ekpo_detail-aedat
                IMPORTING
                  ev_cond_no    = lv_cond_no
                  ev_cond_value = lv_cond_value
                  ev_cond_type  = lv_cond_type.

              READ TABLE gt_cond_po INTO DATA(ls_cond_po)
                                       WITH KEY itm_number = ls_items-po_item
                                                cond_type  = lv_cond_type.
              IF sy-subrc IS INITIAL AND lv_cond_value is NOT INITIAL.
                "If ZMPP/PB00 exists, update the value
                TRY.
                    DATA(ls_knumv_price) = lt_knumv_pric[ kschl = lv_cond_type ].
                  CATCH cx_sy_itab_line_not_found.
                ENDTRY.

                ls_condition = VALUE #(  itm_number = ls_poitem-po_item
                                         cond_type  = lv_cond_type
                                         cond_value = lv_cond_value / 10
                                         cond_p_unt = ls_knumv_price-kpein
                                         cond_unit  = ls_knumv_price-kmein
                                         change_id  = gc_u   ).
                APPEND: ls_condition TO lt_condition.
                ls_conditionx = VALUE #(  itm_number = ls_poitem-po_item
                                          cond_type  = abap_true
                                          cond_value = abap_true
                                          cond_p_unt = abap_true
                                          cond_unit  = abap_true
                                          change_id  = abap_true ).

                APPEND : ls_conditionx TO lt_conditionx.
                CLEAR:ls_condition,ls_conditionx.
              ENDIF.
            ENDIF.

** End of CR_1926 by 240975750 on 08/12/2020

          CLEAR:ls_poitem,ls_poitemx.
        ENDIF.
        "Fetch PR and PR line item from VBEP
        SELECT  vbeln,
                posnr,
                banfn,
                bnfpo
        INTO TABLE @DATA(lt_vbep)
         FROM vbep WHERE vbeln = @gv_so_num
        AND wmeng <> @space.
        IF sy-subrc EQ 0.
          SORT lt_vbep BY vbeln posnr.
        ENDIF.

*   Fetch condition types
*   CLEAR ev_result.
** Begin of changes for CR_1926 by 24097570
*        SELECT SINGLE ebeln,knumv FROM ekko
*                                  INTO @DATA(ls_ekko)
*                                  WHERE ebeln = @gv_po_num.
*        IF sy-subrc EQ 0.
** End of changes for CR_1926 by 24097570
        IF ls_ekko IS INITIAL.
*       Pass KNUMV in PRCD_ELEMENTS-cONDITION RECORD NO
          DATA:ls_knumv TYPE prcd_elements.
          SELECT SINGLE * FROM prcd_elements
                              INTO ls_knumv
                              WHERE knumv = ls_ekko-knumv
                                AND kposn = ls_ekpo_detail-ebelp  "ls_poitem-po_item
                                AND kschl = gc_zmzp.

        ENDIF.

        "Append new line items to PO along with PR and PR number
        DATA(lv_index) = 1.
        LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_im_ekpo>) FROM 2.

          lv_po_last_line_item = lv_po_last_line_item + ls_header-item_intvl.
          IF line_exists( lt_preq[ lv_index ] ).
            CLEAR ls_preq.
            ls_preq = lt_preq[ lv_index ].
            IF line_exists( lt_vbep[ posnr =  ls_preq-posnr ] ).
              DATA(ls_vbep1) = lt_vbep[ posnr = ls_preq-posnr ].
            ENDIF.
          ENDIF.

          MOVE-CORRESPONDING ls_items_backup TO ls_poitem.##ENH_OK.
          ls_poitem-quantity     = <lfs_im_ekpo>-menge.
          ls_poitem-preq_no      = ls_vbep1-banfn.  "This PR must be closed before callig bapi PO Change
          ls_poitem-preq_item    = ls_vbep1-bnfpo.
          ls_poitem-po_item      = lv_po_last_line_item.
          ls_poitem-order_reason = ls_items_backup-ord_reas.
          ls_poitem-agreement    = ls_items_backup-agreement. "CR# 36950 "Needed Contract and Contract line item only for new Line item
          ls_poitem-agmt_item    = ls_items_backup-agmt_item.  "CR# 36950 "Needed Contract and Contract line item only for new Line item

          ls_poitemx = VALUE #( po_item  = ls_poitem-po_item "lv_po_last_line_item
                                po_itemx = abap_true
                                material = abap_true
                                quantity = abap_true
                                plant    = abap_true
                                net_price = abap_true
                                preq_no = abap_true
                                preq_item = abap_true
                                acctasscat = abap_true
                                order_reason = abap_true
                                agreement = abap_true   "CR# 36950 "Needed Contract and Contract line item only for new Line item
                                agmt_item = abap_true   "CR# 36950 "Needed Contract and Contract line item only for new Line item
                                 ).

          ls_poschedule = VALUE #( po_item       = lv_po_last_line_item
                                   sched_line    = gc_001
                                   delivery_date = <lfs_im_ekpo>-aedat
                                   quantity      = <lfs_im_ekpo>-menge
                                   req_closed    = abap_true ).

          ls_poschedulex = VALUE #( po_item     = lv_po_last_line_item
                                  sched_line    = gc_001
                                  po_itemx      = abap_true
                                  sched_linex   = abap_true
                                  delivery_date = abap_true
                                  quantity      = abap_true
                                  req_closed    = abap_true ).

          IF ls_knumv-kschl = gc_zmzp.
            ls_condition = VALUE #(  itm_number = lv_po_last_line_item "ls_items-po_item
                                              cond_type  = gc_zmzp
                                              cond_value = ( ls_knumv-kbetr / 10 ) "ls_knumv-kwert
                                              cond_p_unt = ls_knumv-kpein
                                              cond_unit  = ls_knumv-kmein
                                              change_id  = gc_i   ).

            APPEND: ls_condition TO lt_condition.

            ls_conditionx = VALUE #(  itm_number = lv_po_last_line_item "ls_items-po_item
                                                      cond_type  = gc_zmzp
                                                      cond_value = abap_true
                                                      cond_p_unt = abap_true
                                                      cond_unit  = abap_true
                                                      change_id  = abap_true ).
            APPEND : ls_conditionx TO lt_conditionx.
          ENDIF. "IF ls_knumv-kschl = gc_zmzp.

** Start of CR_1926 by 240975750 on 08/12/2020

            CALL FUNCTION 'ZPTP_I1058_DBS_PO_PRICING_UPD'
              EXPORTING
                iv_belnr      = <lfs_im_ekpo>-ebeln
                iv_ebelp      = <lfs_im_ekpo>-ebelp
                iv_aedat      = <lfs_im_ekpo>-aedat
              IMPORTING
*               EV_COND_NO    =
                ev_cond_value = lv_cond_value
                ev_cond_type  = lv_cond_type.

            IF lv_cond_value IS NOT INITIAL.
              ls_condition = VALUE #(  itm_number = lv_po_last_line_item
                                              cond_type  = lv_cond_type
                                              cond_value = lv_cond_value / 10
                                              cond_p_unt = ls_knumv_price-kpein
                                              cond_unit  = ls_knumv_price-kmein
                                              change_id  = gc_u   ).

              ls_conditionx = VALUE #(  itm_number = lv_po_last_line_item
                                                      cond_type  = abap_true
                                                      cond_value = abap_true
                                                      cond_p_unt = abap_true
                                                      cond_unit  = abap_true
                                                      change_id  = abap_true ).
              APPEND: ls_condition TO lt_condition.
              APPEND: ls_conditionx TO lt_conditionx.
              CLEAR : ls_condition, ls_conditionx.
            ENDIF.


** End of CR_1926 by 240975750 on 08/12/2020

* select zmzp line item and populate condition table
***********************************************************************************************
*      Populate Texts Internal table
***********************************************************************************************
          LOOP AT lt_po_item_texts ASSIGNING FIELD-SYMBOL(<lfs>) WHERE po_number = gv_po_num AND
                                                                       po_item = ls_items_backup-po_item.
            IF <lfs>-text_id = gv_parent_text_id. "gs_save_text-gc_tdid_f01. "Update F01 with parent line item number rather than text in parent line item
              CONTINUE.
            ELSE.
              IF NOT line_exists( lt_potextitem[  po_number = gv_po_num po_item = lv_po_last_line_item text_id = <lfs>-text_id ] ).


                ls_potextitem  = VALUE #( po_number = gv_po_num
                                          po_item = lv_po_last_line_item
                                          text_id = <lfs>-text_id
                                          text_line = <lfs>-text_line ).
                APPEND ls_potextitem TO lt_potextitem.
                CLEAR ls_potextitem .
              ENDIF.
            ENDIF.
          ENDLOOP.

          IF NOT line_exists( lt_potextitem[  po_number = gv_po_num po_item =  lv_po_last_line_item text_id =  gs_save_text-gc_tdid_f48 ] ).
            ls_potextitem = VALUE #( po_number = gv_po_num
                                     po_item =  lv_po_last_line_item
                                     text_id =  gs_save_text-gc_tdid_f48
                                     text_line =  ls_ekpo_detail-smp_flag ).
*  Start of changes for PTPI1059 by 24093785.
            IF ls_potextitem IS NOT INITIAL.
              APPEND VALUE #( flag = lc_i f_val = lc_smp posex =  ls_potextitem-po_item ) TO  zptpcl_1059_pochg_flag=>gt_change_flag.
              zptpcl_1059_pochg_flag=>gv_txt_flag = abap_true.
            ENDIF.
*  End of changes for PTPI1059 by 24093785.
            APPEND ls_potextitem TO lt_potextitem .CLEAR ls_potextitem.
          ENDIF.
          IF NOT line_exists( lt_potextitem[ po_number = gv_po_num po_item =   lv_po_last_line_item text_id =  gs_save_text-gc_tdid_f49 ] ) .
            ls_potextitem = VALUE #(  po_number = gv_po_num
                                      po_item =   lv_po_last_line_item
                                      text_id =  gs_save_text-gc_tdid_f49
                                      text_line =  ls_ekpo_detail-smp_addtnl ).
*  Start of changes for PTPI1059 by 24093785.
            IF ls_potextitem IS NOT INITIAL.
              APPEND VALUE #( flag = lc_i f_val = lc_zak posex =  ls_potextitem-po_item ) TO  zptpcl_1059_pochg_flag=>gt_change_flag.
              zptpcl_1059_pochg_flag=>gv_txt_flag = abap_true.
            ENDIF.
*  End of changes for PTPI1059 by 24093785.
            APPEND ls_potextitem  TO lt_potextitem  . CLEAR ls_potextitem .
          ENDIF.

          IF NOT line_exists( lt_potextitem[ po_number = gv_po_num  po_item =  lv_po_last_line_item  text_id =  gs_save_text-gc_tdid_zfi ] ).
            ls_potextitem  = VALUE #( po_number = gv_po_num
                                      po_item =  lv_po_last_line_item
                                      text_id =  gs_save_text-gc_tdid_zfi
                                      text_line =  ls_items_backup-po_item ).
            APPEND ls_potextitem  TO lt_potextitem  .
            CLEAR ls_potextitem.
          ENDIF.

          IF <lfs_im_ekpo>-lt1_text IS NOT INITIAL.
            IF  NOT line_exists(  lt_potextitem[ po_number = gv_po_num po_item = lv_po_last_line_item text_id = gv_parent_text_id ]  )."gs_save_text-gc_tdid_f01
              ls_potextitem = VALUE #( po_number = gv_po_num
                                       po_item = lv_po_last_line_item
                                       text_id = gv_parent_text_id "gs_save_text-gc_tdid_f01
                                       text_line = <lfs_im_ekpo>-lt1_text ).

              APPEND ls_potextitem TO lt_potextitem.
              CLEAR ls_potextitem.
            ENDIF.
          ENDIF.

          IF  NOT line_exists(  lt_potextitem[ po_number = gv_po_num po_item = lv_po_last_line_item text_id = gv_parent_text_id ]  ). "gs_save_text-gc_tdid_f01
            ls_potextitem = VALUE #( po_number = gv_po_num
                                     po_item = lv_po_last_line_item
                                     text_id = gv_split_text  "gv_parent_text_id "gs_save_text-gc_tdid_f01
                                     text_line = ls_ekpo_detail-ebelp ).

            APPEND ls_potextitem TO lt_potextitem.
            CLEAR ls_potextitem.
          ENDIF.

          APPEND:ls_poschedule TO lt_poschedule,
                 ls_poschedulex TO lt_poschedulex.
          APPEND:ls_poitem TO lt_poitem,
                 ls_poitemx TO lt_poitemx.
          CLEAR:ls_poitem,ls_poitemx.
          CLEAR ls_potextitem.
          lv_index = lv_index + 1.
        ENDLOOP.
        gs_poheadx-po_number = abap_true .
        gs_header_change = CORRESPONDING #( ls_header ). ##ENH_OK.
        gs_header_change-comp_code = ls_header-co_code.

        CALL FUNCTION 'DEQUEUE_EMEKKOE'
          EXPORTING
            mode_ekko = 'E'              " Lock mode for table EKKO
            mandt     = sy-mandt         " Enqueue argument 01
            ebeln     = ls_ekpo_detail-ebeln               " Enqueue argument 02
            _synchron = abap_true.            " Synchonous unlock

        CALL FUNCTION 'DEQUEUE_ALL'
          EXPORTING
            _synchron = 'X'.

        "Export values to VOFM routine 950/951/952
        EXPORT lt_condition FROM lt_condition TO DATABASE indx(pt) ID gv_po_num.

        CALL FUNCTION 'ZPTP_I1058_ORDCHG_PO'
          DESTINATION 'NONE'
          EXPORTING
            iv_po_num           = gv_po_num
            iv_header_change    = gs_header_change
            iv_poheadx          = gs_poheadx
            iv_bapi_call_count  = iv_call_count "Added by 24072555 on 29th Aug 2020
          TABLES
            it_return_po_change = lt_return_po_change
            it_poitem           = lt_poitem
            it_poitemx          = lt_poitemx
            it_poschedule       = lt_poschedule
            it_poschedulex      = lt_poschedulex
            it_condition        = lt_condition
            it_conditionx       = lt_conditionx
            it_potextheader     = gt_potextheader
            it_potextitem       = lt_potextitem
            it_popartner        = gt_popartner.


        IF line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ] ) OR line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_a ] ).

          IF line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ] ).
            ls_err = lt_return_po_change[ type = if_mrm_constants=>gc_msgty_e ].
          ENDIF.
          IF line_exists( lt_return_po_change[ type = if_mrm_constants=>gc_msgty_a ] ).
            ls_abrt = lt_return_po_change[ type = if_mrm_constants=>gc_msgty_a ].
          ENDIF.
          IF ls_err IS NOT INITIAL.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                                 message =  | { ls_err-message } { gv_po_num } | ).
          ELSEIF ls_abrt IS NOT INITIAL.
            es_return = VALUE #( type = if_mrm_constants=>gc_msgty_a
                     message =  | { ls_abrt-message } { gv_po_num } | ).
          ENDIF.

          LOOP 	AT lt_return_po_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_e OR type = if_mrm_constants=>gc_msgty_a.
            ls_idoc_status = VALUE bdidocstat( docnum = gv_idco_number
                                               status  = 51
                                               msgty  = ls_err-type
                                               msgid  = ls_err-id
                                               msgno  = ls_err-number
                                               msgv1  = ls_err-message_v1
                                               msgv2  = ls_err-message_v2
                                               msgv3  = ls_err-message_v3
                                               msgv4  = ls_err-message_v4
                                               repid  = sy-repid
                                               ).

            APPEND ls_idoc_status TO ct_idoc_status.
          ENDLOOP.

        ELSE.
          es_return = VALUE #( type = if_mrm_constants=>gc_msgty_s
                             message =  | { 'Item details updated sucessfully for PO'(009)  } { gv_po_num } | ).
          LOOP 	AT lt_return_po_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_s.
            ls_idoc_status = VALUE bdidocstat( docnum = gv_idco_number
                                               status  = 53
                                               msgty  = ls_err-type
                                               msgid  = ls_err-id
                                               msgno  = ls_err-number
                                               msgv1  = ls_err-message_v1
                                               msgv2  = ls_err-message_v2
                                               msgv3  = ls_err-message_v3
                                               msgv4  = ls_err-message_v4
                                               repid  = sy-repid
                                               ).
            APPEND ls_idoc_status TO ct_idoc_status.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->UPDATE_PR_CHANGE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method UPDATE_PR_CHANGE.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZPTPCL_I1058_ORDCHG->UPDATE_REASON_REJEC_SO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EBELP                       TYPE        EBELP(optional)
* | [--->] IV_ABGRU                       TYPE        ABGRU(optional)
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL(optional)
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_reason_rejec_so.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_REASON_REJEC_SO                           *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update PO line items                             *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_REASON_REJEC_SO
**&----------------------------------------------------------------------*
*Local dta declarations
    DATA:lt_return_c         TYPE TABLE OF bapiret2,
         lt_order_item_in_c  TYPE STANDARD TABLE OF bapisditm,
         lt_item_in_c        TYPE STANDARD TABLE OF bapisditm,
         lt_order_item_inx_c TYPE STANDARD TABLE OF bapisditmx,
         lt_item_inx_c       TYPE STANDARD TABLE OF bapisditmx,
         lt_order_text       TYPE TABLE OF bapisdtext.

*   Local structure declarations
    DATA:ls_order_header_inx TYPE bapisdh1x,
         ls_order_text       TYPE bapisdtext.

*   Local constant declarations
    CONSTANTS lc_en TYPE spras VALUE 'E'.

    CLEAR:ls_order_header_inx,lt_order_item_in_c,lt_order_item_inx_c.
    ls_order_header_inx-updateflag = gc_u.
    LOOP AT it_ekpo_detail ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail>).
      CLEAR : lt_item_in_c, lt_item_inx_c.
*    fetch sales order line item number
      IF line_exists( gt_ekkn[ ebeln = gv_po_num ebelp = <lfs_ekpo_detail>-ebelp ] ).
        TRY.
            DATA(ls_ekkn) = gt_ekkn[ ebeln = gv_po_num ebelp = <lfs_ekpo_detail>-ebelp ].
*   ITM_NUMBER
            IF NOT line_exists( lt_order_item_in_c[ itm_number = ls_ekkn-vbelp ] ).

              lt_item_in_c = VALUE #( ( itm_number = ls_ekkn-vbelp
                                        reason_rej = <lfs_ekpo_detail>-abgru ) ) .
              APPEND LINES OF lt_item_in_c TO lt_order_item_in_c.
            ENDIF.
** ITEMX table
            IF NOT line_exists( lt_order_item_inx_c[ itm_number = ls_ekkn-vbelp ] ).
              lt_item_inx_c = VALUE #( ( itm_number = ls_ekkn-vbelp
                                         updateflag = abap_true
                                         reason_rej = abap_true ) ).
              APPEND LINES OF lt_item_inx_c TO lt_order_item_inx_c.
            ENDIF.

* *     SMP Flag
            ls_order_text  = VALUE #( doc_number = ls_ekkn-vbeln
                                      itm_number = ls_ekkn-vbelp
                                      text_id = gc_zicg
                                      langu = lc_en
                                      text_line = abap_true ).  " timestamp.
            APPEND ls_order_text TO lt_order_text.
          CATCH cx_sy_itab_line_not_found.
            CLEAR : ls_ekkn.
        ENDTRY.
      ENDIF.
    ENDLOOP.

    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'    "#EC CI_USAGE_OK[2438131]
      EXPORTING
        salesdocument    = gv_so_num
        order_header_inx = ls_order_header_inx
      TABLES
        return           = lt_return_c
        order_item_in    = lt_order_item_in_c
        order_item_inx   = lt_order_item_inx_c
        order_text       = lt_order_text.

    IF line_exists( lt_return_c[ type = if_mrm_constants=>gc_msgty_s ] ) .
      es_return-type = if_mrm_constants=>gc_msgty_s.
      LOOP AT  lt_return_c INTO DATA(ls_err) WHERE type = if_mrm_constants=>gc_msgty_s.
        DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idco_number
                                                status  = 53
                                                msgty  = ls_err-type
                                                msgid  = ls_err-id
                                                msgno  = ls_err-number
                                                msgv1  = ls_err-message_v1
                                                msgv2  = ls_err-message_v2
                                                msgv3  = ls_err-message_v3
                                                msgv4  = ls_err-message_v4
                                                repid  = sy-repid
                                                ).

        APPEND ls_idoc_status TO ct_idoc_status.
      ENDLOOP.

    ELSE.
      es_return-type = if_mrm_constants=>gc_msgty_e.
      LOOP AT  lt_return_c INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_e.
        ls_idoc_status = VALUE bdidocstat( docnum = gv_idco_number
                                                status  = 51
                                                msgty  = ls_err-type
                                                msgid  = ls_err-id
                                                msgno  = ls_err-number
                                                msgv1  = ls_err-message_v1
                                                msgv2  = ls_err-message_v2
                                                msgv3  = ls_err-message_v3
                                                msgv4  = ls_err-message_v4
                                                repid  = sy-repid
                                                ).
        APPEND ls_idoc_status TO ct_idoc_status.
      ENDLOOP.
      IF sy-subrc = 0.
        zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->UPDATE_SIMPLE_CHANGE_FLAG
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_HEADER                      TYPE        ABAP_BOOL(optional)
* | [--->] IV_ITEM_FLAG                   TYPE        ABAP_BOOL(optional)
* | [--->] IV_ADDITIONAL_FLAG             TYPE        ABAP_BOOL(optional)
* | [--->] IV_NUM                         TYPE        THEAD-TDNAME
* | [--->] IV_TEXT                        TYPE        TDLINE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_simple_change_flag.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  UPDATE_SIMPLE_CHANGE_FLAG                        *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update header and Item text                      *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_SIMPLE_CHANGE_FLAG
**&----------------------------------------------------------------------*
    "Local data declaration
    DATA:lt_line   TYPE STANDARD TABLE OF tline, "line for each text
         ls_header TYPE thead. "structure for each line
    "if input parameter is header
    IF iv_header IS NOT INITIAL.
      ls_header = VALUE #(  tdobject = gs_save_text-gc_object_h "EKKO
                            tdname   = iv_num
                            tdid     = gs_save_text-gc_tdid_f26 "Header flag
                          ).
      "Item
    ELSEIF iv_item_flag IS NOT INITIAL.
      ls_header = VALUE #(  tdobject = gs_save_text-gc_object_i "EKPO
                                         tdname   = iv_num
                                         tdid     = gs_save_text-gc_tdid_f48 " item
                                       ).
      "additional flag
    ELSEIF iv_additional_flag IS NOT INITIAL.
      ls_header = VALUE #(  tdobject = gs_save_text-gc_object_i "EKPO
                                        tdname   = iv_num
                                        tdid     = gs_save_text-gc_tdid_f49
                         ).
    ENDIF.
    lt_line = VALUE #( ( tdformat = '*'
                           tdline   = iv_text ) ).

    ls_header-tdspras = sy-langu."E
    CONDENSE ls_header-tdname NO-GAPS.
    CALL FUNCTION 'SAVE_TEXT'
      EXPORTING
        client          = sy-mandt
        header          = ls_header
        savemode_direct = abap_true
      TABLES
        lines           = lt_line
      EXCEPTIONS
        id              = 1
        language        = 2
        name            = 3
        object          = 4
        OTHERS          = 5.
    IF sy-subrc EQ 0.
      CALL FUNCTION 'COMMIT_TEXT'
        EXPORTING
          savemode_direct = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZPTPCL_I1058_ORDCHG->UPDATE_SO_LINE_ITEM
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_EKPO_DETAIL                 TYPE        GTY_EKPO_DETAIL(optional)
* | [--->] IT_EKPO_DETAIL                 TYPE        GTT_EKPO_DETAIL(optional)
* | [--->] IV_CALL_COUNT                  TYPE        CHAR1(optional)
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD update_so_line_item.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  update_so_line_item                              *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Initialize  variables                            *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&=======================================================================*
*& Change ID | Date       | Request #  | Changed By   | Description      *
*&-----------------------------------------------------------------------*
**& CR#1203   28/08/2020   S4DK914229   24086849     Price change for ZMZP
**  / 997
** CR_1839   28/11/2020   S4DK952570   24093840     Additional Mapping for
**                                                  existing ORDCHG
**&----------------------------------------------------------------------*
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD update_so_line_item
**&----------------------------------------------------------------------*
  "Local structures
  TYPES:BEGIN OF lty_vbeln,
          vbeln TYPE vbeln,
        END OF lty_vbeln.

  "Local data declarations
  DATA:lt_vbeln              TYPE STANDARD TABLE OF lty_vbeln, "vbeln table to sent to BAPI
       lt_return_new         TYPE STANDARD TABLE OF bapiret2, "returb table
       lt_return_c           TYPE STANDARD TABLE OF bapiret2, "returb table
       lt_so_partner_upd     TYPE STANDARD TABLE OF bapiparnrc, "Added for CR 997 by 24086849 on 31/08/2020
       lt_so_partner_upd_tmp TYPE STANDARD TABLE OF bapiparnrc, "Added for CR 1839 by 24086849 on 31/08/2020
       ls_so_partner_upd     TYPE bapiparnrc.                   "Added for CR 997 by 24086849 on 31/08/2020

  DATA:lt_order_text TYPE TABLE OF bapisdtext,
       ls_order_text TYPE bapisdtext,
       lt_schedule   TYPE STANDARD TABLE OF bapischdl,
       lt_schedulex  TYPE STANDARD TABLE OF bapischdlx,
       lc_en         TYPE spras VALUE 'E'.

* Begin of CR_1839 by 24093780 on 11/20/2020
  DATA:lt_ekpo_detail_dci TYPE gtt_ekpo_detail.
* End of CR_1839 by 24093780 on 11/20/2020

  CONSTANTS: lc_msgs             TYPE symsgid VALUE 'ZPTP_MSGS',
             lc_500              TYPE symsgno VALUE '500',
             lc_poitem_textid(4) TYPE c VALUE 'ITEM',
             lc_x3(2)            TYPE c VALUE 'X3',  "Added for CR 1839 by 24093780 on 11/18/2020
             lc_xf               TYPE parvw VALUE 'XF',  "Added for CR 1839 by 24093780 on 11/18/2020
             lc_pl               TYPE parvw VALUE 'PL',  "Added for CR 1839 by 24093780 on 11/18/2020
             lc_lsp              TYPE gty_ctyp VALUE 'LSP',  "Added for CR 1839 by 24093780 on 11/18/2020
             lc_y                TYPE c VALUE 'Y'.  "Added for CR 1839 by 24093780 on 11/18/2020

  "Fetch line item to  be changed
  LOOP AT it_ekpo_detail INTO DATA(ls_ekpo_detail).
    IF line_exists( gt_ekkn[ ebeln = ls_ekpo_detail-ebeln ebelp = ls_ekpo_detail-ebelp ] ).
      DATA(ls_ekkn) =  gt_ekkn[ ebeln = ls_ekpo_detail-ebeln ebelp = ls_ekpo_detail-ebelp ].
    ELSE.
      DATA(lv_return) = abap_true.
      "Populate error structure and return
      es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                           id   = lc_msgs
                           number = lc_500
                           message_v1 = ls_ekpo_detail-ebelp
                           message_v2 = ls_ekpo_detail-ebeln  ).
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      EXIT.
    ENDIF.
    IF line_exists( gt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ] ).
      DATA(ls_so_items) = gt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ].
      "populate item tables to pass to BAPI
      IF NOT line_exists( gt_order_item_in_c[ itm_number = ls_so_items-itm_number ] ).

        DATA(ls_order_item_in_c) = VALUE bapisditm(  itm_number = ls_so_items-itm_number  ).

        APPEND ls_order_item_in_c TO gt_order_item_in_c.
        CLEAR ls_order_item_in_c.
      ENDIF.

      IF NOT line_exists( gt_order_item_inx_c[ itm_number = ls_so_items-itm_number ] ).
*        gt_order_item_inx_c = VALUE #( ( itm_number = ls_so_items-itm_number
        DATA(ls_order_item_inx_c) = VALUE bapisditmx( itm_number = ls_so_items-itm_number
                                         updateflag = gc_u ) .

        APPEND ls_order_item_inx_c TO gt_order_item_inx_c.
        CLEAR ls_order_item_inx_c.
      ENDIF.

      IF NOT line_exists( lt_order_text[ doc_number = gv_so_num itm_number = ls_so_items-itm_number ] ).
        ls_order_text  = VALUE #( doc_number = gv_so_num
                                  itm_number = ls_so_items-itm_number
                                  text_id = gc_zicg
                                  langu = lc_en
                                  text_line = abap_true ).  " timestamp.
        APPEND ls_order_text TO lt_order_text.
        CLEAR ls_order_text.
      ENDIF.

**    Delete the line item from gt_so_schjedule with REQ_QTY is initial
      DELETE gt_so_schedule WHERE req_qty IS INITIAL.
*    "Fetch line item from gt_so_schjedule to fetch row with REQ_QTY not initial
      TRY .
          DATA(ls_vbep) = gt_so_schedule[ doc_number = gv_so_num itm_number = ls_so_items-itm_number ].
        CATCH cx_sy_itab_line_not_found.
          CLEAR : ls_vbep.
      ENDTRY.

      IF line_exists( gt_items[ po_number = ls_ekpo_detail-ebeln  po_item = ls_ekpo_detail-ebelp ] ).
        DATA(ls_items) = gt_items[ po_number = ls_ekpo_detail-ebeln  po_item = ls_ekpo_detail-ebelp ].
      ENDIF.

      "Populate item tables to pass to BAPI for quantity, Date and Qtantity or Date
      "Line item contains change quantity and Date
      IF ls_ekpo_detail-ctyp EQ gc_qty."Contains QTY
        IF ls_items-delete_ind IS NOT INITIAL.
          es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                               number = 015
                               message_v2 = ls_ekpo_detail-ebelp ).
          zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
          lv_return = abap_true.
          EXIT.
        ENDIF.

        "Check quantity for PO and SO are same
        "If a line item contains AB lines update delete flag
        delete_ab_texts( ls_ekpo_detail-ebelp ).
        READ TABLE gt_schedule_lines ASSIGNING FIELD-SYMBOL(<lfs_schedule_lines>)
                                     WITH KEY itm_number = ls_so_items-itm_number
                                              sched_line = ls_vbep-sched_line.
        IF sy-subrc IS INITIAL.
          <lfs_schedule_lines>-req_qty = ls_ekpo_detail-menge.
        ELSE.
          CLEAR : lt_schedule.
          "Populates schedule lines itab with line number
          lt_schedule = VALUE #( ( itm_number = ls_so_items-itm_number
                                   sched_line = ls_vbep-sched_line
                                   req_qty = ls_ekpo_detail-menge ) ).
          APPEND LINES OF lt_schedule TO gt_schedule_lines.
        ENDIF.
        READ TABLE gt_schedule_linesx ASSIGNING FIELD-SYMBOL(<lfs_schedule_linesx>)
                                        WITH KEY itm_number = ls_so_items-itm_number
                                                 sched_line = ls_vbep-sched_line.
        IF sy-subrc IS INITIAL.
          <lfs_schedule_linesx>-updateflag = gc_u.
          <lfs_schedule_linesx>-req_qty = abap_true.
        ELSE.
          CLEAR : lt_schedulex.
          "Populates schedule lines itab with line number
          lt_schedulex = VALUE #( ( itm_number = ls_so_items-itm_number
                                    sched_line = ls_vbep-sched_line
                                    updateflag = gc_u
                                    req_qty = abap_true  ) ).

          APPEND LINES OF lt_schedulex TO gt_schedule_linesx.
        ENDIF.

*   Begin of CR_1839 by 24093780 on 11/18/2020
        IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                         low  = abap_true ] ).
          "For change type QTY and For HOI document with Simple change flag is X3, Populate DCI table and pass it to
          IF ls_ekpo_detail-smp_addtnl EQ lc_x3.
            APPEND INITIAL LINE TO lt_ekpo_detail_dci ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail_dci>).
            <lfs_ekpo_detail_dci> = CORRESPONDING gty_ekpo_detail( ls_ekpo_detail ).
          ENDIF.
        ENDIF.
*   End of CR_1839 by 24093780 on 11/18/2020
      ELSEIF ls_ekpo_detail-ctyp CA gc_ddt. "Only date change
        IF ls_items-delete_ind IS NOT INITIAL.
          es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                               number = 015
                               message_v2 = ls_ekpo_detail-ebelp ).
          zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
          lv_return = abap_true.
          EXIT.
        ENDIF.

        "If a line item contains AB lines update delete flag
        delete_ab_texts( ls_ekpo_detail-ebelp ).
        READ TABLE gt_schedule_lines ASSIGNING <lfs_schedule_lines>
                                     WITH KEY itm_number = ls_so_items-itm_number
                                              sched_line = ls_vbep-sched_line.
        IF sy-subrc IS INITIAL.
*        <lfs_schedule_lines>-req_date = ls_ekpo_detail-aedat.
          <lfs_schedule_lines>-ms_date = ls_ekpo_detail-aedat.
        ELSE.
          CLEAR : lt_schedule.
          "Populates schedule lines itab with line number
          lt_schedule = VALUE #( ( itm_number = ls_so_items-itm_number
                                   sched_line = ls_vbep-sched_line
*                                 req_date = ls_ekpo_detail-aedat ) ).
                                   ms_date = ls_ekpo_detail-aedat ) ).
          APPEND LINES OF lt_schedule TO gt_schedule_lines.
        ENDIF.

        READ TABLE gt_schedule_linesx ASSIGNING <lfs_schedule_linesx>
                                     WITH KEY itm_number = ls_so_items-itm_number
                                              sched_line = ls_vbep-sched_line.
        IF sy-subrc IS INITIAL.
          <lfs_schedule_linesx>-updateflag = gc_u.
*        <lfs_schedule_linesx>-req_date = abap_true.
          <lfs_schedule_linesx>-ms_date = abap_true.
        ELSE.
          CLEAR : lt_schedulex.
          "Populates schedule lines itab with line number
          lt_schedulex = VALUE #( ( itm_number = ls_so_items-itm_number
                                    sched_line = ls_vbep-sched_line
                                    updateflag = gc_u
*                                  req_date = abap_true ) ).
                                    ms_date = abap_true ) ).
          APPEND LINES OF lt_schedulex TO gt_schedule_linesx.
        ENDIF.
      ENDIF.

    ELSE.
      "Populate error structure and return
      es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                           message =  | { TEXT-005 } { gv_so_num } | ).
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      RETURN.
    ENDIF.

  ENDLOOP.

  IF lv_return EQ abap_true.
    RETURN.
  ENDIF.

**  Begin of change for CR 1203 / 997 by 24086849 on 2 Sep 2020
  "Seperately filling the item
  IF gv_update_so_partner IS NOT INITIAL.
    READ TABLE gt_popartner INTO DATA(ls_partner) WITH KEY partnerdesc = gc_sf.
    SELECT SINGLE lifnr, land1, adrnr FROM lfa1 INTO @DATA(ls_lfa1) WHERE lifnr = @ls_partner-buspartno.
    IF sy-subrc = 0.
      LOOP AT gt_ekkn INTO ls_ekkn.
        IF line_exists( gt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ] ).
          ls_so_items = gt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ].
          "Updating partner function with IDOC value
          READ TABLE gt_so_partner INTO DATA(ls_so_partner) WITH KEY itm_number = ls_so_items-itm_number
                                                                     partn_role = gv_dbs_so_sf.
          IF sy-subrc = 0.
            ls_so_partner_upd-document = ls_so_partner-sd_doc.
            ls_so_partner_upd-itm_number = ls_so_partner-itm_number.
            ls_so_partner_upd-updateflag = gc_u.
            ls_so_partner_upd-partn_role = ls_so_partner-partn_role.
            ls_so_partner_upd-p_numb_old = ls_so_partner-vendor_no.
            ls_so_partner_upd-p_numb_new = ls_partner-buspartno.
            ls_so_partner_upd-address = ls_lfa1-adrnr.
            APPEND ls_so_partner_upd TO lt_so_partner_upd.
            CLEAR:ls_so_partner_upd.
          ELSE.
            ls_so_partner_upd-document   = ls_so_items-doc_number.
            ls_so_partner_upd-itm_number = ls_so_items-itm_number.
            ls_so_partner_upd-updateflag = gc_i.
            ls_so_partner_upd-partn_role = gv_dbs_so_sf.
            ls_so_partner_upd-p_numb_new = ls_partner-buspartno.
            ls_so_partner_upd-address    = ls_lfa1-adrnr.
            APPEND ls_so_partner_upd TO lt_so_partner_upd.
            CLEAR:ls_so_partner_upd.
          ENDIF.
          "populate item tables to pass to BAPI with new shipping point
          IF NOT line_exists( gt_order_item_in_c[ itm_number = ls_so_items-itm_number ] ).

            ls_order_item_in_c = VALUE bapisditm(  itm_number = ls_so_items-itm_number  ).
            READ TABLE gt_tvarvc INTO DATA(ls_tvarvc) WITH KEY name = gc_ship_from_country
                                                               low  = ls_lfa1-land1.
            IF sy-subrc = 0.
              ls_order_item_in_c-ship_point = ls_tvarvc-high.
              IF NOT line_exists( gt_order_item_inx_c[ itm_number = ls_so_items-itm_number ] ).
                ls_order_item_inx_c = VALUE bapisditmx( itm_number = ls_so_items-itm_number
                                                 updateflag = gc_u ) .
                ls_order_item_inx_c-ship_point = abap_true.

                APPEND ls_order_item_inx_c TO gt_order_item_inx_c.
                CLEAR ls_order_item_inx_c.

                APPEND ls_order_item_in_c TO gt_order_item_in_c.
                CLEAR ls_order_item_in_c.
              ENDIF.
            ENDIF.
          ELSE.
            READ TABLE gt_order_item_in_c ASSIGNING FIELD-SYMBOL(<lfs_order_item>) WITH KEY itm_number = ls_so_items-itm_number.
            IF sy-subrc = 0 AND  <lfs_order_item> IS ASSIGNED.
              READ TABLE gt_tvarvc INTO ls_tvarvc WITH KEY name = gc_ship_from_country
                                                           low  = ls_lfa1-land1.
              IF sy-subrc = 0.
                <lfs_order_item>-ship_point = ls_tvarvc-high.
                READ TABLE gt_order_item_inx_c ASSIGNING FIELD-SYMBOL(<lfs_order_itemx>) WITH KEY itm_number = ls_so_items-itm_number.
                IF sy-subrc = 0 AND  <lfs_order_itemx> IS ASSIGNED.
                  IF sy-subrc = 0.
                    <lfs_order_itemx>-ship_point = abap_true.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
**  End of change for CR 1203 / 997 by 24086849 on 2 Sep 2020

**  Begin of CR_1839 by 24093780 on 11/18/2020
  "Seperately filling the item
  IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                               low  = abap_true ] ).
    "IF gv_update_so_partner_lsp is not initial  it means SO header is changed with LSP data
    IF gv_update_so_partner_lsp IS NOT INITIAL.
      CLEAR ls_partner.
      "Fetch Partner function from TVARVC for IDOC dta XF to relevant maping PL in SAP
      DATA(lv_parvw) = COND #( WHEN line_exists( gt_pm_1058_lsp[ low = lc_xf ] )
                               THEN gt_pm_1058_lsp[ low = lc_xf ]-high
                               ELSE lc_pl ).
      TRY.
          ls_partner = gt_popartner_lsp[ partnerdesc = lv_parvw ].

        CATCH cx_sy_itab_line_not_found.
          CLEAR ls_partner.
      ENDTRY.

      LOOP AT gt_ekkn INTO ls_ekkn.
        IF line_exists( gt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ] ).
          ls_so_items = gt_so_items[ doc_number = ls_ekkn-vbeln itm_number = ls_ekkn-vbelp ].
          "Updating partner function with IDOC value
          IF line_exists( gt_so_partner[ sd_doc = ls_so_items-doc_number partn_role = lc_pl ]  ) .
            CLEAR ls_so_partner.
            ls_so_partner = gt_so_partner[ sd_doc = ls_so_items-doc_number partn_role = lc_pl ].
            " Populate lt_so_partner_upd_tmp for New vendor / Customer details
            APPEND INITIAL LINE TO lt_so_partner_upd_tmp ASSIGNING FIELD-SYMBOL(<lfs_so_partner_upd>).
            <lfs_so_partner_upd> = VALUE bapiparnrc( document = ls_so_partner-sd_doc
                                                     updateflag = gc_u
                                                     partn_role = ls_so_partner-partn_role
                                                     p_numb_old =
                                                     COND #( WHEN ls_so_partner-customer IS NOT INITIAL
                                                             THEN ls_so_partner-customer
                                                             ELSE ls_so_partner-vendor_no )
                                                     p_numb_new = ls_partner-buspartno ).
            ENDIF.

        ENDIF.
      ENDLOOP.
      SORT lt_so_partner_upd_tmp ASCENDING BY document.
      DELETE ADJACENT DUPLICATES FROM lt_so_partner_upd_tmp COMPARING document.

      "Append temporary internal table lt_so_partner_upd_tmp to lt_so_partner_upd to pass it to BAPI ZPTP_I1058_ORDCHG
      APPEND LINES OF lt_so_partner_upd_tmp TO lt_so_partner_upd.
      CLEAR lt_so_partner_upd_tmp[].

    ENDIF.
  ENDIF.

**  End of CR_1839 by 24093780 on 11/18/2020

  gs_order_header_inx-updateflag = gc_u.
  CLEAR lt_return_c.
  CALL FUNCTION 'DEQUEUE_EVVBAKE'
    EXPORTING
      mode_vbak = 'E'
      mandt     = sy-mandt
      vbeln     = gv_so_num
      _scope    = '3'
      _synchron = 'X'
      _collect  = ' '.
  IF zptpcl_i1058_ordchg=>gv_idoc_err <> abap_true.
    CALL FUNCTION 'ZPTP_I1058_ORDCHG' DESTINATION 'NONE'
      EXPORTING
        iv_so_num           = gv_so_num
        is_order_header_inx = gs_order_header_inx
      TABLES
        it_return_so        = lt_return_c
        it_order_item_in_c  = gt_order_item_in_c
        it_order_item_inx_c = gt_order_item_inx_c
        it_schedule_lines   = gt_schedule_lines
        it_schedule_linesx  = gt_schedule_linesx
        it_order_text       = lt_order_text
        it_partnerchanges   = lt_so_partner_upd.  "Added for CR 997 by 24086849 on 8/31/2020

    "check change sucessful
    IF line_exists( lt_return_c[ type = if_mrm_constants=>gc_msgty_e ] ) OR line_exists( lt_return_c[ type = if_mrm_constants=>gc_msgty_a ] ).
      IF line_exists( lt_return_c[ type = if_mrm_constants=>gc_msgty_e ] ).
        DATA(ls_err) = lt_return_c[ type = if_mrm_constants=>gc_msgty_e ].
      ENDIF.
      IF line_exists( lt_return_c[ type = if_mrm_constants=>gc_msgty_a ] ).
        DATA(ls_aber) = lt_return_c[ type = if_mrm_constants=>gc_msgty_a ].
      ENDIF.

      IF ls_err IS NOT INITIAL.
        es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                             message =  | { ls_err-message } { gv_so_num } | ).
      ENDIF.
      IF ls_aber IS NOT INITIAL.
        es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                             message =  | { ls_aber-message } { gv_so_num } | ).
      ENDIF.

      LOOP AT lt_return_c INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_e OR type = if_mrm_constants=>gc_msgty_a.
        DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idco_number
                                               status  = 51
                                               msgty  = ls_err-type
                                               msgid  = ls_err-id
                                               msgno  = ls_err-number
                                               msgv1  = ls_err-message_v1
                                               msgv2  = ls_err-message_v2
                                               msgv3  = ls_err-message_v3
                                               msgv4  = ls_err-message_v4
                                               repid  = sy-repid
                                               ).

        APPEND ls_idoc_status TO ct_idoc_status.
      ENDLOOP.

      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.

      CALL FUNCTION 'DEQUEUE_ALL'
        EXPORTING
          _synchron = 'X'.
      RETURN.
    ELSE.
      CALL METHOD me->check_so_po_qty_ddt_equal
        EXPORTING
          it_ekpo_detail           = it_ekpo_detail
        IMPORTING
          et_ekpo_detail_equal     = DATA(lt_ekpo_detail_equal)
          et_ekpo_detail_not_equal = DATA(lt_ekpo_detail_not_equal).

** If All fileds are updated in PO consider those lines
      IF lt_ekpo_detail_equal IS NOT INITIAL.
        DATA(lt_ekpo_tmp) = lt_ekpo_detail_equal.
** Delete Where ABGRU update is not required.
        DELETE lt_ekpo_tmp WHERE abgru IS INITIAL.
** Cosider the lines for which ABGRU need to be updated.
*        IF lt_ekpo_tmp IS NOT INITIAL.
**   Getting line item which delivery complete flag needs to be updated
        DATA(lt_ekpo_item_del_comp) = lt_ekpo_detail_equal.
        DELETE lt_ekpo_item_del_comp WHERE cmpt_del_flg IS INITIAL.

        IF lt_ekpo_item_del_comp[] IS NOT INITIAL.
**        Update Delivery compelted DCI INDICATOR = ABAP_TRUE
          CALL METHOD me->update_delivery_complete_po
            EXPORTING
              it_ekpo_detail = lt_ekpo_item_del_comp
            IMPORTING
              et_poitem      = DATA(lt_poitem_dci)
              et_poitemx     = DATA(lt_poitemx_dci)
              et_return      = DATA(lt_ret_upd_po).
        ENDIF.

*       Begin of CR_1839 by 24093780
        IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                     low  = abap_true ] ).
          IF lt_ekpo_detail_dci IS NOT INITIAL.
            "Update Delivery compelted DCI INDICATOR as space
            CLEAR lt_ret_upd_po.
            CALL METHOD me->update_delivery_dci_incomplete
              EXPORTING
                it_ekpo_detail = lt_ekpo_detail_dci
              IMPORTING
                et_poitem      = DATA(lt_poitem_dci_inc)
                et_poitemx     = DATA(lt_poitemx_dci_inc)
                et_return      = lt_ret_upd_po.
            IF lt_poitem_dci_inc IS NOT INITIAL.
              APPEND LINES OF lt_poitem_dci_inc TO lt_poitem_dci.
            ENDIF.
            IF lt_poitemx_dci_inc IS NOT INITIAL.
              APPEND LINES OF lt_poitemx_dci_inc TO lt_poitemx_dci.
            ENDIF.
          ENDIF.
        ENDIF.
* End of CR_1839 by 24093780

        "Call method update_simple_change_flag to save Simple Change Flag
*  Update Line item Text
*  DELETE lt_ekpo_detail_equal WHERE abgru IS NOT INITIAL.
        DATA:lt_potextitem       TYPE STANDARD TABLE OF bapimepotext.
        CLEAR lt_potextitem.
        LOOP AT lt_ekpo_detail_equal ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail>).
          IF <lfs_ekpo_detail>-smp_flag IS NOT INITIAL.
            IF NOT line_exists( lt_potextitem[ po_number = <lfs_ekpo_detail>-ebeln
                                               po_item =  <lfs_ekpo_detail>-ebelp
                                               text_id =  gs_save_text-gc_tdid_f48
                                               text_line =  <lfs_ekpo_detail>-smp_flag ] ).
              DATA(ls_potextitem) = VALUE bapimepotext( po_number = <lfs_ekpo_detail>-ebeln
                                                    po_item =  <lfs_ekpo_detail>-ebelp
                                                    text_id =  gs_save_text-gc_tdid_f48
                                                    text_line =  <lfs_ekpo_detail>-smp_flag ).
              APPEND ls_potextitem TO lt_potextitem.

              DATA(ls_bapimepotext_tmp) =  CORRESPONDING bapimepotext( ls_potextitem ).
              "FETCH PO Line ITEM Dummy TEXT ID FROM TVARVC
              TRY.
                  ls_bapimepotext_tmp-text_id = gt_pm_po_text[ low = lc_poitem_textid ]-high.
                CATCH cx_sy_itab_line_not_found.
                  CLEAR ls_bapimepotext_tmp-text_id.
              ENDTRY.

              ls_bapimepotext_tmp-text_line = |{ sy-datum }| && |{ sy-uzeit }|.
              APPEND ls_bapimepotext_tmp TO lt_potextitem.

              CLEAR ls_potextitem.
            ENDIF.
          ENDIF.
          IF <lfs_ekpo_detail>-smp_addtnl IS NOT INITIAL.
            IF NOT line_exists( lt_potextitem[ po_number = <lfs_ekpo_detail>-ebeln
                                               po_item =  <lfs_ekpo_detail>-ebelp
                                               text_id =  gs_save_text-gc_tdid_f49 ] ).
              ls_potextitem = VALUE bapimepotext( po_number = <lfs_ekpo_detail>-ebeln
                                   po_item =  <lfs_ekpo_detail>-ebelp
                                   text_id =  gs_save_text-gc_tdid_f49
                                   text_line =  <lfs_ekpo_detail>-smp_addtnl ).
              APPEND ls_potextitem TO lt_potextitem.CLEAR ls_potextitem.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF lt_potextitem IS NOT INITIAL OR lt_poitem_dci IS NOT INITIAL.
          DATA(lv_call_count) = iv_call_count.
          IF gv_header_item_change IS NOT INITIAL AND iv_call_count IS NOT INITIAL.
            CLEAR: lv_call_count.
          ENDIF.
*        call bapi to update texts
*          CALL METHOD me->update_po_line_item_texts
*            EXPORTING
*              it_bapimepotext = lt_potextitem.

          CALL FUNCTION 'ZPTP_I1058_ORDCHG_PO'
            DESTINATION 'NONE '
            EXPORTING
              iv_po_num           = gv_po_num
              iv_bapi_call_count  = lv_call_count "Added by 24072555 on 29th Aug 2020
            TABLES
              it_return_po_change = lt_return_new
              it_poitem           = lt_poitem_dci
              it_poitemx          = lt_poitemx_dci
              it_potextitem       = lt_potextitem.
          IF lt_return_new IS NOT INITIAL .
            APPEND LINES OF lt_return_new TO lt_ret_upd_po.
          ENDIF.
        ENDIF.

        LOOP AT lt_return_c INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_s.
          CLEAR ls_idoc_status.
          ls_idoc_status = VALUE bdidocstat( docnum = gv_idco_number
                                                 status  = 53
                                                 msgty  = ls_err-type
                                                 msgid  = ls_err-id
                                                 msgno  = ls_err-number
                                                 msgv1  = ls_err-message_v1
                                                 msgv2  = ls_err-message_v2
                                                 msgv3  = ls_err-message_v3
                                                 msgv4  = ls_err-message_v4
                                                 repid  = sy-repid
                                                 ).

          APPEND ls_idoc_status TO ct_idoc_status.
        ENDLOOP.

        CALL FUNCTION 'DEQUEUE_ALL'.
        es_return = VALUE #( type = if_mrm_constants=>gc_msgty_s
                             message =  | { TEXT-009 } { gv_po_num } | ).
      ENDIF.
      IF lt_ekpo_detail_not_equal IS NOT INITIAL OR gv_header_item_change IS NOT INITIAL
                    OR zptpcl_i1058_ordchg=>gv_update_so_partner IS NOT INITIAL "Added for CR# 997 by 24086849 on 8/31/2020
                    OR zptpcl_i1058_ordchg=>gv_update_so_partner_lsp IS NOT INITIAL. "Added for CR_1839 by 24093780 on 1/19/2020
        "Added below check because if item changes are updating seperately then outbound IDOC should be triggered in the last
        DATA(lt_ekpo_detail_po) = zptpcl_i1058_ordchg=>gt_ekpo_detail.
        DELETE lt_ekpo_detail_po WHERE ctyp IN zptpcl_i1058_ordchg=>gr_start_from_so.
        IF lt_ekpo_detail_po IS INITIAL.
          zptpcl_i1058_ordchg=>gv_bapi_call_count = abap_true." Added by 24072555 on 29th Aug 2020
        ENDIF.


**      Begin of CR_1839 by 24093780 on 11/19/2020
*       TVARVC for FEB objects
        IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                     low  = abap_true ] ).
          "Flag for LSP partner update in SO
          IF zptpcl_i1058_ordchg=>gv_update_so_partner_lsp IS NOT INITIAL.
            "Check if EKKN data exists to fetch ADDRESS data from VBPA
            IF gt_ekkn[] IS NOT INITIAL.
              SELECT DISTINCT vbeln, "SO
                     adrnr  "Address
                FROM vbpa
                INTO TABLE @DATA(lt_adrnr)
                FOR ALL ENTRIES IN @gt_ekkn
                WHERE vbeln = @gt_ekkn-vbeln
                AND   parvw = @lv_parvw.
              IF sy-subrc EQ 0.
                "Loop around all the line items in PO to populate lt_ekpo_detail_not_equal with CHANGE TYPE CTYP - LSP and ADRNR
                LOOP AT gt_ekkn INTO ls_ekkn.
                  DATA(lv_adrnr) = VALUE #( lt_adrnr[ vbeln = ls_ekkn-vbeln ]-adrnr DEFAULT space  ) .
                  APPEND INITIAL LINE TO lt_ekpo_detail_not_equal ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail_tmp>).
                  <lfs_ekpo_detail_tmp> = VALUE gty_ekpo_detail( ebeln = gv_po_num
                                           ebelp = ls_ekkn-ebelp
                                           adrnr = lv_adrnr
                                           ctyp  = lc_lsp
                                           smp_flag = VALUE #( gt_pm_1839_item_smp[ low = lc_lsp ]-high DEFAULT lc_y ) ).
                  " lt_ekpo_detail_not_equal will be passed in the existing method update_po_line_items to update ADRNR details
                ENDLOOP.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
**      End of CR_1839 by 24093780 on 11/19/2020

        CALL METHOD me->update_po_line_items
          EXPORTING
            it_ekpo_detail = lt_ekpo_detail_not_equal
            iv_call_count  = zptpcl_i1058_ordchg=>gv_bapi_call_count " Added by 24072555 on 29th Aug 2020
          IMPORTING
            es_return      = DATA(ls_return)
            et_return      = DATA(lt_return)                 " Table type for structure BAPIRET1
          CHANGING
            ct_idoc_status = ct_idoc_status.

      ENDIF.
      es_return = ls_return.
    ENDIF.
  ENDIF.
ENDMETHOD.
ENDCLASS.

FUNCTION zptp_i1058_ordchg_upd_po.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  TABLES
*"      IDOC_CONTRL STRUCTURE  EDIDC
*"      IDOC_DATA STRUCTURE  EDIDD
*"      IDOC_STATUS STRUCTURE  BDIDOCSTAT
*"----------------------------------------------------------------------

**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Include           :  ZPTPI1058_ORDCHNG_UPD_PO                         *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  07/10/2020                                       *
*  Object ID         :  PTPI1058                                         *
*  Business Contact  :  Dhinesh Kulaseharan                              *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Update PO with data from E2OPEN                  *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Change ID | Date       | Request #  | Changed By   | Description      *
*&-----------------------------------------------------------------------*
**& CR#1203   28/08/2020   S4DK914229   24086849     Price change for ZMZP
** CR997
** CR_1839    26/11/2020   S4DK949398   24093840    Additional Mapping for
**                                                  existing ORDCHG
*&-----------------------------------------------------------------------*
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& INCLUDE ZPTPI1058_ORDCHNG_UPD_PO
**&----------------------------------------------------------------------*
  "Utility class for I1058
  DATA(lrf_update_po) = NEW zptpcl_i1058_ordchg( ).

  DATA:ls_ekpo_split_temp TYPE lrf_update_po->gty_ekpo_detail,
       lv_memory_1059     TYPE char20,
       lt_ekpo_split_temp TYPE STANDARD TABLE OF lrf_update_po->gty_ekpo_detail.
  " Local data declarations
  CONSTANTS:lc_msgid       TYPE bdidocstat-msgid VALUE 'ZPTP_1058',
            lc_msgno_001   TYPE sy-msgno         VALUE '001',
            lc_msgno_002   TYPE sy-msgno         VALUE '002',
            lc_idoc_error  TYPE edi_ds-status VALUE '51',
            lc_idoc_sucess TYPE edi_ds-status VALUE '53',
            lc_ptp_1059    TYPE c LENGTH 9 VALUE 'ZPTP_1059'.



  "Copy IDOC_DATA to tempory table
  CLEAR: zptpcl_i1058_ordchg=>gv_idoc_err, zptpcl_i1058_ordchg=>gv_bapi_call_count.
  zptpcl_i1058_ordchg=>gt_idoc_data = idoc_data[].

  IF line_exists( idoc_contrl[ 1 ] ).
    DATA(ls_idoc_status) = idoc_contrl[ 1 ].
    zptpcl_i1058_ordchg=>gv_idco_number = ls_idoc_status-docnum.
  ENDIF.

***************************************************************************
  "Set global variables
***************************************************************************
  lrf_update_po->set_data( ).

  "Always use dynamic memory id.
  "Export to program "RV61B964"
  CONCATENATE zptpcl_i1058_ordchg=>gv_po_num lc_ptp_1059 INTO lv_memory_1059.
  EXPORT zptpcl_i1058_ordchg=>gt_idoc_data TO DATABASE indx(zk) ID lv_memory_1059. " Added by IDOC_INPUT_ORDCHG to capture IDOC DATA in PTPI1059

  "Check for error
  IF zptpcl_i1058_ordchg=>gs_return-type EQ if_mrm_constants=>gc_msgty_e.
    "Update IDOC status here
    IF line_exists( idoc_contrl[ 1 ] ).
      idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
      idoc_status-status = lc_idoc_error.
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      idoc_status-msgty  = if_mrm_constants=>gc_msgty_e.
      idoc_status-repid  = sy-repid.
      idoc_status-msgid  = lc_msgid.
      IF zptpcl_i1058_ordchg=>gs_return-number IS NOT INITIAL.
        idoc_status-msgno  = zptpcl_i1058_ordchg=>gs_return-number.
        idoc_status-msgv1  = zptpcl_i1058_ordchg=>gs_return-message_v1.
      ELSE.
        idoc_status-msgno  = lc_msgno_001.
        idoc_status-msgv1  = zptpcl_i1058_ordchg=>gs_return-message.
      ENDIF.
      APPEND idoc_status.
      RETURN.
    ENDIF.
  ENDIF.

***************************************************************************************
  "Changes to be made in header and populate Item Table
***************************************************************************************
  lrf_update_po->fetch_item_header_indicators(  IMPORTING es_return = DATA(ls_return) ).
  IF ls_return-type EQ if_mrm_constants=>gc_msgty_e .
    "Update IDOC status here
    IF line_exists( idoc_contrl[ 1 ] ).
      idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
      idoc_status-status = lc_idoc_error.
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      idoc_status-msgty  = if_mrm_constants=>gc_msgty_e.
      idoc_status-msgv1  = ls_return-message_v1.
      IF ls_return-message_v2 IS NOT INITIAL.
        idoc_status-msgv1  = zptpcl_i1058_ordchg=>gv_po_num.
        idoc_status-msgv2  = ls_return-message_v2.
      ENDIF.
      idoc_status-repid  = sy-repid.
      idoc_status-msgid  = lc_msgid.
      IF ls_return-number IS INITIAL.
        idoc_status-msgno  = lc_msgno_001.
      ELSE.
        idoc_status-msgno  = ls_return-number.
      ENDIF.
      APPEND idoc_status.
    ENDIF.
  ENDIF.

*******************************************************************************
*Update PO header
*******************************************************************************
*Check for header level changes
  IF zptpcl_i1058_ordchg=>gv_only_header_change IS NOT INITIAL AND zptpcl_i1058_ordchg=>gv_idoc_err <> abap_true
       AND zptpcl_i1058_ordchg=>gv_update_so_partner IS INITIAL. "Added for CR1203/997 by 24086849 on 8/31/2020
    "Call method to uupdate header
    zptpcl_i1058_ordchg=>gv_bapi_call_count = abap_true. "Added by 24072555 on 29th Aug 2020
    lrf_update_po->update_po_header( EXPORTING iv_call_count = zptpcl_i1058_ordchg=>gv_bapi_call_count"Added by 24072555 on 29th Aug 2020
                                     IMPORTING es_return = ls_return
                                     CHANGING ct_idoc_status = idoc_status[] ).
    "Check for return messges
    IF ls_return-type EQ if_mrm_constants=>gc_msgty_e.
      "Update IDOC status here
      IF line_exists( idoc_contrl[ 1 ] ).
        idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
        idoc_status-status = lc_idoc_error.
        zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
        idoc_status-msgty  = if_mrm_constants=>gc_msgty_e.
        idoc_status-msgv1  = ls_return-message_v1.
        IF ls_return-message_v2 IS NOT INITIAL.
          idoc_status-msgv1  = zptpcl_i1058_ordchg=>gv_po_num.
          idoc_status-msgv2  = ls_return-message_v2.
        ENDIF.
        idoc_status-repid  = sy-repid.
        idoc_status-msgid  = lc_msgid.
        IF ls_return-number IS INITIAL.
          idoc_status-msgno  = lc_msgno_001.
        ELSE.
          idoc_status-msgno  = ls_return-number.
        ENDIF.
        APPEND idoc_status.
      ENDIF.
    ELSEIF ls_return-type EQ if_mrm_constants=>gc_msgty_s.
      "Update IDOC status here
      IF line_exists( idoc_contrl[ 1 ] ).
        idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
        idoc_status-status = lc_idoc_sucess.
        idoc_status-msgty  = if_mrm_constants=>gc_msgty_s.
        idoc_status-msgv1  = ls_return-message.
        idoc_status-repid  = sy-repid.
        idoc_status-msgid  = lc_msgid.
        idoc_status-msgno  = lc_msgno_002.
        APPEND idoc_status.
      ENDIF.
    ENDIF.
    "If only header changes were made
    RETURN.
  ENDIF.

  "Proceed only if there are item level change
  IF zptpcl_i1058_ordchg=>gt_ekpo_detail IS NOT INITIAL
     OR zptpcl_i1058_ordchg=>gv_update_so_partner IS NOT INITIAL. "Added for CR# 997 by 24086849 on 8/31/2020
    "PSP and OSP are split condition
    DATA(lt_ekpo_detail) = zptpcl_i1058_ordchg=>gt_ekpo_detail.

    DATA(lt_ekpo_detail_split) = lt_ekpo_detail.

    DELETE lt_ekpo_detail_split WHERE ctyp NE zptpcl_i1058_ordchg=>gc_psp
                                  AND ctyp NE zptpcl_i1058_ordchg=>gc_osp.
    LOOP AT lt_ekpo_detail_split ASSIGNING FIELD-SYMBOL(<lfs_detail_split>).
      IF line_exists( lt_ekpo_detail[ ctyp =  zptpcl_i1058_ordchg=>gc_lt1 ebelp = <lfs_detail_split>-ebelp idoc_line = <lfs_detail_split>-idoc_line ] ).
        <lfs_detail_split>-lt1_text = lt_ekpo_detail[ ctyp =  zptpcl_i1058_ordchg=>gc_lt1 ebelp = <lfs_detail_split>-ebelp  ]-lt1_text.
      ENDIF.
    ENDLOOP.

    IF lt_ekpo_detail_split IS NOT INITIAL.
      SORT lt_ekpo_detail_split BY ebeln ebelp.
      DESCRIBE TABLE lt_ekpo_detail_split LINES DATA(lv_line_count).
      LOOP AT lt_ekpo_detail_split ASSIGNING FIELD-SYMBOL(<lfs_ekpo_detail_split>).
        DATA(lv_tabix) = sy-tabix.
        ls_ekpo_split_temp = <lfs_ekpo_detail_split>.
        APPEND ls_ekpo_split_temp TO lt_ekpo_split_temp.
        IF lv_tabix LT lv_line_count.
          READ TABLE lt_ekpo_detail_split ASSIGNING FIELD-SYMBOL(<lfs>) INDEX ( lv_tabix + 1 ).
          IF <lfs> IS ASSIGNED .
            IF <lfs>-ebelp <> ls_ekpo_split_temp-ebelp.
              lrf_update_po->update_po_split(
                                EXPORTING
                             it_ekpo_detail = lt_ekpo_split_temp
                                IMPORTING
                             es_return = ls_return
                                CHANGING
                         ct_idoc_status = idoc_status[] ).
              CLEAR lt_ekpo_split_temp.
              IF ls_return-type EQ if_mrm_constants=>gc_msgty_e .
                "Update IDOC status here
                IF line_exists( idoc_contrl[ 1 ] ).
                  idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
                  idoc_status-status = lc_idoc_error.
                  zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
                  idoc_status-msgty  = if_mrm_constants=>gc_msgty_e.
                  idoc_status-msgv1  = ls_return-message_v1.
                  IF ls_return-message_v2 IS NOT INITIAL.
                    IF idoc_status-msgv1 IS INITIAL.
                      idoc_status-msgv1  = zptpcl_i1058_ordchg=>gv_po_num.
                    ENDIF.
                    idoc_status-msgv2  = ls_return-message_v2.
                  ENDIF.
                  idoc_status-repid  = sy-repid.
                  idoc_status-msgid  = lc_msgid.
                  IF ls_return-number IS INITIAL.
                    idoc_status-msgno  = lc_msgno_001.
                  ELSE.
                    idoc_status-msgno  = ls_return-number.
                  ENDIF.
                  APPEND idoc_status.
                ENDIF.
              ELSEIF ls_return-type EQ if_mrm_constants=>gc_msgty_s.
                "Update IDOC status here
                IF line_exists( idoc_contrl[ 1 ] ).
                  idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
                  idoc_status-status = lc_idoc_sucess.
                  idoc_status-msgty  = if_mrm_constants=>gc_msgty_s.
                  idoc_status-msgv1  = ls_return-message.
                  idoc_status-repid  = sy-repid.
                  idoc_status-msgid  = lc_msgid.
                  idoc_status-msgno  = lc_msgno_002.
                  APPEND idoc_status.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ELSE.
          zptpcl_i1058_ordchg=>gv_bapi_call_count = abap_true. "Added by 24072555 on 29th Aug 2020
          lrf_update_po->update_po_split(
                      EXPORTING
                        it_ekpo_detail = lt_ekpo_split_temp
                        iv_call_count = zptpcl_i1058_ordchg=>gv_bapi_call_count" Added by 24072555 on 29th Aug 2020
                     IMPORTING
                       es_return = ls_return
                     CHANGING
                       ct_idoc_status = idoc_status[] ).
          CLEAR lt_ekpo_split_temp.

          IF ls_return-type EQ if_mrm_constants=>gc_msgty_e .
            "Update IDOC status here
            IF line_exists( idoc_contrl[ 1 ] ).
              idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
              idoc_status-status = lc_idoc_error.
              zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
              idoc_status-msgty  = if_mrm_constants=>gc_msgty_e.
              idoc_status-msgv1  = ls_return-message_v1.
              IF ls_return-message_v2 IS NOT INITIAL.
                IF idoc_status-msgv1 IS INITIAL.
                  idoc_status-msgv1  = zptpcl_i1058_ordchg=>gv_po_num.
                ENDIF.
                idoc_status-msgv2  = ls_return-message_v2.
              ENDIF.
              idoc_status-repid  = sy-repid.
              idoc_status-msgid  = lc_msgid.
              IF ls_return-number IS INITIAL.
                idoc_status-msgno  = lc_msgno_001.
              ELSE.
                idoc_status-msgno  = ls_return-number.
              ENDIF.
              APPEND idoc_status.
            ENDIF.
          ELSEIF ls_return-type EQ if_mrm_constants=>gc_msgty_s.
*            UPDATE idoc status here
            IF line_exists( idoc_contrl[ 1 ] ).
              idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
              idoc_status-status = lc_idoc_sucess.
              idoc_status-msgty  = if_mrm_constants=>gc_msgty_s.
              idoc_status-msgv1  = ls_return-message.
              idoc_status-repid  = sy-repid.
              idoc_status-msgid  = lc_msgid.
              idoc_status-msgno  = lc_msgno_002.
              APPEND idoc_status.
            ENDIF.
          ENDIF.

        ENDIF.
      ENDLOOP.
***************************************************************************************************
*Update PO Split Scenario
***************************************************************************************************
*      ENDLOOP.
    ENDIF.
*  ELSE.
** Split scenario is handled in above logic so exclude those items.
*BOC by 24072555 on 29th Aug 2020
    IF line_exists( lt_ekpo_detail[ ctyp =  zptpcl_i1058_ordchg=>gc_psp ] ).
      CLEAR lt_ekpo_detail.
    ELSEIF line_exists( lt_ekpo_detail[ ctyp =  zptpcl_i1058_ordchg=>gc_osp ] ).
      CLEAR lt_ekpo_detail.
    ENDIF.
*    DELETE lt_ekpo_detail WHERE ( ctyp EQ zptpcl_i1058_ordchg=>gc_psp
*                             OR ctyp EQ zptpcl_i1058_ordchg=>gc_osp ).
*EOC by 24072555 on 29th Aug 2020
    DATA(lt_ekpo_detail_so) = lt_ekpo_detail.
    DELETE lt_ekpo_detail_so WHERE ctyp NOT IN zptpcl_i1058_ordchg=>gr_start_from_so.
    DATA(lt_ekpo_detail_po) = lt_ekpo_detail.
    DELETE lt_ekpo_detail_po WHERE ctyp IN zptpcl_i1058_ordchg=>gr_start_from_so.
*BOC by 24072555 on 29th Aug 2020
*If there is no separate PO changes then this will be final BAPI call for PO changes, so set final BAPI call flag
    IF lt_ekpo_detail_so IS NOT INITIAL AND lt_ekpo_detail_po IS INITIAL.
      zptpcl_i1058_ordchg=>gv_bapi_call_count = abap_true.
    ENDIF.
*EOC by 24072555 on 29th Aug 2020
    IF lt_ekpo_detail_so IS NOT INITIAL
      OR zptpcl_i1058_ordchg=>gv_update_so_partner IS NOT INITIAL. "Added for CR# 997 by 24086849 on 8/31/2020
***************************************************************************************************
*Update SO Line item based on Starting from SO Scenario
***************************************************************************************************
      CALL METHOD lrf_update_po->update_so_line_item
        EXPORTING
          it_ekpo_detail = lt_ekpo_detail_so
          iv_call_count  = zptpcl_i1058_ordchg=>gv_bapi_call_count " Added by 24072555 on 29th Aug 2020
        IMPORTING
          es_return      = ls_return
        CHANGING
          ct_idoc_status = idoc_status[].

      IF ls_return-type = if_mrm_constants=>gc_msgty_e.
        IF ls_return-id IS INITIAL.
          ls_return-id = lc_msgid.
        ENDIF.
        IF ls_return-number IS INITIAL.
          ls_return-number = lc_msgno_001.
        ENDIF.
        DATA(ls_idoc_stat) = VALUE bdidocstat( docnum = zptpcl_i1058_ordchg=>gv_idco_number
                                              status  = 51
                                              msgty  = ls_return-type
                                              msgid  = ls_return-id
                                              msgno  = ls_return-number
                                              msgv1  = ls_return-message_v1
                                              msgv2  = ls_return-message_v2
                                              msgv3  = ls_return-message_v3
                                              msgv4  = ls_return-message_v4
                                              repid  = sy-repid
                                                       ).

        APPEND ls_idoc_stat TO idoc_status.
      ENDIF.
    ENDIF.
*    DATA(lt_ekpo_detail_po) = lt_ekpo_detail.
*    DELETE lt_ekpo_detail_po WHERE ctyp IN zptpcl_i1058_ordchg=>gr_start_from_so.
    IF lt_ekpo_detail_po IS NOT INITIAL.
      "This will always be final call for PO changes, so set final BAPI call flag as X
      zptpcl_i1058_ordchg=>gv_bapi_call_count = abap_true."Added by 24072555 on 29th Aug 2020
***************************************************************************************************
*Update PO Line item based on Starting from PO Scenario
***************************************************************************************************
      CALL METHOD lrf_update_po->update_po_line_items
        EXPORTING
          it_ekpo_detail = lt_ekpo_detail_po
          iv_call_count  = zptpcl_i1058_ordchg=>gv_bapi_call_count "Added by 24072555 on 29th Aug 2020
        IMPORTING
          es_return      = ls_return
          et_return      = DATA(lt_return_1058)                 " Table type for structure BAPIRET1
        CHANGING
          ct_idoc_status = idoc_status[].
      IF lt_return_1058 IS NOT INITIAL.
        LOOP AT lt_return_1058 ASSIGNING FIELD-SYMBOL(<lfs_return_1058>).
          IF <lfs_return_1058>-type EQ if_mrm_constants=>gc_msgty_e.
            "Update IDOC status here
            IF line_exists( idoc_contrl[ 1 ] ).
              idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
              idoc_status-status = lc_idoc_error.
              zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
              idoc_status-msgty  = if_mrm_constants=>gc_msgty_e.
              idoc_status-msgv1  = <lfs_return_1058>-message_v1.
              IF ls_return-message_v2 IS NOT INITIAL.
                idoc_status-msgv1  = zptpcl_i1058_ordchg=>gv_po_num.
                idoc_status-msgv2  = <lfs_return_1058>-message_v2.
              ENDIF.
              idoc_status-repid  = sy-repid.
              idoc_status-msgid  = lc_msgid.
              IF ls_return-number IS INITIAL.
                idoc_status-msgno  = lc_msgno_001.
              ELSE.
                idoc_status-msgno  = <lfs_return_1058>-number.
              ENDIF.
              APPEND idoc_status.
            ENDIF.
          ELSEIF <lfs_return_1058>-type EQ if_mrm_constants=>gc_msgty_s.
            "Update IDOC status here
            IF line_exists( idoc_contrl[ 1 ] ).
              idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
              idoc_status-status = lc_idoc_sucess.
              idoc_status-msgty  = if_mrm_constants=>gc_msgty_s.
              idoc_status-msgv1  = <lfs_return_1058>-message.
              idoc_status-repid  = sy-repid.
              idoc_status-msgid  = lc_msgid.
              idoc_status-msgno  = lc_msgno_002.
              APPEND idoc_status.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDIF.
***************************************************************************************************
*Clean Up
***************************************************************************************************
  lrf_update_po->clear_data( ).
*If idoc_status is empty populate it will standard error message
  IF NOT line_exists( idoc_status[ 1 ] ).
    IF line_exists( idoc_contrl[ 1 ] ).
      idoc_status-docnum = zptpcl_i1058_ordchg=>gv_idco_number.
      idoc_status-status = lc_idoc_error.
      zptpcl_i1058_ordchg=>gv_idoc_err = abap_true.
      idoc_status-msgty  = if_mrm_constants=>gc_msgty_e.
      idoc_status-msgid  = lc_msgid.
      idoc_status-msgno  = lc_msgno_001.
      idoc_status-msgv1  = zptpcl_i1058_ordchg=>gv_po_num.
      idoc_status-msgv2  = space.
      idoc_status-msgv3  = space.
      idoc_status-msgv4  = space.
      idoc_status-repid  = sy-repid.
      APPEND idoc_status.
    ENDIF.
  ELSE.
    IF line_exists( idoc_status[ status = lc_idoc_error ] ) AND
       line_exists( idoc_status[ status =  lc_idoc_sucess ] ).
      DELETE idoc_status WHERE status =  lc_idoc_sucess.
    ENDIF.
  ENDIF.
ENDFUNCTION.
