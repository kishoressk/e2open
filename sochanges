class ZOTCCL_I1084_ORDCHG definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF gty_vbep_detail,    "VBEP table to hold SPlit data
        ctyp       TYPE char10.
        INCLUDE TYPE vbep.
    TYPES: smp_flag   TYPE char10, "Updatetype complex/Simple
        smp_addtnl TYPE char10,
        zsi        TYPE char10,
        srq        TYPE char10,
        lt1_text   TYPE tdline,
        abgru      TYPE abgru,
      END OF  gty_vbep_detail .
  types:
    gtt_vbep_detail TYPE STANDARD TABLE OF gty_vbep_detail .
  types:                                            "Updatetype complex/Simple
    BEGIN OF gty_update_type,
        ctyp    TYPE char3,
        upd_typ TYPE char2,
      END OF   gty_update_type .
  types:
    gtt_update_type TYPE STANDARD TABLE OF gty_update_type .
  types:                                            "Updatetype complex/Simple
    BEGIN OF gty_vbfa,                               "VBFA
        vbelv    TYPE vbeln_von,
        posnv    TYPE posnr_von,
        vbeln    TYPE vbeln_nach,
        posnn    TYPE posnr_nach,
        abgru    TYPE abgru_va,
        smp_text TYPE char10,
      END OF gty_vbfa .
  types:
    gtt_vbfa TYPE STANDARD TABLE OF gty_vbfa .
  types:                                            "Updatetype complex/Simple
    BEGIN OF gty_ctyp,
        ctyp TYPE char10,
      END OF gty_ctyp .
  types:
    gtt_ctyp TYPE STANDARD TABLE OF gty_ctyp .
  types:                                            "Updatetype complex/Simple
    BEGIN OF gty_vbeln,
        vbeln TYPE vbeln,
      END OF   gty_vbeln .
  types:                                            "Updatetype complex/Simple
    BEGIN OF gty_ekkn_delivery,
        ebeln   TYPE ebeln,
        ebelp	  TYPE ebelp,
        addr_no TYPE ad_addrnum,
      END  OF gty_ekkn_delivery .
  types:                                            "Updatetype complex/Simple
    BEGIN OF gty_so_po_smp,
        low(1)  TYPE c,
        high(1) TYPE c,
      END OF gty_so_po_smp .
  types:                                            "Updatetype complex/Simple
    BEGIN OF gty_so_po_text,
        low(10)  TYPE c,
        high(10) TYPE c,
      END OF gty_so_po_text .
  types:                                            "Updatetype complex/Simple
* Begin of CR_1516 by 24093780 on 11/23/2020
    BEGIN OF gty_doctype,
        ctyp TYPE char4,
      END OF gty_doctype .
  types:
    gr_itemcat_doctype TYPE RANGE OF gty_doctype .

  class-data GV_CSP_LINE_ITEM type VBELN .
  class-data GV_GTS_BLOCK_EXIST type ABAP_BOOL .
  class-data GV_CHECK_GTS_BLOCK_EXIST type ABAP_BOOL .
  class-data GV_CHECK_GTS_BLOCK_SO type ABAP_BOOL .
  data:
    gt_idoc_data1      TYPE STANDARD TABLE OF edidd .
  class-data:
    gt_order_item_in      TYPE STANDARD TABLE OF bapisditm .
  class-data:
    gt_order_item_in_hoi  TYPE STANDARD TABLE OF bapisditm .
  class-data:
    gt_order_item_inx     TYPE STANDARD TABLE OF bapisditmx .
  class-data:
    gt_order_item_inx_hoi TYPE STANDARD TABLE OF bapisditmx .
  data:
    gt_potextitem      TYPE STANDARD TABLE OF bapimepotext .
  data:
    gt_delivery_address TYPE STANDARD TABLE OF bapimepoaddrdelivery .
  data:
    gt_ekkn_delivery TYPE STANDARD TABLE OF gty_ekkn_delivery .
  class-data:
    gt_pm_so_po_smp TYPE STANDARD TABLE OF gty_so_po_smp .
  class-data:
    gt_pm_po_text      TYPE STANDARD TABLE OF gty_so_po_text .
  class-data:
    gt_header_smp_flag TYPE STANDARD TABLE OF gty_so_po_text .
  data:
    gr_hoi_itemcat_doctype TYPE RANGE OF pstyv_vl .
  data:
    gt_schedule_lines      TYPE STANDARD TABLE OF bapischdl .
  data:
    gt_schedule_lines_hoi  TYPE STANDARD TABLE OF bapischdl .
  data:
    gt_schedule_linesx     TYPE STANDARD TABLE OF bapischdlx .
  data:
    gt_schedule_linesx_hoi TYPE STANDARD TABLE OF bapischdlx .
  data:
    gt_order_text      TYPE STANDARD TABLE OF bapisdtext .
  data:
    gt_order_text_hoi      TYPE STANDARD TABLE OF bapisdtext .
  data:
    gt_potextheader    TYPE STANDARD TABLE OF bapimepotextheader .
  data:
    gt_conditions_in   TYPE STANDARD TABLE OF bapicond .
  data:
    gt_conditions_in_hoi   TYPE STANDARD TABLE OF bapicond .
  data:
    gt_conditions_inx  TYPE TABLE OF  bapicondx .
  data:
    gt_conditions_inx_hoi  TYPE TABLE OF  bapicondx .
  data:
    gt_partners   TYPE STANDARD TABLE OF bapiparnr .
  data:
    gt_partners_hoi   TYPE STANDARD TABLE OF bapiparnr .
  data:
    gt_bapiparnrc TYPE STANDARD TABLE OF bapiparnrc .
  data:
    gt_bapiparnrc_hoi TYPE STANDARD TABLE OF bapiparnrc .
  class-data GV_PARENT_TEXT_ID type TDID .
  class-data GV_SPLIT_TEXT type TDID .
  data GV_DOCUMENT_NUMBER type BAPIVBELN-VBELN .       "UPDATE SO
  data GS_ORDER_HEADER_IN type BAPISDH1 .
  data GS_ORDER_HEADER_IN_HOI type BAPISDH1 .               "CR_1516
  data GS_ORDER_HEADER_INX type BAPISDH1X .            "UPDATE SO
  data GS_ORDER_HEADER_INX_HOI type BAPISDH1X .             "CR_1516
  data GV_SALESDOCUMENTTYPE type BAPISDHD1-DOC_TYPE .
  data GV_CR type PARTNER .
  data GV_WE type PARTNER .
  data GV_SP type PARTNER .
  data GV_CA type PARTNER .                                                      "IDOC material ID
  constants:
    BEGIN OF gc_ordchg,
        basic_type(8)   TYPE c VALUE 'ORDERS05' ##NO_TEXT,
        message_type(6) TYPE c VALUE 'ORDCHG' ##NO_TEXT,
      END OF gc_ordchg .
  constants:
    BEGIN OF gc_smp_flag_text,
        yes TYPE char1 VALUE 'Y',
        no  TYPE char1 VALUE 'N',
      END OF gc_smp_flag_text .
  constants GC_DATA_VALIDATION type BDIDOCSTAT-ROUTID value 'DATA_VALIDATION' ##NO_TEXT.
  constants GC_SEND_EDI_824_RESPONSE type BDIDOCSTAT-ROUTID value 'SEND_EDI_824_RESPONSE' ##NO_TEXT.
  constants GC_MSGID_1 type BDIDOCSTAT-MSGID value 'ZOTC_MSG' ##NO_TEXT.
  constants:
    gc_text_langu(2) value 'EN' ##NO_TEXT.
  constants GC_DELETE_INDICATOR type APQI-PUTACTIVE value 'L' ##NO_TEXT.
  constants:
    BEGIN OF gc_idoc_status,
        success    TYPE edi_status VALUE '53' ##NO_TEXT,    "#EC NEEDED
        incomplete TYPE edi_status VALUE '52' ##NO_TEXT,    "#EC NEEDED
        error      TYPE edi_status VALUE '51' ##NO_TEXT,
      END OF gc_idoc_status .
  constants:
    BEGIN OF gc_messages,
        gc_msgno_472 TYPE sy-msgno VALUE '472' ##NO_TEXT,
        gc_msgno_473 TYPE sy-msgno VALUE '473' ##NO_TEXT,
        gc_msgno_474 TYPE sy-msgno VALUE '474' ##NO_TEXT,
        gc_msgno_475 TYPE sy-msgno VALUE '475' ##NO_TEXT,
        gc_msgno_476 TYPE sy-msgno VALUE '476' ##NO_TEXT,
        gc_msgno_477 TYPE sy-msgno VALUE '477' ##NO_TEXT,
        gc_msgno_478 TYPE sy-msgno VALUE '478' ##NO_TEXT,
        gc_msgno_479 TYPE sy-msgno VALUE '479' ##NO_TEXT,
        gc_msgno_480 TYPE sy-msgno VALUE '480' ##NO_TEXT,
        gc_msgno_481 TYPE sy-msgno VALUE '481' ##NO_TEXT,
        gc_msgno_482 TYPE sy-msgno VALUE '482' ##NO_TEXT,
      END OF gc_messages .
  constants GC_ZMZQ type CHAR4 value 'ZMZQ' ##NO_TEXT.
  constants GC_ZMZP type CHAR4 value 'ZMZP' ##NO_TEXT.
  constants:
    BEGIN OF gc_upd_typ,
        sh TYPE char2 VALUE 'SH',
        si TYPE char2 VALUE 'SI',
        ch TYPE char2 VALUE 'CH',
        ci TYPE char2 VALUE 'CI',
      END OF gc_upd_typ .
  constants:
    gc_zbsc(4) value 'ZBSC' ##NO_TEXT.
  constants:
*    CONSTANTS:
*      gc_zsrn(4) VALUE 'ZSRN' ##NO_TEXT.
    gc_zsrq(4) value 'ZSRQ' ##NO_TEXT.
  constants:
    gc_001(3) value '001' ##NO_TEXT.
  constants:
    gc_we(2) value 'WE' ##NO_TEXT.
  constants:
    gc_cr(2) value 'CR' ##NO_TEXT.
  constants:
    gc_010(3) value '010' ##NO_TEXT.
  constants:
    gc_lf(2) value 'LF' ##NO_TEXT.
  constants:
    gc_sp(2) value 'SP' ##NO_TEXT.
  constants:
    gc_ag(2) value 'AG' ##NO_TEXT.
  constants:
    gc_ca(2) value 'CA' ##NO_TEXT.
  constants:
    gc_002(3) TYPE c value '002' ##NO_TEXT.
  constants:
    gc_0002(4) TYPE c value '0002' ##NO_TEXT.
  constants:
    gc_y007(4) value 'Y007' ##NO_TEXT.
  constants:
    gc_pd(4) value 'ZPSD' ##NO_TEXT.
  constants:
    gc_seperator(1) TYPE c value '_' ##NO_TEXT.
  constants GC_Y006 type CHAR4 value 'Y006' ##NO_TEXT.
  constants GC_ZHCG type CHAR4 value 'ZHCG' ##NO_TEXT.
  constants GC_ZICG type CHAR4 value 'ZICG' ##NO_TEXT.
  constants GC_ZZAK type CHAR4 value 'ZAK' ##NO_TEXT.
  constants GC_SMP type CHAR3 value 'SMP' ##NO_TEXT.
  constants GC_ZAK type CHAR3 value 'ZAK' ##NO_TEXT.
  constants GC_ZSI type CHAR3 value 'ZSI' ##NO_TEXT.
  constants GC_SRQ type CHAR3 value 'SRQ' ##NO_TEXT.
  constants:
    BEGIN OF gc_change_types,
        qty  TYPE char3 VALUE 'QTY' ##NO_TEXT,
        csp  TYPE char3 VALUE 'CSP' ##NO_TEXT,
        cpn  TYPE char3 VALUE 'CPN' ##NO_TEXT,
        ddt  TYPE char3 VALUE 'DDT' ##NO_TEXT,
        ctyp TYPE char4 VALUE 'CTYP' ##NO_TEXT,
        ptm  TYPE char3 VALUE 'PTM' ##NO_TEXT,
        sgp  TYPE char3 VALUE 'SGP' ##NO_TEXT,
        pgp  TYPE char3 VALUE 'PGP' ##NO_TEXT,
        ict  TYPE char3 VALUE 'ICT' ##NO_TEXT,
        ic2  TYPE char3 VALUE 'IC2' ##NO_TEXT,
        vca  TYPE char3 VALUE 'VCA' ##NO_TEXT,
        spf  TYPE char3 VALUE 'SPF' ##NO_TEXT,
        ht1  TYPE char3 VALUE 'HT1' ##NO_TEXT,
        spt  TYPE char3 VALUE 'SPT' ##NO_TEXT,
        con  TYPE char3 VALUE 'CON' ##NO_TEXT,
        lsp  TYPE char3 VALUE 'LSP' ##NO_TEXT, "++ Added for CR_1516 by 24093780
        stl  TYPE char3 VALUE 'STL' ##NO_TEXT, "++ Added for CR_1516 by 24093780

      END OF  gc_change_types .
  data GV_IDOC_NUMBER type EDI_DOCNUM .
  class-data GS_RETURN type BAPIRET1 .
  data:
    gv_stop_flag(1) TYPE c .
  data:
    gv_succe(1)     TYPE c .
  data GV_MSG type SY-MSGNO .
  data GV_MSGV1 type BDIDOCSTAT-MSGV1 .
  data GV_MSGV2 type BDIDOCSTAT-MSGV2 .
  data GV_MSGV3 type BDIDOCSTAT-MSGV3 .
  data GV_MSGV4 type BDIDOCSTAT-MSGV4 .
  data GS_ORDER_VIEW type ORDER_VIEW .
  data GV_HEADER_FLAG type ABAP_BOOL .
  data GV_ITEM_FLAG type ABAP_BOOL .
  constants:
    BEGIN OF gc_save_text,
        gc_tdid_f26 TYPE thead-tdid VALUE 'F26', "headr
        gc_tdid_f48 TYPE thead-tdid VALUE 'F48', "Item
        gc_tdid_f49 TYPE thead-tdid VALUE 'F49', "SMP
        gc_tdid_f23 TYPE thead-tdid VALUE 'F23', "ITem temp
        gc_tdid_f13 TYPE thead-tdid VALUE 'F13', "Header tmp
        gc_tdid_zfi TYPE thead-tdid VALUE 'ZFI',
        gc_tdid_f01 TYPE thead-tdid VALUE 'F01',
        gc_object_h TYPE thead-tdobject VALUE 'EKKO',
        gc_object_i TYPE thead-tdobject VALUE 'EKPO',
      END OF gc_save_text .
  constants:
    BEGIN OF gc_segments,
        gc_e1edkt1 TYPE edilsegtyp VALUE 'E1EDKT1' ##NO_TEXT,
        gc_e1edpa1 TYPE edilsegtyp VALUE 'E1EDPA1' ##NO_TEXT,
        gc_e1edk18 TYPE edilsegtyp VALUE 'E1EDK18' ##NO_TEXT,
        gc_e1edkt2 TYPE edilsegtyp VALUE 'E1EDKT2' ##NO_TEXT,
        gc_e1edpt1 TYPE edilsegtyp VALUE 'E1EDPT1' ##NO_TEXT,
        gc_e1edp20 TYPE edilsegtyp VALUE 'E1EDP20' ##NO_TEXT,
        gc_e1edp17 TYPE edilsegtyp VALUE 'E1EDP17' ##NO_TEXT,
        gc_e1edp03 TYPE edilsegtyp VALUE 'E1EDP03' ##NO_TEXT,
        gc_e1edp05 TYPE edilsegtyp VALUE 'E1EDP05' ##NO_TEXT,
        gc_i_ctyp  TYPE edilsegtyp VALUE 'E1EDPT2' ##NO_TEXT,
        gc_h_ctyp  TYPE edilsegtyp VALUE 'E1EDKT1' ##NO_TEXT,
        gc_e1edp01 TYPE edilsegtyp VALUE 'E1EDP01' ##NO_TEXT,
        gc_e1edk01 TYPE edilsegtyp VALUE 'E1EDK01' ##NO_TEXT,
        gc_e1edk02 TYPE edilsegtyp VALUE 'E1EDK02' ##NO_TEXT,
        gc_e1edka1 TYPE edilsegtyp VALUE 'E1EDKA1' ##NO_TEXT,
        gc_e1edk17 TYPE edilsegtyp VALUE 'E1EDK17' ##NO_TEXT,
        gc_e1edp19 TYPE edilsegtyp VALUE 'E1EDP19' ##NO_TEXT,
        gc_e1edpt2 TYPE edilsegtyp VALUE 'E1EDPT2' ##NO_TEXT,
        gc_e1edp35 TYPE edilsegtyp VALUE 'E1EDP35' ##NO_TEXT,
        gc_e1edk14 TYPE edilsegtyp VALUE 'E1EDK14',
        gc_e1edk35 TYPE edilsegtyp VALUE 'E1EDK35' ##NO_TEXT,
      END OF   gc_segments .
  constants GC_ZRSO type CHAR4 value 'ZRSO' ##NO_TEXT.
  constants GC_ZSRN type CHAR4 value 'ZSRN' ##NO_TEXT.
  constants GC_ZRSI type CHAR4 value 'ZRSI' ##NO_TEXT.
  data GV_ABGRU type ABGRU_VA .
  constants GC_000010 type POSNR_VA value 000010 ##NO_TEXT.
  constants GC_QUALF_002 type CHAR3 value '002' ##NO_TEXT.
  constants GC_QUALF_001 type CHAR3 value '001' ##NO_TEXT.
  constants GC_ICL type CHAR3 value 'ICL' ##NO_TEXT.
  constants GC_LT1 type CHAR3 value 'LT1' ##NO_TEXT.
  constants GC_Y008 type CHAR4 value 'Y008' ##NO_TEXT.
  constants GC_SCA type CHAR3 value 'SCA' ##NO_TEXT.
  constants GC_SDP type CHAR3 value 'SDP' ##NO_TEXT.
*  data GR_HOI_ITEMCAT_DOCTYPE type GR_ITEMCAT_DOCTYPE .
  class-data GV_HOI_FLAG type C .
  class-data:
* End of CR_1516 by 24093780 on 11/23/2020
    gt_po_num TYPE STANDARD TABLE OF gty_vbeln .
*    CLASS-DATA gt_update_type TYPE gtt_update_type .
  class-data GT_VBEP_DETAIL type GTT_VBEP_DETAIL .
  class-data GT_VBEP_DETAIL_HOI type GTT_VBEP_DETAIL .
  class-data GT_VBFA_ICL type GTT_VBFA .

  methods INITIALIZE
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods UPDATE_IDOC_STATUS
    importing
      !IV_STATUS type BDIDOCSTAT-STATUS
      !IV_MSGTY type SY-MSGTY
      !IV_MSGID type BDIDOCSTAT-MSGID
      !IV_MSGNO type SY-MSGNO
      !IV_MSGV_1 type BDIDOCSTAT-MSGV1
      !IV_MSGV_2 type BDIDOCSTAT-MSGV2
      !IV_MSGV_3 type BDIDOCSTAT-MSGV3
      !IV_MSGV_4 type BDIDOCSTAT-MSGV4
      !IV_SEGFLD type BDIDOCSTAT-SEGFLD optional
      !IV_ROUTID type BDIDOCSTAT-ROUTID optional
    changing
      !CT_IDOC_DATA1 type IDOC_DATA
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods GET_HEADER_TEXT .
  methods GET_ITEM_TEXT .
  methods GET_ITEM_DATA .
  methods UPDATE_SO
    changing
      !CT_IDOC_DATA1 type IDOC_DATA
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods DELETE_LINE_ITEM_PO
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA
      !CT_IDOC_DATA1 type IDOC_DATA .
  methods UPDATE_PO_TEXTS
    changing
      !CT_IDOC_DATA1 type IDOC_DATA
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods UPDATE_SO_SPLIT
    importing
      !IT_VBEP_DETAIL type GTT_VBEP_DETAIL
      !IV_CALL_COUNT type CHAR1 optional
    exporting
      !ES_RETURN type BAPIRET1
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods GET_SO_DOCUMENT_NUMBER
    changing
      !CT_IDOC_DATA1 type IDOC_DATA
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods UPDATE_DELIVERY_ADDRESS_PO
    changing
      !CT_IDOC_DATA1 type IDOC_DATA
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods DELETE_PO_TEXTS
    importing
      !IV_HEADER type ABAP_BOOL optional
      !IV_ITEM_FLAG type ABAP_BOOL optional
      !IV_ADDITIONAL_FLAG type ABAP_BOOL optional
      !IV_NUM type THEAD-TDNAME
      !IV_TEXT type TDLINE optional .
  methods CHECK_ITMCAT_HOI_SO
    returning
      value(RV_FLAG) type ABAP_BOOL .
  methods UPDATE_SO_HOI
    changing
      !CT_IDOC_DATA1 type IDOC_DATA
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods GET_HEADER_TEXT_HOI .
  methods GET_ITEM_DATA_HOI .
  methods UPDATE_SO_SPLIT_HOI
    importing
      !IT_VBEP_DETAIL type GTT_VBEP_DETAIL
      !IV_CALL_COUNT type CHAR1 optional
    changing
      !CT_IDOC_STATUS type BDTIDOCSTA .
  methods FETCH_DOCTYPE_SO .
  methods GET_ITEM_TEXT_HOI .
protected section.
private section.

  constants GC_U type CHAR1 value 'U' ##NO_TEXT.
  constants GC_N type CHAR1 value 'N' ##NO_TEXT.
  constants GC_VBBP type CHAR4 value 'VBBP' ##NO_TEXT.

  methods FETCH_HEADER_CHANGE_IDENTIFIER
    exporting
      value(ET_HEADER_CHANGES) type GTT_CTYP .
  methods CHECK_SPLIT_MENGE_EXCEED   ##RELAX
    importing
      !IT_VBEP_DETAIL type GTT_VBEP_DETAIL
    returning
      value(RV_RESULT) type ABAP_BOOL .
  methods FETCH_PO_LINE_ITEM
    importing
      !IV_POSNV type POSNR_VON
    exporting
      !ES_VBFA type GTY_VBFA .
  methods POPULATE_PO_HEADER_TEXT .
  methods UPDATE_PO_LINE_ITEM_TEXTS   ##RELAX
    importing
      !IT_BAPIMEPOTEXT type BAPIMEPOTEXT_TP optional
      !IV_PO_NUM type EBELN optional
      !IT_POTEXTHEADER type BAPIMEPOTEXTHEADER_TP optional
    exporting
      !ET_RETURN type BAPIRET1_T .
  methods DELETE_AB_TEXTS
    importing
      !IV_EBELP type EBELP
      !IV_EBELN type EBELN
    exporting
      !ES_RETURN type BAPIRETURN .
  methods FETCH_PO_LINE_ITEMS
    importing
      !IV_POSNV type POSNR_VON
    exporting
      !ET_VBFA type GTT_VBFA .
ENDCLASS.



CLASS ZOTCCL_I1084_ORDCHG IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->CHECK_ITMCAT_HOI_SO
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_FLAG                        TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_itmcat_hoi_so.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  CHECK_ITMCAT_HOI_SO                              *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  11/23/2020                                       *
**  Object ID         :  OCI1084_CR_1516                                  *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Check Sales document item category is HOI        *
**  Transport Request :  S4DK948161                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD CHECK_ITMCAT_HOI_SO
***&----------------------------------------------------------------------*

    CLEAR rv_flag.
    IF  gr_hoi_itemcat_doctype IS NOT INITIAL.

      "Check if Entry exists for SO given in IDOC and HOI Item Category Maintained in gr_hoi_itemcat_doctype
      SELECT COUNT( * ) FROM vbap
             WHERE vbeln EQ gv_document_number
              AND  pstyv IN gr_hoi_itemcat_doctype .
      IF sy-subrc EQ 0.
        "If entry exist, Mark Boolean Return vaeiable as X
        rv_flag = abap_true.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZOTCCL_I1084_ORDCHG->CHECK_SPLIT_MENGE_EXCEED
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_VBEP_DETAIL                 TYPE        GTT_VBEP_DETAIL
* | [<-()] RV_RESULT                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_split_menge_exceed.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  CHECK_SPLIT_MENGE_EXCEED                         *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD CHECK_SPLIT_MENGE_EXCEED
***&----------------------------------------------------------------------*
*   Local data declarations
    DATA lv_menge TYPE menge_d.
    CLEAR:lv_menge,
          rv_result.
    "Read first line item to be changed .
    IF line_exists( it_vbep_detail[ 1 ] ).
      "Fetch line line item intolocal work area
      DATA(lv_vbelp) = it_vbep_detail[ 1 ]-posnr.
      "Collect sum into local variable
      LOOP AT it_vbep_detail ASSIGNING FIELD-SYMBOL(<lfs_vbep_detail>).
        lv_menge = lv_menge  +  <lfs_vbep_detail>-wmeng.
      ENDLOOP.
      "Fetch actual MENGE from DB
      SELECT vbeln,posnr,wmeng                          "#EC CI_SEL_DEL
          FROM vbep INTO TABLE @DATA(lt_vbep)
          WHERE vbeln EQ @gv_document_number AND posnr EQ @lv_vbelp.
      IF sy-subrc EQ 0.                                 "#EC CI_SEL_DEL
        DELETE lt_vbep WHERE wmeng IS INITIAL.
        "Check if split data and quantity in DB match. Else split should not be executed
      ENDIF.
      IF line_exists( lt_vbep[ 1 ] ).
        DATA(ls_vbep) = lt_vbep[ 1 ].
        IF lv_menge EQ ls_vbep-wmeng.
          rv_result = abap_true.
        ENDIF.
      ENDIF.

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZOTCCL_I1084_ORDCHG->DELETE_AB_TEXTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EBELP                       TYPE        EBELP
* | [--->] IV_EBELN                       TYPE        EBELN
* | [<---] ES_RETURN                      TYPE        BAPIRETURN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_ab_texts.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  DELETE_AB_TEXTS                                  *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
*METHOD DELETE_AB_TEXTS
***&----------------------------------------------------------------------*
    "Local Data declaration
    DATA:lt_return_po_con TYPE bapiconf_t_return, "Error tab
         ls_return        TYPE bapireturn,
         lt_return        TYPE TABLE OF bapireturn,
         lt_item          TYPE bapimeconf_t_item, "Items tab for update
         lt_confirmations TYPE STANDARD TABLE OF bapiekes ,         "ab confirmations
         lt_itemx         TYPE bapimeconf_t_itemx, "Items tab for update
         lt_con           TYPE bapimeconf_t_detail, "Confirmations tab
         lt_conx          TYPE bapimeconf_t_detailx. "Confirmations update tab

*   Local constants
    CONSTANTS:lc_ab(2) TYPE c VALUE 'AB'.

    CALL FUNCTION 'BAPI_PO_GETDETAIL' "#EC CI_USAGE_OK[1803189]
      EXPORTING
        purchaseorder         = iv_ebeln
        items                 = abap_true
        schedules             = abap_true
        item_texts            = abap_true
        header_texts          = abap_true
        confirmations         = abap_true
      TABLES
        po_item_confirmations = lt_confirmations
        return                = lt_return.
    "Check if Line item contains AB texts
    IF line_exists( lt_confirmations[ po_item = iv_ebelp conf_type = lc_ab ] ) .
      "Populate internal tables for ME_PO_CONFIRM
      DATA(ls_con_bapi) = lt_confirmations[ po_item = iv_ebelp conf_type = lc_ab ].
      lt_con = VALUE #(  ( item_no = ls_con_bapi-po_item conf_ser = ls_con_bapi-conf_ser  delete_ind = abap_true ) ).
      lt_conx = VALUE #(  ( item_no = ls_con_bapi-po_item conf_ser = ls_con_bapi-conf_ser  delete_ind = abap_true
                           item_nox = abap_true
                           conf_serx = abap_true
                           ) ).

      "Call FM ME_PO_CONFIRM to update AB texts
      CALL FUNCTION 'ME_PO_CONFIRM'
        EXPORTING
          document_no   = iv_ebeln
          item          = lt_item
          itemx         = lt_itemx
          confirmation  = lt_con
          confirmationx = lt_conx
        IMPORTING
          return        = lt_return_po_con.
      IF line_exists( lt_return_po_con[ type = if_mrm_constants=>gc_msgty_e ] ).
        es_return = VALUE #( type = ls_return-type
                             message = ls_return-message ).
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->DELETE_LINE_ITEM_PO
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* | [<-->] CT_IDOC_DATA1                  TYPE        IDOC_DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_line_item_po.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  DELETE_LINE_ITEM_PO                              *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Delete Line items in PO                          *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD DELETE_LINE_ITEM_PO
***&----------------------------------------------------------------------*
*   Local internal table declaration
    DATA: lt_return      TYPE STANDARD TABLE OF bapiret2,
          lt_poitem      TYPE STANDARD TABLE OF bapimepoitem,
          ls_poitem      TYPE bapimepoitem,
          lt_poitemx     TYPE STANDARD TABLE OF bapimepoitemx,
          ls_poitemx     TYPE bapimepoitemx,
          lt_potextitem  TYPE STANDARD TABLE OF bapimepotext,
          lv_memory_1059 TYPE char20.
*   Local structures declaration
    DATA:ls_1058_e1edp35 TYPE e1edp35,
         ls_e1edp01      TYPE e1edp01.
*   Local variable declaration
    DATA:
         lv_po_num      TYPE ebeln.

*   Local constants
    CONSTANTS : lc_ptp_1059 TYPE c LENGTH 9 VALUE 'ZPTP_1059'.

    "For line item cancellation , PO must be deleted first then SO
*    We have populated PO's. Call one BAPI for each PO
******************************************************************************************
*  Sort Internal tables with key values and Delete Duplicate entries
******************************************************************************************
    SORT gt_vbfa_icl BY vbelv posnv vbeln posnn.

******************************************************************************************
*   PO Header Texts
******************************************************************************************
    DATA(lv_line_count) = lines( gt_vbfa_icl ).
    LOOP AT gt_vbfa_icl ASSIGNING FIELD-SYMBOL(<lfs_vbfa>).
      DATA(lv_tabix) = sy-tabix.
      ls_poitem = VALUE #(  po_item = <lfs_vbfa>-posnn  " set position here
                            delete_ind = gc_delete_indicator  )
                            .
      APPEND ls_poitem TO lt_poitem.
**      Populate Item text table
      ls_poitemx = VALUE #(  po_item = <lfs_vbfa>-posnn " set position here
                              po_itemx = abap_true
                              delete_ind = abap_true ) .
      APPEND ls_poitemx TO lt_poitemx.
      CLEAR:ls_poitem,ls_poitemx.

      DATA(ls_potextitem) = VALUE bapimepotext( po_number = <lfs_vbfa>-vbeln
                                                po_item   = <lfs_vbfa>-posnn
                                                text_id   = gc_save_text-gc_tdid_f48
                                                text_line = <lfs_vbfa>-smp_text ) .
      APPEND ls_potextitem TO lt_potextitem. "Populate Item Text
      CLEAR ls_potextitem.

*         Fetch PO Populate line item
      READ TABLE gt_order_item_in ASSIGNING FIELD-SYMBOL(<lfs_order_item_in>) WITH KEY "#EC CI_STDSEQ
        itm_number =  <lfs_vbfa>-posnv.
      IF sy-subrc EQ 0.
        <lfs_order_item_in>-reason_rej = <lfs_vbfa>-abgru.
      ELSE.
        DATA(ls_order_item_in) = VALUE bapisditm( itm_number =  <lfs_vbfa>-posnv
                                                  reason_rej = <lfs_vbfa>-abgru  ) .
        APPEND:ls_order_item_in TO gt_order_item_in.
      ENDIF.

      "Populate global table gt_order_item_inx for reason of rejection
      READ TABLE gt_order_item_inx ASSIGNING FIELD-SYMBOL(<lfs_order_item_inx>) WITH KEY itm_number = <lfs_vbfa>-posnv. "#EC CI_STDSEQ
      IF sy-subrc EQ 0.
        <lfs_order_item_inx>-updateflag = abap_true.
        <lfs_order_item_inx>-reason_rej = abap_true.
      ELSE.
        DATA(ls_order_item_inx) = VALUE bapisditmx( itm_number = <lfs_vbfa>-posnv
                                                    updateflag = abap_true
                                                    reason_rej = abap_true ).
        APPEND ls_order_item_inx TO gt_order_item_inx.
      ENDIF.
      CLEAR:ls_order_item_in,ls_order_item_inx.

      IF lv_tabix LT lv_line_count.
        READ TABLE gt_vbfa_icl ASSIGNING FIELD-SYMBOL(<lfs_next_line>) INDEX ( lv_tabix + 1 ). "#EC CI_SUBRC
        IF <lfs_next_line> IS ASSIGNED .
          IF <lfs_next_line>-vbeln <> <lfs_vbfa>-vbeln.
            lv_po_num = |{ <lfs_vbfa>-vbeln ALPHA = IN }| . "VBELN contains the line item number

*        Call bapi to update details
            CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
              EXPORTING
                purchaseorder = lv_po_num
              TABLES
                return        = lt_return
                poitem        = lt_poitem ##ENH_OK
                poitemx       = lt_poitemx
                potextitem    = lt_potextitem.
*error han
            IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR
               line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
              IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
                LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<lfs_err>) WHERE type = if_mrm_constants=>gc_msgty_e. "#EC CI_STDSEQ "#EC CI_NESTED
                  CALL METHOD me->update_idoc_status
                    EXPORTING
                      iv_status      = gc_idoc_status-incomplete
                      iv_msgty       = if_mrm_constants=>gc_msgty_e
                      iv_msgid       = <lfs_err>-id
                      iv_msgno       = <lfs_err>-number
                      iv_msgv_1      = <lfs_err>-message_v1
                      iv_msgv_2      = <lfs_err>-message_v2
                      iv_msgv_3      = space
                      iv_msgv_4      = space
                    CHANGING
                      ct_idoc_data1  = ct_idoc_data1
                      ct_idoc_status = ct_idoc_status.
                ENDLOOP.
              ENDIF.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = abap_true.
            ENDIF."write below
            CLEAR:lt_poitem,
                  lt_poitemx,
                  lt_potextitem,lt_return.
          ENDIF.
        ENDIF.
      ELSE.
        lv_po_num = |{ <lfs_vbfa>-vbeln ALPHA = IN }| . "VBELN contains the line item number
*        Export Last call flag to Routine 964(RV61B964) only when the call is last BAPI change
        DATA(lv_bapi_count) = abap_true."Added by 24093785 on RV61B964 2020
        EXPORT lv_call_count FROM lv_bapi_count TO MEMORY ID lv_po_num. "Added by 24093785 on 17th OCT 2020
        CONCATENATE lv_po_num lc_ptp_1059 INTO lv_memory_1059.
        EXPORT lt_idoc FROM gt_idoc_data1 TO DATABASE indx(zk) ID lv_memory_1059. " Added by IDOC_INPUT_ORDCHG to capture IDOC DATA in PTPI1059
        "This is the last call
        DATA(lv_bapi_call_count) = abap_true.

*        call bapi to update details
        CALL FUNCTION 'BAPI_PO_CHANGE'     "#EC CI_USAGE_OK[2438131]
          EXPORTING
            purchaseorder = lv_po_num
          TABLES
            return        = lt_return
            poitem        = lt_poitem ##ENH_OK
            poitemx       = lt_poitemx
            potextitem    = lt_potextitem.
*       Error Handle
        IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR
           line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
          IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
            LOOP AT lt_return ASSIGNING <lfs_err> WHERE type = if_mrm_constants=>gc_msgty_e. "#EC CI_STDSEQ "#EC CI_NESTED
              CALL METHOD me->update_idoc_status
                EXPORTING
                  iv_status      = gc_idoc_status-incomplete
                  iv_msgty       = if_mrm_constants=>gc_msgty_e
                  iv_msgid       = <lfs_err>-id
                  iv_msgno       = <lfs_err>-number
                  iv_msgv_1      = <lfs_err>-message_v1
                  iv_msgv_2      = <lfs_err>-message_v2
                  iv_msgv_3      = space
                  iv_msgv_4      = space
                CHANGING
                  ct_idoc_data1  = ct_idoc_data1
                  ct_idoc_status = ct_idoc_status.
            ENDLOOP.
          ENDIF.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.
        ENDIF.
        CLEAR:lt_poitem,
        lt_poitemx,
        lt_potextitem,lt_return.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->DELETE_PO_TEXTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_HEADER                      TYPE        ABAP_BOOL(optional)
* | [--->] IV_ITEM_FLAG                   TYPE        ABAP_BOOL(optional)
* | [--->] IV_ADDITIONAL_FLAG             TYPE        ABAP_BOOL(optional)
* | [--->] IV_NUM                         TYPE        THEAD-TDNAME
* | [--->] IV_TEXT                        TYPE        TDLINE(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_po_texts.
**************************************************************************
*  Title             :  ORDCHG FROM E2OPEN to S4                         *
*  Method            :  DELETE_PO_TEXTS                                  *
*  Author            :  Kishore.S                                        *
*  Creation Date     :  09/23/2020                                       *
*  Object ID         :  OTCI1084                                         *
*  Business Contact  :  Ashish Singh                                     *
*  TS Name           :  TS_PTPI1058_ORDCHG interface from E2OPEN to S4_V1*
*  TS Author         :  Kishore.S                                        *
*  Description       :  Delete header and Item text                      *
*  Transport Request :  S4DK914229                                       *
*  Misc Notes        :                                                   *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #  | Changed By   | Description                  *
*&-----------------------------------------------------------------------*
*&            |            |              |                              *
*&-----------------------------------------------------------------------*
**&----------------------------------------------------------------------*
**& METHOD UPDATE_SIMPLE_CHANGE_FLAG
**&----------------------------------------------------------------------*
    "Local data declaration
    DATA:lt_line   TYPE STANDARD TABLE OF tline, "line for each text
         ls_header TYPE thead. "structure for each line
    DATA:lt_lines_read  TYPE STANDARD TABLE OF tline.  " table to read text from TEXT-IDs.
    "if input parameter is header
    IF iv_header IS NOT INITIAL.
      ls_header = VALUE #(  tdobject = gc_save_text-gc_object_h "EKKO
                            tdname   = iv_num
                            tdid     = gc_save_text-gc_tdid_f26 "Header flag
                          ).
      "Item
    ELSEIF iv_item_flag IS NOT INITIAL.

      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          id                      = gc_save_text-gc_tdid_f48
          language                = sy-langu
          name                    = iv_num
          object                  = gc_save_text-gc_object_i
        TABLES
          lines                   = lt_lines_read
        EXCEPTIONS
          id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7
          OTHERS                  = 8.
      IF sy-subrc EQ 0.
        IF line_exists( lt_lines_read[ 1 ] ).
          DATA(lv_line_item_text) = lt_lines_read[ 1 ]-tdline.
          IF lv_line_item_text IS NOT INITIAL.
            lv_line_item_text = space.
            ls_header = VALUE #(  tdobject = gc_save_text-gc_object_i "EKPO
                                         tdname   = iv_num
                                         tdid     = gc_save_text-gc_tdid_f48 " item
                                       ).
            lt_line = VALUE #( ( tdformat = ''
                          tdline   = lv_line_item_text ) ).

            ls_header-tdspras = sy-langu."E
            CONDENSE ls_header-tdname NO-GAPS.
            CALL FUNCTION 'SAVE_TEXT'
              EXPORTING
                client          = sy-mandt
                header          = ls_header
                savemode_direct = abap_true
              TABLES
                lines           = lt_line
              EXCEPTIONS
                id              = 1
                language        = 2
                name            = 3
                object          = 4
                OTHERS          = 5.
            IF sy-subrc EQ 0.
              CALL FUNCTION 'COMMIT_TEXT'
                EXPORTING
                  savemode_direct = abap_true.
            ENDIF.

          ENDIF.
        ENDIF.
      ENDIF.

      "additional flag
    ELSEIF iv_additional_flag IS NOT INITIAL.
      ls_header = VALUE #(  tdobject = gc_save_text-gc_object_i "EKPO
                                        tdname   = iv_num
                                        tdid     = gc_save_text-gc_tdid_f49
                         ).
    ENDIF.



  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->FETCH_DOCTYPE_SO
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method FETCH_DOCTYPE_SO.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZOTCCL_I1084_ORDCHG->FETCH_HEADER_CHANGE_IDENTIFIER
* +-------------------------------------------------------------------------------------------------+
* | [<---] ET_HEADER_CHANGES              TYPE        GTT_CTYP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD fetch_header_change_identifier.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  FETCH_HEADER_CHANGE_IDENTIFIER                   *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch header level change identifier             *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD FETCH_HEADER_CHANGE_IDENTIFIER
***&----------------------------------------------------------------------*
    "Local data declaration
    DATA:ls_e1edkt1 TYPE e1edkt1,
         ls_e1edkt2 TYPE e1edkt2.
    "Segment E1EDKT1 contains change type for header
    LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_data1>) WHERE segnam = gc_segments-gc_e1edkt1.
      ls_e1edkt1 =  <lfs_idoc_data1>-sdata .
      DATA(lv_segnum) = <lfs_idoc_data1>-segnum.
*     Segment E1EDKT1 with TDID CTYP contains headerlevel changes
      IF ls_e1edkt1-tdid EQ gc_change_types-ctyp."ctyp
        "Verify IDOC_DATA contains segment E1EDKT2.
        IF line_exists(  gt_idoc_data1[ segnam = gc_segments-gc_e1edkt2  psgnum = lv_segnum ] ).
          ls_e1edkt2 = gt_idoc_data1[ segnam = gc_segments-gc_e1edkt2 psgnum = lv_segnum ]-sdata.
*         Segment E1EDKT2-TDLINE contains change identifiers seperated by '_'
          DATA(lv_change_identifier)  = ls_e1edkt2-tdline.
          CLEAR et_header_changes.
          "Split change identifiers into local table
          SPLIT lv_change_identifier AT gc_seperator INTO TABLE et_header_changes.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.                                             "#EC CI_VALPAR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZOTCCL_I1084_ORDCHG->FETCH_PO_LINE_ITEM
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_POSNV                       TYPE        POSNR_VON
* | [<---] ES_VBFA                        TYPE        GTY_VBFA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD fetch_po_line_item.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  FETCH_PO_LINE_ITEM                               *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD FETCH_PO_LINE_ITEM
***&----------------------------------------------------------------------*
    TRY.
        "Collect PO number linked to SO
        SELECT vbelv,posnv,vbeln,posnn INTO @DATA(ls_vbfa) FROM vbfa UP TO 1 ROWS "#EC CI_NOORDER
*        SELECT vbelv,posnv,vbeln,posnn INTO TABLE @DATA(lt_vbfa) FROM vbfa UP TO 1 ROWS "#EC CI_NOORDER
                                               WHERE vbelv = @gv_document_number
                                               AND posnv = @iv_posnv
                                               AND vbtyp_n = @if_mrm_constants=>gc_trtyp_v.
        ENDSELECT.
        IF sy-subrc EQ 0.
          es_vbfa =  ls_vbfa.
        ENDIF.
      CATCH cx_root.
        CLEAR es_vbfa.
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZOTCCL_I1084_ORDCHG->FETCH_PO_LINE_ITEMS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_POSNV                       TYPE        POSNR_VON
* | [<---] ET_VBFA                        TYPE        GTT_VBFA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD fetch_po_line_items.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  FETCH_PO_LINE_ITEM                               *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD FETCH_PO_LINE_ITEM
***&----------------------------------------------------------------------*
    TRY.
        "Collect PO number linked to SO
        SELECT vbelv,posnv,vbeln,posnn INTO TABLE @DATA(lt_vbfa) FROM vbfa "#EC CI_NOORDER
                                               WHERE vbelv = @gv_document_number
                                               AND posnv = @iv_posnv
                                               AND vbtyp_n = @if_mrm_constants=>gc_trtyp_v.
        IF sy-subrc EQ 0.
          et_vbfa =  lt_vbfa.
        ENDIF.
      CATCH cx_root.
        CLEAR et_vbfa.
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->GET_HEADER_TEXT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_header_text.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  GET_HEADER_TEXT                                  *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                    *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch header text from e1edk35                   *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD GET_HEADER_TEXT
***&----------------------------------------------------------------------*
*   Local structure declarations
    DATA:ls_e1edk35 TYPE e1edk35,
         ls_e1edkt1 TYPE e1edkt1  ##NEEDED,
         ls_e1edkt2 TYPE e1edkt2  ##NEEDED.

    "Convert to internal format
    gv_document_number = |{ gv_document_number ALPHA = IN WIDTH = 10 }| .

    "Fetch SMP flag for header
    LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_idata>) WHERE segnam = gc_segments-gc_e1edk35 .
      CLEAR ls_e1edk35.
      ls_e1edk35 = <lfs_idoc_idata>-sdata.
      CASE ls_e1edk35-qualz.
        WHEN gc_smp.
          IF ls_e1edk35-cusadd IS NOT INITIAL.
            "Populate gt_order_text to pass it to BAPI
            DATA(ls_order_text) = VALUE bapisdtext( doc_number = gv_document_number
                                                    text_id    = gc_zhcg
                                                    langu      = gc_text_langu
                                                    text_line  = ls_e1edk35-cusadd ).
            APPEND ls_order_text TO gt_order_text.
            CLEAR ls_order_text.
            EXIT.
          ENDIF.
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->GET_HEADER_TEXT_HOI
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_header_text_hoi.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  GET_HEADER_TEXT_HOI                              *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  11/29/2020                                       *
**  Object ID         :  OTCI1084_CR_1516                                 *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch header text from e1edk35                   *
**  Transport Request :  S4DK948161                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD GET_HEADER_TEXT_HOI
***&----------------------------------------------------------------------*
    "Convert to internal format
    gv_document_number = |{ gv_document_number ALPHA = IN WIDTH = 10 }| .

    "Fetch SMP flag for header and Item From IDOC
    "E1EDK35 - Header E1EDP35 - Item
    LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_idata>).
      "Segment Name
      CASE <lfs_idoc_idata>-segnam.
          "Header
        WHEN gc_segments-gc_e1edk35.
          DATA(ls_e1edk35) = CONV e1edk35( <lfs_idoc_idata>-sdata ).
          "Qualifier
          CASE ls_e1edk35-qualz.
              "SMP
            WHEN gc_smp.
              IF ls_e1edk35-cusadd IS NOT INITIAL.
                APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING FIELD-SYMBOL(<lfs_order_text>).
                "Populate gt_order_text to pass it to BAPI
                <lfs_order_text> = VALUE bapisdtext( doc_number = gv_document_number
                                                     text_id    = gc_zhcg
                                                     langu      = gc_text_langu
                                                     text_line  = ls_e1edk35-cusadd ).
                CONTINUE.
              ENDIF.
            WHEN OTHERS.
          ENDCASE."E1EDK35

          "Item
        WHEN gc_segments-gc_e1edp01.
          DATA(ls_e1edp01) = CONV e1edp01( <lfs_idoc_idata>-sdata ).
          "E1EDP35
          LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_idata1>) WHERE segnam = gc_segments-gc_e1edp35 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                            AND psgnum = <lfs_idoc_idata>-segnum.
            DATA(ls_e1edp35) = CONV e1edp35( <lfs_idoc_idata1>-sdata ).
            "Fetch the simple change flag with SMP indicator value in QUALZ
            IF ls_e1edp35-qualz EQ gc_smp.
              "Populate Global Line item Table
              APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
              <lfs_order_text> = VALUE bapisdtext(
                       itm_number = ls_e1edp01-posex   " Line item
                       doc_number = gv_document_number "SO
                       text_id    = gc_zicg            "Line item SMP Text ID
                       langu      = gc_text_langu      "Language
                       text_line  = COND #( WHEN ls_e1edp35-cusadd IS NOT INITIAL
                                            THEN ls_e1edp35-cusadd
                                            ELSE abap_true  ) ) .
            ELSEIF ls_e1edp35-qualz EQ gc_zak.
              "Populate Global Line item Table
              IF <lfs_order_text> IS ASSIGNED .
                UNASSIGN <lfs_order_text>.
              ENDIF.
              APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
              <lfs_order_text> = VALUE bapisdtext(
                       itm_number = ls_e1edp01-posex   " Line item
                       doc_number = gv_document_number "SO
                       text_id    = gc_zzak            "Line item SMP Text ID - ZAK
                       langu      = gc_text_langu      "Language
                       text_line  = COND #( WHEN ls_e1edp35-cusadd IS NOT INITIAL
                                            THEN ls_e1edp35-cusadd
                                            ELSE abap_true  ) ) .
            ENDIF.
          ENDLOOP.
      WHEN OTHERS.
      ENDCASE."Main Case
    ENDLOOP.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->GET_ITEM_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_item_data.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  get_item_data                                    *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch Item data                                  *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #| Changed By  | Description                     *
*&-----------------------------------------------------------------------*
*& 10.23.2020 | CR_452   |  24093780   | S4 to e2Open ORDCHG Idoc missing*
*                                          E1EDK35 segment               *
*&-----------------------------------------------------------------------*
*& 11.23.2020 | CR_1516  |  24093780   | S4DK948161 HOI Enhancement      *
*&-----------------------------------------------------------------------*
*&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD GET_ITEM_DATA
***&----------------------------------------------------------------------*
*   Local internal table declaration
    DATA:lt_return1              TYPE STANDARD TABLE OF bapiret2,
         lt_order_schedule_lines TYPE STANDARD TABLE OF bapisdhedu,
         lt_partners             TYPE STANDARD TABLE OF bapisdpart,
         lt_conditions           TYPE STANDARD TABLE OF bapisdcond,
         lt_order_business       TYPE STANDARD TABLE OF bapisdbusi,
         lt_header_changes       TYPE gtt_ctyp,
         lt_item_changes         TYPE gtt_ctyp.

*   Local data declarations
    DATA:lv_delivery_date       TYPE erdat,
         lv_partner             TYPE partner,
         lv_date_po_header_text TYPE abap_bool.

*   Local structure declaration
    DATA:ls_e1edkt1         TYPE e1edkt1,
         ls_e1edka1         TYPE e1edka1,
         ls_e1edp35         TYPE e1edp35,
         ls_e1edp05         TYPE e1edp05,
         ls_e1edkt2         TYPE e1edkt2,
         ls_e1edp01         TYPE e1edp01,
         ls_e1edp03         TYPE e1edp03,
         ls_e1edp19         TYPE e1edp19,
         ls_e1edpt1         TYPE e1edpt1,
         ls_e1edpa1         TYPE e1edpa1,
         ls_e1edp17         TYPE e1edp17,
         ls_order_item_in   TYPE bapisditm,
         ls_order_item_inx  TYPE bapisditmx,
         ls_schedule_lines  TYPE bapischdl,
         ls_schedule_linesx TYPE bapischdlx,
         ls_vbep_detail     TYPE gty_vbep_detail,
         ls_1058_e1edp35    TYPE e1edp35.

*   Local constants
    CONSTANTS:lc_01 TYPE dzaehk_short VALUE 01, " Condition counter (short length)
              lc_pl TYPE parvw VALUE 'PL',      " ++  Added for CR_1516 by 24093780 on 11.23.2020
              lc_xf TYPE parvw VALUE 'XF'.      " ++  Added for CR_1516 by 24093780 on 11.23.2020

    CLEAR:lt_return1,
          lv_date_po_header_text,
          lt_order_schedule_lines,
          gt_vbfa_icl,
          gt_vbep_detail,
          gt_bapiparnrc,
          lt_header_changes. "Clear header changes for every run #CR_452


    "get doc. header details
    gv_document_number   =  |{ gv_document_number  ALPHA = IN WIDTH = 10 }| .
    " Sales Order: Display Order Data of Order
    CALL FUNCTION 'BS01_SALESORDER_GETDETAIL'
    "#EC CI_USAGE_OK[2438131] "Added pragma for code remediation
      EXPORTING
        salesdocument        = gv_document_number          "SD document table
      TABLES
        return               = lt_return1                  "Bapi return Table
        order_schedule_lines = lt_order_schedule_lines     "Schedule lines (Date and Quantity lines)
        order_business       = lt_order_business
        order_partners       = lt_partners                 "Partner profile
        order_conditions     = lt_conditions.              "Condition Lines

**************************************************************************************************
*                        HEADER LEVEL CHANGES
**************************************************************************************************
    "Fetch header level changes
    CALL METHOD fetch_header_change_identifier( IMPORTING et_header_changes = lt_header_changes ).

*   Loop at GT_header_changes and Populate Header Internal table for SO BAPI
    IF lt_header_changes IS NOT INITIAL. "proceed only for any changes in Header
      LOOP AT lt_header_changes ASSIGNING FIELD-SYMBOL(<lfs_header_changes>).
        "Check change type for header level changes
        CASE <lfs_header_changes>-ctyp.
**************************************************************************************************
*         SALES GROUP
**************************************************************************************************
          WHEN gc_change_types-sgp.
            LOOP AT gt_idoc_data1  ASSIGNING FIELD-SYMBOL(<lfs_idoc_data1>) "#EC CI_STDSEQ "#EC CI_NESTED
                                                    WHERE segnam = gc_segments-gc_e1edk14 .
              DATA(ls_e1edk14) = CONV e1edk14( <lfs_idoc_data1>-sdata ).
              IF ls_e1edk14-qualf = gc_010.
                "Headers structure
                gs_order_header_in-sales_grp = ls_e1edk14-orgid .
                "Update Structure for header
                gs_order_header_inx-updateflag = if_mrm_constants=>gc_updkz-update.
                gs_order_header_inx-sales_grp  = abap_true .
                EXIT.
              ENDIF.
            ENDLOOP.
            "Check if Simple change flag for header is Y, if not pass Y to header text data
            DATA(ls_order_text) = VALUE bapisdtext(
            doc_number = gv_document_number "SO
            text_id    = gc_zhcg            "Text ID
            langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 "Added tvarvc gt_header_smp_flag for SMp flag
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-sgp ] )
                                 THEN gt_header_smp_flag[ low = gc_change_types-sgp ]-high
                                 ELSE gc_smp_flag_text-yes ) ) .
            APPEND ls_order_text TO gt_order_text.
            CLEAR ls_order_text.
**************************************************************************************************
*         PAYMENT TERMS
**************************************************************************************************
          WHEN gc_change_types-ptm.
            LOOP AT gt_idoc_data1  ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edk01. "#EC CI_STDSEQ "#EC CI_NESTED
              DATA(ls_e1edk01) = CONV e1edk01( <lfs_idoc_data1>-sdata ).
              "Header structure
              gs_order_header_in-pmnttrms    = ls_e1edk01-zterm.
              "Update field Structure
              gs_order_header_inx-updateflag = if_mrm_constants=>gc_updkz-update.
              gs_order_header_inx-pmnttrms   = abap_true.
              EXIT.
            ENDLOOP.
            "Check if Simple change flag for header is Y, if not pass Y to header text data
            ls_order_text = VALUE bapisdtext(
            doc_number = gv_document_number "SO
            text_id    = gc_zhcg            "Text ID
            langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 Added TVARVC for OTC header SMP flag
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-ptm ] )
                                 THEN  gt_header_smp_flag[ low = gc_change_types-ptm ]-high
                                 ELSE gc_smp_flag_text-yes ) ).
            APPEND ls_order_text TO gt_order_text.
            CLEAR ls_order_text.
**************************************************************************************************
*         SO HEADER TEXT
**************************************************************************************************
          WHEN gc_change_types-ht1.
            LOOP  AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edkt1. "#EC CI_STDSEQ "#EC CI_NESTED
              CLEAR ls_e1edkt1.
              ls_e1edkt1 = <lfs_idoc_data1>-sdata.
              DATA(lv_segnum) = <lfs_idoc_data1>-segnum.
              "IF changet type CTYP read E1EDPT2
              IF ls_e1edkt1-tdid EQ gc_0002.
                IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edkt2  psgnum = lv_segnum ] ).
                  CLEAR ls_e1edkt2.
                  ls_e1edkt2  = gt_idoc_data1[ segnam = gc_segments-gc_e1edkt2  psgnum = lv_segnum ]-sdata .

                  DATA(lv_change_identifier) = ls_e1edkt2-tdline."*LT1 value is for E1EDPT1 for any TDID
                  ls_order_text = VALUE bapisdtext( doc_number = gv_document_number
                                                    text_id    = gc_y006
                                                    langu      = gc_text_langu
                                                    text_line  = lv_change_identifier ).
                  APPEND ls_order_text TO gt_order_text.
                  CLEAR ls_order_text.
                  EXIT.
                ENDIF.
              ENDIF.
            ENDLOOP.

            ls_order_text = VALUE bapisdtext(
            doc_number = gv_document_number
            text_id    = gc_zhcg
            langu      = gc_text_langu
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 Added TVARVC for header SMP flag
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-ht1 ] )
                                 THEN  gt_header_smp_flag[ low = gc_change_types-ht1 ]-high
                                 ELSE gc_smp_flag_text-yes ) ).
            APPEND ls_order_text TO gt_order_text.
            CLEAR ls_order_text.

**************************************************************************************************
*         SHIP TO ID
**************************************************************************************************
          WHEN gc_change_types-spt.
            " Fetch segment E1EDKA1 with Partner Function WE
            LOOP AT gt_idoc_data1 INTO DATA(ls_idoc_idata) WHERE segnam = gc_segments-gc_e1edka1. "#EC CI_STDSEQ "#EC CI_NESTED
              CLEAR ls_e1edka1.
              "Move First 3 characters of segment E1EDKA1 which contains Part Fucntion.
              ls_e1edka1 = ls_idoc_idata-sdata+0(3).
              "Procedd only if WE
              IF ls_e1edka1 EQ gc_we ." partner exists in SO
                "Check if already PArtnet exists
                IF line_exists( lt_partners[ sd_doc      = gv_document_number
                                             partn_role  = gc_we ] ).
                  "Populate Itab gt_bapiparnrc. Pass Part role , old and new numbers
                  DATA(ls_existing_part) = lt_partners[ sd_doc = gv_document_number  partn_role  = gc_we ].
                  "Move segment E1EDKA1 to local structure
                  ls_e1edka1 = ls_idoc_idata-sdata.
                  "Move Partner number
                  lv_partner = ls_e1edka1-partn.
                  "Convert Partnumber to internal format
                  lv_partner = |{ lv_partner  ALPHA = IN WIDTH = 10 }| .
                  "Populae itab with Old
                  DATA(ls_bapiparnrc) = VALUE bapiparnrc(
                                              document    = ls_existing_part-sd_doc
                                              itm_number  = ls_existing_part-itm_number
                                              updateflag  = if_mrm_constants=>gc_updkz-update
                                              partn_role  = ls_e1edka1-parvw
                                              p_numb_old  = COND #( WHEN ls_existing_part-customer IS NOT INITIAL
                                                                    THEN ls_existing_part-customer
                                                                    ELSE ls_existing_part-vendor_no )
                                                    p_numb_new = lv_partner ).
                  APPEND ls_bapiparnrc TO gt_bapiparnrc.
                  CLEAR ls_bapiparnrc.
                  "Update PO
                  "Populate gt_order_text to pass it to BAPI
                  ls_order_text = VALUE bapisdtext(
                  doc_number = gv_document_number "SO
                  text_id    = gc_zhcg            "Text ID
                  langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 Added for TVARVC header SMP flag
                  text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-ht1 ] )
                                       THEN  gt_header_smp_flag[ low = gc_change_types-ht1 ]-high
                                       ELSE gc_smp_flag_text-no ) ). "N
                  APPEND ls_order_text TO gt_order_text.
                  CLEAR ls_order_text.

*                 SIMPLE CHANGE FLAG "Update PO Header
                  lv_date_po_header_text = abap_true.
**************************************Fetch partner address*******************************************
                  "Continue only if partner number is present in Idoc
                  IF lv_partner IS NOT INITIAL.

                    "Fetch Address number from Customer Master KNA1
                    SELECT SINGLE adrnr                             "Address
                       INTO @DATA(lv_adrnr)
                             FROM kna1
                            WHERE kunnr EQ @lv_partner.
                    IF sy-subrc EQ 0.
                      CLEAR gt_ekkn_delivery.

                      "Fetch All PO No. and Line Items linked with SO
                      SELECT ebeln  "Purchasing Document Number
                             ebelp  "Item Number of Purchasing Document
                        FROM ekkn
                 APPENDING CORRESPONDING FIELDS OF TABLE gt_ekkn_delivery ##TOO_MANY_ITAB_FIELDS
                 WHERE vbeln EQ gv_document_number.

                      IF sy-subrc EQ 0.
                        CLEAR gt_delivery_address.
                        "Populate Itab with PO , LIneitem and Partnet address
                        LOOP AT gt_ekkn_delivery ASSIGNING FIELD-SYMBOL(<lfs_po>). "#EC CI_NESTED
                          <lfs_po>-addr_no = lv_adrnr.
*******************************************************************************************************************
*  PO SMP text
*  Check gt_order_text table if it contains Line item SMP flag
*  If SMP flag provided in idoc is X. Look into Tvarvc table P&M_SO_PO_SMP  for entry exists
*  Pass X to low to the TVARVC entry and fetch high value and pass it to Text Line
*******************************************************************************************************************
                          IF line_exists( gt_order_text[ doc_number = gv_document_number text_id = gc_zhcg ] ).
                            TRY.
                                DATA(lv_smptext) = gt_order_text[ doc_number = gv_document_number text_id = gc_zhcg ]-text_line.

                                DATA(ls_potextitem) = VALUE bapimepotext(
                                                      po_number = <lfs_po>-ebeln
                                                      po_item   = <lfs_po>-ebelp
                                                      text_id   = gc_save_text-gc_tdid_f48
                                       text_line = COND #( WHEN lv_smptext EQ abap_true "(X)
                                                           THEN gt_pm_so_po_smp[ low = abap_true ]-high "pass low to fetch high
                                                           ELSE lv_smptext  ) ).
                              CATCH cx_sy_itab_line_not_found.
                                CLEAR ls_potextitem.
                            ENDTRY.
                            "Save PO text wit Y when SO text is X. If SO text Y , then PO text is X
                            APPEND ls_potextitem TO gt_potextitem.
                            CLEAR ls_potextitem.
                          ELSE.
                            ls_potextitem = VALUE bapimepotext(
                                                  po_number = <lfs_po>-ebeln
                                                  po_item   = <lfs_po>-ebelp
                                                  text_id   = gc_save_text-gc_tdid_f48
                                                  text_line = gc_smp_flag_text-no ).
                            "Save PO text wit Y when SO text is X. If SO text Y , then PO text is X
                            APPEND ls_potextitem TO gt_potextitem.
                            CLEAR ls_potextitem.
                          ENDIF.
                        ENDLOOP.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                  EXIT.
                ENDIF.
              ENDIF.
            ENDLOOP.

*        Begin of CR_1516 by 24093780 on 12/03/2020
**************************************************************************************************
*        LSP Logistics Service Proviver
**************************************************************************************************
          WHEN gc_change_types-lsp.
            " Fetch segment E1EDKA1 with Partner Function WE
            LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc>)
                                  WHERE segnam = gc_segments-gc_e1edka1. "#EC CI_STDSEQ "#EC CI_NESTED
              CLEAR ls_e1edka1.
              "Move Partner-PARVW to Local Structure
              ls_e1edka1-parvw = <lfs_idoc>-sdata+0(3).
              "Procedd if Partner Function is XF
              IF ls_e1edka1-parvw EQ lc_xf ." partner exists in SO
                "Move Partner number
                "Move segment E1EDKA1 to local structure
                ls_e1edka1 = <lfs_idoc>-sdata.
                lv_partner = ls_e1edka1-partn.
                EXIT.
              ELSE.
                CONTINUE.
              ENDIF.
            ENDLOOP.

            "Exit from Current When statement "Check if already Partner does not exists or Partner is Initial
            IF lv_partner IS INITIAL  .
              EXIT.
            ENDIF.

            IF line_exists( lt_partners[ sd_doc = gv_document_number partn_role  = lc_pl ] ).

              "Populate Itab gt_bapiparnrc. Pass Part role , old and new numbers
              CLEAR: ls_existing_part.
              ls_existing_part = lt_partners[ sd_doc = gv_document_number partn_role  = lc_pl ].

              "Convert Partnumber to internal format
              lv_partner = |{ lv_partner  ALPHA = IN WIDTH = 10 }| .

              "Populae gt_bapiparnrc with Existing Partner number
              APPEND INITIAL LINE TO gt_bapiparnrc ASSIGNING FIELD-SYMBOL(<lfs_bapiparnrc>).
              <lfs_bapiparnrc> = VALUE bapiparnrc(
                                          document    = ls_existing_part-sd_doc           "Sales order
                                          itm_number  = ls_existing_part-itm_number       "Line item
                                          updateflag  = if_mrm_constants=>gc_updkz-update "Update Flag
                                          partn_role  = lc_pl                              "LSP Partner role
                                          p_numb_old  = COND #( WHEN ls_existing_part-customer IS NOT INITIAL
                                                                THEN ls_existing_part-customer
                                                                ELSE ls_existing_part-vendor_no )
                                          p_numb_new = lv_partner ).                     "Parter Number

              "Update PO
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*
              APPEND INITIAL LINE TO gt_order_text ASSIGNING FIELD-SYMBOL(<lfs_order_text>).
              "Populate gt_order_text to pass it to BAPI
              <lfs_order_text> = VALUE bapisdtext(
                                 doc_number = gv_document_number "SO
                                 text_id    = gc_zhcg            "Text ID
                                 langu      = gc_text_langu      "Language
                                 text_line  = VALUE #( gt_header_smp_flag[ low = gc_change_types-ht1 ]-high
                                                       DEFAULT gc_smp_flag_text-no ) ). "N

**************************************Fetch partner address*******************************************
              "Fetch Address number from Customer Master KNA1
              CLEAR lv_adrnr.
              SELECT SINGLE adrnr                             "Address
                 INTO @lv_adrnr
                       FROM lfa1
                      WHERE lifnr EQ @lv_partner.
              IF sy-subrc EQ 0.
                "Fetch All PO No. and Line Items linked with SO
                SELECT ebeln,  "Purchasing Document Number
                       ebelp  "Item Number of Purchasing Document
                  FROM ekkn
                  APPENDING CORRESPONDING FIELDS OF TABLE @gt_ekkn_delivery
                  WHERE vbeln EQ @gv_document_number.
                IF sy-subrc EQ 0.
                  "Populate Itab with PO , LIneitem and Partnet address
*******************************************************************************************************************
*  PO SMP text
*  Check gt_order_text table if it contains Line item SMP flag
*  If SMP flag provided in idoc is X. Look into Tvarvc table P&M_SO_PO_SMP  for entry exists
*  Pass X to low to the TVARVC entry and fetch high value and pass it to Text Line
*******************************************************************************************************************
                  LOOP AT gt_ekkn_delivery ASSIGNING FIELD-SYMBOL(<lfs_ekkn_delivery>). "#EC CI_NESTED
                    <lfs_ekkn_delivery>-addr_no = lv_adrnr.

                    "Move header text to local variable
                    IF <lfs_order_text> IS ASSIGNED AND <lfs_order_text> IS NOT INITIAL.
                      lv_smptext = <lfs_order_text>-text_line.
                    ENDIF.

                    "Populate PO Item Text table
                    APPEND INITIAL LINE TO gt_potextitem ASSIGNING FIELD-SYMBOL(<lfs_potextitem>).
                    <lfs_potextitem> = VALUE bapimepotext(
                                       po_number = <lfs_ekkn_delivery>-ebeln   "PO
                                       po_item   = <lfs_ekkn_delivery>-ebelp   "PO Line item
                                       text_id   = gc_save_text-gc_tdid_f48    "PO Text ID
                                       text_line = COND #( WHEN lv_smptext EQ abap_true "(X)
                                                           THEN gt_pm_so_po_smp[ low = abap_true ]-high "pass low to fetch high
                                                           ELSE lv_smptext  ) ).
                    "Save PO text wit Y when SO text is X. If SO text Y , then PO text is X
                  ENDLOOP.
                ENDIF.
              ENDIF.
            ELSE.
              "Convert Partnumber to internal format
              lv_partner = |{ lv_partner  ALPHA = IN WIDTH = 10 }| .
              DATA(ls_partners) = VALUE bapiparnr( itm_number = 000000
                                                        partn_numb = lv_partner
                                                        partn_role = lc_pl ).
              APPEND ls_partners  TO gt_partners.


*            SMP Flag
              APPEND INITIAL LINE TO gt_order_text ASSIGNING <lfs_order_text>.
              "Populate gt_order_text to pass it to BAPI
              <lfs_order_text> = VALUE bapisdtext(
                                 doc_number = gv_document_number "SO
                                 text_id    = gc_zhcg            "Text ID
                                 langu      = gc_text_langu      "Language
                                 text_line  = VALUE #( gt_header_smp_flag[ low = gc_change_types-ht1 ]-high
                                                       DEFAULT gc_smp_flag_text-no ) ). "N

**************************************Fetch partner address*******************************************
              "Fetch Address number from Customer Master KNA1
              CLEAR lv_adrnr.
              SELECT SINGLE adrnr                             "Address
                 INTO @lv_adrnr
                       FROM lfa1
                      WHERE lifnr EQ @lv_partner.
              IF sy-subrc EQ 0.
                "Fetch All PO No. and Line Items linked with SO
                SELECT ebeln,  "Purchasing Document Number
                       ebelp  "Item Number of Purchasing Document
                  FROM ekkn
                  APPENDING CORRESPONDING FIELDS OF TABLE @gt_ekkn_delivery
                  WHERE vbeln EQ @gv_document_number.
                IF sy-subrc EQ 0.
                  "Populate Itab with PO , LIneitem and Partnet address
*******************************************************************************************************************
*  PO SMP text
*  Check gt_order_text table if it contains Line item SMP flag
*  If SMP flag provided in idoc is X. Look into Tvarvc table P&M_SO_PO_SMP  for entry exists
*  Pass X to low to the TVARVC entry and fetch high value and pass it to Text Line
*******************************************************************************************************************
                  LOOP AT gt_ekkn_delivery ASSIGNING <lfs_ekkn_delivery>. "#EC CI_NESTED
                    <lfs_ekkn_delivery>-addr_no = lv_adrnr.

                    "Move header text to local variable
                    IF <lfs_order_text> IS ASSIGNED AND <lfs_order_text> IS NOT INITIAL.
                      lv_smptext = <lfs_order_text>-text_line.
                    ENDIF.

                    "Populate PO Item Text table
                    APPEND INITIAL LINE TO gt_potextitem ASSIGNING <lfs_potextitem>.
                    <lfs_potextitem> = VALUE bapimepotext(
                                       po_number = <lfs_ekkn_delivery>-ebeln   "PO
                                       po_item   = <lfs_ekkn_delivery>-ebelp   "PO Line item
                                       text_id   = gc_save_text-gc_tdid_f48    "PO Text ID
                                       text_line = COND #( WHEN lv_smptext EQ abap_true "(X)
                                                           THEN gt_pm_so_po_smp[ low = abap_true ]-high "pass low to fetch high
                                                           ELSE lv_smptext  ) ).
                    "Save PO text wit Y when SO text is X. If SO text Y , then PO text is X
                  ENDLOOP.
                ENDIF.
              ENDIF.
            ENDIF. "Document exist
*  End of CR_1516 by 24093780 on 12/03/2020

***************************************************************************************
*         Customer Order Number
***************************************************************************************
          WHEN gc_change_types-con .
            LOOP AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edk02. "#EC CI_STDSEQ "#EC CI_NESTED
              DATA(ls_e1edk02) = CONV e1edk02( <lfs_idoc_data1>-sdata ).
              gs_order_header_in-purch_no_c = ls_e1edk02-belnr.
              gs_order_header_inx-updateflag = if_mrm_constants=>gc_updkz-update.
              gs_order_header_inx-purch_no_c  = abap_true.
              EXIT.
            ENDLOOP.

*           SIMPLE CHANGE FLAG "Update PO Header
            lv_date_po_header_text = abap_true.
*           Check if Text table is populated with SMP change flag
            "Populate gt_order_text to pass it to BAPI
            ls_order_text = VALUE bapisdtext(
            doc_number = gv_document_number "SO
            text_id    = gc_zhcg            "SO header Text ID
            langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-con ] )
                                 THEN  gt_header_smp_flag[ low = gc_change_types-con ]-high
                                 ELSE  gc_smp_flag_text-yes ) ).
            APPEND ls_order_text TO gt_order_text.
            CLEAR ls_order_text.
          WHEN OTHERS.
        ENDCASE.
        CLEAR lv_partner.
      ENDLOOP.
    ENDIF.

**********************************************************************
* Populate Header Texts for PO
**********************************************************************
    IF lv_date_po_header_text IS NOT INITIAL.
      CLEAR lv_date_po_header_text.
      "Call method populate_po_header_text to update PO header Texts
      populate_po_header_text( ).
    ENDIF.

*  Begin of changes "#CR_452 by 24093780 on 10.23.2020
****************************************************************************************************
*  For SO details flowing to PO Header we are populating PO header flag.
*  For SO header change and PO Line item change we need to populate PO header Flag
*  Line item flowing from SO to PO must check for SO header change exists and Fill PO header as well
****************************************************************************************************
    "Move SO_header_changes to temporary itab to delete changes related to CON
    DATA(lt_header_changes_tmp) = lt_header_changes.
    "For CON , the header data is already populated in method - populate_po_header_text
    DELETE lt_header_changes_tmp WHERE ctyp EQ gc_change_types-con. "#CR_452

*  End of changes "#CR_452 by 24093780 on 10.23.2020

    "Loop through each Item SEGMENT E1EDP01 from IDOC
    LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_e1edp01>) WHERE segnam = gc_segments-gc_e1edp01.
      CLEAR ls_e1edp01.
      ls_e1edp01 = <lfs_e1edp01>-sdata.
      "Loop through Segment E1EDPT1 for Change type/Identifier CTYP .
      LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_e1edpt1>) WHERE segnam = gc_segments-gc_e1edpt1 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                    AND psgnum = <lfs_e1edp01>-segnum . "#EC CI_STDSEQ
        ls_e1edpt1 = <lfs_e1edpt1>-sdata. "Move E1EDPT1 to local structure
        lv_segnum  = <lfs_e1edpt1>-segnum. "Fetch Segment number of parent segment E1EDPT1 and pass it to Fetch Child Segment
        IF ls_e1edpt1-tdid EQ gc_change_types-ctyp.

          "For change type CTYP in Segment E1EDPT1. Fetch E1EDPT2-TDLINE for change idntifiers seperated by  '_'
          IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2  psgnum = lv_segnum ] ).

            DATA(ls_e1edpt2) = CONV e1edpt2( gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2
                                                            psgnum = lv_segnum ]-sdata ).
            CLEAR lv_change_identifier.
            "move tdline to variable  lv_change_identifier and use SPLIT to split change identifiers into itab lt_item_changes
            lv_change_identifier = ls_e1edpt2-tdline.

            CLEAR lt_item_changes.
            SPLIT lv_change_identifier AT gc_seperator INTO TABLE lt_item_changes.

            "For each change type for each Line item Populate Final internal tables to send to BAPI_SO_CHANGE
            LOOP AT lt_item_changes ASSIGNING FIELD-SYMBOL(<lfs_change1>). "#EC CI_NESTED
              "For each line item get all the texts from Idoc
              "Use case statementto populate final internal tables for each change type
              CASE <lfs_change1>-ctyp.
**************************************************************************************************
*               INCO TERM
**************************************************************************************************
                WHEN gc_change_types-ict.
                  LOOP AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edp17 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                     AND psgnum = <lfs_e1edp01>-segnum . "#EC CI_STDSEQ "CR34817
                    CLEAR ls_e1edp17.
                    ls_e1edp17 = <lfs_idoc_data1>-sdata.
                    "Fetch data only if QUALIFIER 001
                    IF ls_e1edp17-qualf = gc_qualf_001.
                      "Populate order and orderx item tables
                      ASSIGN  gt_order_item_in[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_ord_itm>).
                      IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                        <lfs_ord_itm>-incoterms1  = ls_e1edp17-lkond.
                      ELSE.
                        ls_order_item_in = VALUE bapisditm( itm_number = ls_e1edp01-posex
                                                           incoterms1  = ls_e1edp17-lkond  ).
                        APPEND:ls_order_item_in TO gt_order_item_in.
                        CLEAR ls_order_item_in.
                      ENDIF.

                      "Updat X table
                      ASSIGN gt_order_item_inx[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_ord_itmx>).
                      IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                        <lfs_ord_itmx>-updateflag = abap_true.
                        <lfs_ord_itmx>-incoterms1 = abap_true.
                      ELSE.
                        ls_order_item_inx = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                              updateflag = abap_true
                                                              incoterms1 = abap_true ).
                        APPEND ls_order_item_inx TO gt_order_item_inx.
                        CLEAR ls_order_item_inx.
                      ENDIF.
                    ENDIF.
                  ENDLOOP.
**************************************************************************************************
*         INCO TERM 2
**************************************************************************************************
                WHEN gc_change_types-ic2.
                  LOOP AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edp17 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                     AND psgnum = <lfs_e1edp01>-segnum . "#EC CI_STDSEQ "CR34817

                    ls_e1edp17 = <lfs_idoc_data1>-sdata. "Move data to local structue E1EDP17
                    "Fetch Incoterm data only if for QUALIFER 002
                    IF ls_e1edp17-qualf = gc_qualf_002.

*                    If only Incoterm 2 is given in Idoc. Fetch Inco term from Bapi So
                      IF line_exists( lt_order_business[ sd_doc     = gv_document_number
                                                         itm_number = ls_e1edp01-posex ] ).
                        DATA(lv_incoterm1) = lt_order_business[ sd_doc = gv_document_number
                                                                itm_number = ls_e1edp01-posex ]-incoterms1.
                      ENDIF.

                      ASSIGN gt_order_item_in[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itm>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                        <lfs_ord_itm>-incoterms2  = ls_e1edp17-lktext.

                        IF <lfs_ord_itm>-incoterms1 IS INITIAL.
                          <lfs_ord_itm>-incoterms1 = lv_incoterm1.
                        ENDIF.

                      ELSE.
                        ls_order_item_in = VALUE #( itm_number = ls_e1edp01-posex
                                                    incoterms1 = lv_incoterm1
                                                    incoterms2 = ls_e1edp17-lktext  ).
                        APPEND:ls_order_item_in TO gt_order_item_in.
                        CLEAR ls_order_item_in.
                      ENDIF.

                      "Assign flag to Update TABLE
                      ASSIGN gt_order_item_inx[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itmx>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                        <lfs_ord_itmx>-updateflag = abap_true.
                        <lfs_ord_itmx>-incoterms2 = abap_true.
                      ELSE.
                        ls_order_item_inx = VALUE #( itm_number = ls_e1edp01-posex
                                                     updateflag = abap_true
                                                     incoterms2 = abap_true  ).
                        APPEND ls_order_item_inx TO gt_order_item_inx.
                        CLEAR ls_order_item_inx.
                      ENDIF.
                    ENDIF.
                  ENDLOOP.
********************************************************************************************************
*               ITEM TEXT
********************************************************************************************************
                WHEN gc_lt1.
                  LOOP  AT gt_idoc_data1 INTO DATA(ls_ctyp) WHERE segnam = gc_segments-gc_e1edpt1
                                                              AND psgnum = <lfs_e1edp01>-segnum. "#EC CI_STDSEQ "#EC CI_NESTED
                    CLEAR ls_e1edpt1.
                    ls_e1edpt1 = ls_ctyp-sdata.
                    DATA(lv_segnum_lt1) = ls_ctyp-segnum.
                    "IF changet type CTYP read E1EDPT2
                    IF ls_e1edpt1-tdid EQ gc_0002.
                      "Fetch LT1 Text from IDOC data for segment E1EDPT2
                      IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2  psgnum = lv_segnum_lt1 ] ).
                        CLEAR ls_e1edpt2.
                        ls_e1edpt2  = gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2  psgnum = lv_segnum_lt1 ]-sdata.
                        CLEAR lv_change_identifier.
                        "TDLINE contains SMP
                        lv_change_identifier  = ls_e1edpt2-tdline."*LT1 value is for E1EDPT1 for any TDID
                        "Populate gt_order text with Line item Text
                        ls_order_text = VALUE bapisdtext( itm_number = ls_e1edp01-posex
                                                    doc_number = gv_document_number
                                                    text_id    = gc_y008
                                                    langu      = gc_text_langu
                                                    langu_iso  = gc_text_langu
                                                    text_line  = lv_change_identifier ) .
                        APPEND ls_order_text TO gt_order_text.
                        CLEAR ls_order_text.

*If line item of Text ID is present in orderitems table. If not populate item and itemx tables with U
                        IF NOT line_exists(  gt_order_item_in[ itm_number = ls_e1edp01-posex ] ) .
                          CLEAR ls_order_item_in.
                          ls_order_item_in = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                          APPEND ls_order_item_in TO gt_order_item_in.
                          CLEAR ls_order_item_in.
                        ENDIF.

                        IF NOT line_exists(  gt_order_item_inx[  itm_number = ls_e1edp01-posex ] ) .
                          ls_order_item_inx = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                               updateflag = if_mrm_constants=>gc_updkz-update  ).
                          APPEND ls_order_item_inx TO gt_order_item_inx.
                          CLEAR ls_order_item_inx.
                        ENDIF.
                      ENDIF.
                    ENDIF.
                  ENDLOOP.
**************************************************************************************************
*              PARTNER DATA
**************************************************************************************************
                WHEN gc_sca.
                  LOOP AT gt_idoc_data1 INTO ls_idoc_idata WHERE segnam = gc_segments-gc_e1edpa1 "#EC CI_STDSEQ "#EC CI_NESTED
                                                            AND  psgnum = <lfs_e1edp01>-segnum.
                    CLEAR ls_e1edpa1.
                    ls_e1edpa1 = ls_idoc_idata-sdata+0(3).
                    IF  ls_e1edpa1 EQ gc_ca ." partner exists in SO
                      ls_e1edpa1 = ls_idoc_idata-sdata.
                      lv_partner = ls_e1edpa1-partn.
                      lv_partner = |{ lv_partner  ALPHA = IN WIDTH = 10 }| .
                      IF line_exists( lt_partners[  sd_doc = gv_document_number
                                                    itm_number = ls_e1edp01-posex
                                                    partn_role  = gc_sp ] ).

                        ls_existing_part = lt_partners[ sd_doc = gv_document_number
                                                        itm_number = ls_e1edp01-posex
                                                        partn_role  = gc_sp ].

                        ls_bapiparnrc = VALUE bapiparnrc(
                        document = ls_existing_part-sd_doc
                        itm_number = ls_existing_part-itm_number
                        updateflag = if_mrm_constants=>gc_updkz-update
                        partn_role =  gc_sp
                        p_numb_old  = COND #( WHEN ls_existing_part-customer IS NOT INITIAL
                                              THEN ls_existing_part-customer
                                              ELSE ls_existing_part-vendor_no )
                        p_numb_new = lv_partner ).

                        APPEND ls_bapiparnrc TO  gt_bapiparnrc.
                        CLEAR ls_bapiparnrc.

                        IF NOT line_exists(  gt_order_item_in[ itm_number = ls_e1edp01-posex ] ) .
                          CLEAR ls_order_item_in.
                          ls_order_item_in = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                          APPEND ls_order_item_in TO gt_order_item_in.
                          CLEAR ls_order_item_in.
                        ENDIF.

                        IF NOT line_exists(  gt_order_item_inx[  itm_number = ls_e1edp01-posex ] ) .
                          ls_order_item_inx = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                               updateflag = if_mrm_constants=>gc_updkz-update  ).
                          APPEND ls_order_item_inx TO gt_order_item_inx.
                          CLEAR ls_order_item_inx.
                        ENDIF.
                        EXIT.
                      ELSE.
                        ls_partners = VALUE bapiparnr( itm_number = ls_e1edp01-posex
                                                        partn_numb = lv_partner
                                                        partn_role = gc_sp ).
                        APPEND ls_partners  TO gt_partners.

                        IF NOT line_exists(  gt_order_item_in[ itm_number = ls_e1edp01-posex ] ) .
                          CLEAR ls_order_item_in.
                          ls_order_item_in = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                          APPEND ls_order_item_in TO gt_order_item_in.
                          CLEAR ls_order_item_in.
                        ENDIF.

                        IF NOT line_exists(  gt_order_item_inx[  itm_number = ls_e1edp01-posex ] ) .
                          ls_order_item_inx = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                               updateflag = if_mrm_constants=>gc_updkz-update  ).
                          APPEND ls_order_item_inx TO gt_order_item_inx.
                          CLEAR ls_order_item_inx.
                        ENDIF.
                        EXIT.
                      ENDIF.
                    ENDIF.
                  ENDLOOP.
**************************************************************************************************
*         MANUAL PRICING
**************************************************************************************************
                WHEN gc_sdp.
*                 For updating condition record, check and populate ORER_ITEM table is populatd with current Item number from IDOC
                  "Check if current item number exist in gt_order_item_in itab
                  IF NOT line_exists( gt_order_item_in[ itm_number = ls_e1edp01-posex ] ) .
                    "POpulate current item number
                    ls_order_item_in = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                    APPEND:ls_order_item_in TO gt_order_item_in.
                    CLEAR ls_order_item_in.
                  ENDIF.
                  "Fill X table with Current line item and Update Flag
                  IF NOT line_exists( gt_order_item_inx[ itm_number = ls_e1edp01-posex ] ).
                    ls_order_item_inx = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                           updateflag = if_mrm_constants=>gc_updkz-update ).
                    APPEND ls_order_item_inx  TO gt_order_item_inx.
                    CLEAR ls_order_item_inx.
                  ENDIF.
                  "Fetch E1EDP05 data
                  IF line_exists( gt_idoc_data1[ segnam =  gc_segments-gc_e1edp05  psgnum = <lfs_e1edp01>-segnum ] ).
                    ls_idoc_idata =  gt_idoc_data1[ segnam =  gc_segments-gc_e1edp05  psgnum = <lfs_e1edp01>-segnum ].
                    CLEAR ls_e1edp05.
                    ls_e1edp05 = ls_idoc_idata-sdata.
                    "Validate E1EDP05-KSCHL in IDOC if equals to ZMZQ
                    IF ls_e1edp05-kschl EQ gc_zmzq AND ls_e1edp05-krate IS NOT INITIAL.
                      "Check for which Line item Manual price is to be changed
                      "lt_conditions contains condition records for a document saved in DB
                      ASSIGN lt_conditions[ sd_doc     = gv_document_number
                                            itm_number = ls_e1edp01-posex
                                            cond_type  = gc_zmzq
                                            cond_count = lc_01 ] TO FIELD-SYMBOL(<lfs_conditions_db>).
                      IF sy-subrc EQ 0 AND <lfs_conditions_db> IS ASSIGNED .
                        "IF data exists for ZMZQ fetch count ID and Count No
                        DATA(lv_cond_st_no) = <lfs_conditions_db>-cond_st_no.
                        DATA(lv_cond_count) = <lfs_conditions_db>-cond_count.
                      ENDIF.

*                     "Fill conditions and conditionsx tables to pass to BAPI
                      ASSIGN gt_conditions_in[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_conditions_in>).
                      IF sy-subrc EQ 0 AND <lfs_conditions_in> IS ASSIGNED.
                        <lfs_conditions_in>-itm_number = ls_e1edp01-posex.      "Line item
                        <lfs_conditions_in>-cond_st_no = lv_cond_st_no.         "Step no
                        <lfs_conditions_in>-cond_count = lv_cond_count.         "Step Count
                        <lfs_conditions_in>-cond_type  = ls_e1edp05-kschl.      "Conditio type
                        <lfs_conditions_in>-cond_value = ls_e1edp05-krate / 10. "Value
                        <lfs_conditions_in>-cond_p_unt = ls_e1edp05-uprbs(5).   "Pricing Unit
                        <lfs_conditions_in>-cond_unit  = ls_e1edp05-meaun.      "Unit of measure
                      ELSE.
                        DATA(ls_conditions_in) = VALUE bapicond( itm_number = ls_e1edp01-posex
                                                                 cond_st_no = lv_cond_st_no
                                                                 cond_count = lv_cond_count
                                             cond_type      = ls_e1edp05-kschl
                                             cond_value     = ls_e1edp05-krate / 10
                                             cond_p_unt     = ls_e1edp05-uprbs(5)
                                             cond_unit      = ls_e1edp05-meaun  ).
                        APPEND:ls_conditions_in TO gt_conditions_in.
                      ENDIF.
                      ASSIGN gt_conditions_inx[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_conditions_inx>).
                      IF sy-subrc EQ 0 AND <lfs_conditions_inx> IS ASSIGNED.
                        <lfs_conditions_inx>-cond_type = ls_e1edp05-kschl.
                        <lfs_conditions_inx>-cond_st_no = lv_cond_st_no.
                        <lfs_conditions_inx>-cond_count = lv_cond_count.
                        <lfs_conditions_inx>-cond_value = abap_true.
                        <lfs_conditions_inx>-cond_p_unt = abap_true.
                        <lfs_conditions_inx>-cond_unit  = abap_true.
                        <lfs_conditions_inx>-updateflag = if_mrm_constants=>gc_updkz-update.
                      ELSE.
                        DATA(ls_conditions_inx) = VALUE bapicondx(  itm_number  = ls_e1edp01-posex
                                             cond_st_no = lv_cond_st_no
                                             cond_count = lv_cond_count
                                             cond_type     = ls_e1edp05-kschl
                                             cond_value    = abap_true
                                             cond_p_unt    = abap_true
                                             cond_unit     = abap_true
                                             updateflag    = if_mrm_constants=>gc_updkz-update    ).
                        APPEND ls_conditions_inx TO gt_conditions_inx.
                      ENDIF.

                      CLEAR:lv_cond_st_no,
                            lv_cond_count.

                    ENDIF.
                  ENDIF.
**************************************************************************************************
*               QUANTITY
**************************************************************************************************
                WHEN gc_change_types-qty.
*                 For QTY and DDT ,Check for GTS block after sucessful commit
                  gv_check_gts_block_exist = abap_true.

                  IF NOT line_exists(  gt_order_item_in[ itm_number = ls_e1edp01-posex ] ) .
                    CLEAR ls_order_item_in.
                    ls_order_item_in = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                    APPEND ls_order_item_in TO gt_order_item_in.
                    CLEAR ls_order_item_in.
                  ENDIF.

                  IF NOT line_exists(  gt_order_item_inx[  itm_number = ls_e1edp01-posex ] ) .
                    ls_order_item_inx = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                          updateflag = if_mrm_constants=>gc_updkz-update  ).
                    APPEND ls_order_item_inx TO gt_order_item_inx.
                    CLEAR ls_order_item_inx.
                  ENDIF.
*                  * Delete the line item from gt_so_schjedule with REQ_QTY is initial
                  DELETE lt_order_schedule_lines WHERE req_qty IS INITIAL. "#EC CI_STDSEQ

                  TRY .
                      DATA(ls_vbep) = lt_order_schedule_lines[ doc_number = gv_document_number itm_number = ls_e1edp01-posex ].
                    CATCH cx_sy_itab_line_not_found.
                      CLEAR : ls_vbep.
                  ENDTRY.

                  ASSIGN gt_schedule_lines[ itm_number = ls_e1edp01-posex  sched_line = ls_vbep-sched_line ] TO FIELD-SYMBOL(<lfs_schedule_lines>).
                  IF sy-subrc EQ 0 AND <lfs_schedule_lines> IS ASSIGNED.
                    <lfs_schedule_lines>-req_qty     = ls_e1edp01-menge.
                  ELSE.
                    ls_schedule_lines = VALUE bapischdl( itm_number = ls_e1edp01-posex
                                                         sched_line = ls_vbep-sched_line
                                                         req_qty    = ls_e1edp01-menge )  .
                    APPEND:ls_schedule_lines TO gt_schedule_lines.CLEAR ls_schedule_lines.
                  ENDIF.

                  ASSIGN gt_schedule_linesx[ itm_number = ls_e1edp01-posex  sched_line = ls_vbep-sched_line ] TO FIELD-SYMBOL(<lfs_schedule_linesx>).
                  IF sy-subrc EQ 0 AND <lfs_schedule_linesx> IS ASSIGNED.
                    <lfs_schedule_linesx>-req_qty = abap_true.
                    <lfs_schedule_linesx>-updateflag = if_mrm_constants=>gc_updkz-update.
                  ELSE.
                    ls_schedule_linesx = VALUE bapischdlx(
                                                       itm_number = ls_e1edp01-posex
                                                       sched_line = ls_vbep-sched_line
                                                       req_qty    = abap_true
                                                       updateflag = if_mrm_constants=>gc_updkz-update ) .
                    APPEND ls_schedule_linesx TO gt_schedule_linesx.
                    CLEAR ls_schedule_linesx.
                  ENDIF.

                  "Add PO item text
                  CALL METHOD me->fetch_po_line_item
                    EXPORTING
                      iv_posnv = CONV posnr( ls_e1edp01-posex )
                    IMPORTING
                      es_vbfa  = DATA(ls_vbfa).
                  IF ls_vbfa IS NOT INITIAL.

**********************************************************************************************
*                    Add PO item text logic here
**********************************************************************************************
                    "Check if Line item text is already added to POTEXTITEM itab
                    IF line_exists( gt_order_text[ doc_number = gv_document_number itm_number = ls_e1edp01-posex  text_id = gc_zicg ] ).
                      TRY.
                          CLEAR lv_smptext.
                          lv_smptext = gt_order_text[ doc_number = gv_document_number
                                                      itm_number = ls_e1edp01-posex
                                                      text_id = gc_zicg ]-text_line.
                          ls_potextitem = VALUE bapimepotext(
                          po_number = ls_vbfa-vbeln
                          po_item  = ls_vbfa-posnn
                          text_id   = gc_save_text-gc_tdid_f48
                          text_line = COND #( WHEN lv_smptext EQ abap_true"(X)
                                              THEN COND #( WHEN line_exists( gt_pm_so_po_smp[ low = abap_true ] )
                                                           THEN gt_pm_so_po_smp[ low = abap_true ]-high
                                                           ELSE gc_smp_flag_text-yes )
                                              ELSE lv_smptext  ) ). "Save PO text wit Y when SO text is X. If SO text Y , then PO text is Y. N with N
                        CATCH cx_sy_itab_line_not_found.
                          CLEAR : ls_potextitem.

                      ENDTRY.
                      APPEND ls_potextitem TO gt_potextitem.
                      CLEAR ls_potextitem.

                    ELSE.
                      ls_potextitem = VALUE bapimepotext( po_number = ls_vbfa-vbeln
                                                  po_item = ls_vbfa-posnn
                                                  text_id = gc_save_text-gc_tdid_f48
                                                  text_line =  abap_true ).
                      APPEND ls_potextitem TO gt_potextitem.
                      CLEAR ls_potextitem.
                    ENDIF.

*  Begin of changes "#CR_452 by 24093780 on 10.23.2020
**********************************************************************************************
*                    Add PO Header                                                                 #CR_452
**********************************************************************************************
                    IF lt_header_changes_tmp IS NOT INITIAL.
                      "Perform Mapping from TVARVC.SMP Flag in X in SO is Y in PO . N to N and Y in So is Y in PO
                      DATA(ls_potextheader) = VALUE bapimepotextheader(
                           po_number = ls_vbfa-vbeln             "PO
                           text_id   = gc_save_text-gc_tdid_f26  "PO header text ID
                           text_line = abap_true ) ."SMP flag
                      APPEND ls_potextheader TO gt_potextheader.
                      CLEAR ls_potextheader.
                    ENDIF.
*  End of changes "#CR_452 by 24093780 on 10.23.2020
*****************************************************************************************************
                    "Delete AB lines for a PO if it has one
*****************************************************************************************************
                    CALL METHOD delete_ab_texts
                      EXPORTING
                        iv_ebeln = CONV ebeln( ls_vbfa-vbeln ) ##OPERATOR[EBELN]
                        iv_ebelp = CONV ebelp( ls_vbfa-posnn ).
                  ENDIF.
**************************************************************************************************
*         DATE
**************************************************************************************************
                WHEN gc_change_types-ddt.
*                 For QTY and DDT ,Check for GTS block after sucessful commit
                  gv_check_gts_block_exist = abap_true.
                  LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_lidoc_idata>) WHERE segnam = gc_segments-gc_e1edp03 AND "#EC CI_STDSEQ "#EC CI_NESTED
                                                                                        psgnum = <lfs_e1edp01>-segnum.
                    CLEAR ls_e1edp03.
                    ls_e1edp03 = <lfs_lidoc_idata>-sdata.
                    IF ls_e1edp03-iddat = gc_002.

                      CLEAR lv_delivery_date.
                      lv_delivery_date = ls_e1edp03-datum.

                      IF NOT line_exists(  gt_order_item_in[ itm_number = ls_e1edp01-posex ] ) .
                        CLEAR ls_order_item_in.
                        ls_order_item_in = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                        APPEND ls_order_item_in TO gt_order_item_in.
                        CLEAR ls_order_item_in.
                      ENDIF.

                      IF NOT line_exists(  gt_order_item_inx[  itm_number = ls_e1edp01-posex ] ) .
                        ls_order_item_inx = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                             updateflag = if_mrm_constants=>gc_updkz-update  ).
                        APPEND ls_order_item_inx TO gt_order_item_inx.
                        CLEAR ls_order_item_inx.
                      ENDIF.


                      DELETE lt_order_schedule_lines WHERE req_qty IS INITIAL. "#EC CI_STDSEQ
                      TRY .
                          ls_vbep = lt_order_schedule_lines[ doc_number = gv_document_number itm_number = ls_e1edp01-posex ].
                        CATCH cx_sy_itab_line_not_found.
                          CLEAR : ls_vbep.
                      ENDTRY.
                      ASSIGN gt_schedule_lines[ itm_number = ls_e1edp01-posex
                                                sched_line = ls_vbep-sched_line ] TO <lfs_schedule_lines>.
                      IF sy-subrc EQ 0 AND <lfs_schedule_lines> IS ASSIGNED.
                        <lfs_schedule_lines>-req_date = lv_delivery_date.
                      ELSE.
                        ls_schedule_lines = VALUE bapischdl( itm_number = ls_e1edp01-posex
                                                             sched_line = ls_vbep-sched_line
                                                             req_date   = lv_delivery_date )  .
                        APPEND:ls_schedule_lines TO gt_schedule_lines.
                        CLEAR ls_schedule_lines.
                      ENDIF.
                      ASSIGN gt_schedule_linesx[ itm_number = ls_e1edp01-posex  sched_line = ls_vbep-sched_line ] TO <lfs_schedule_linesx>.
                      IF sy-subrc EQ 0 AND <lfs_schedule_linesx> IS ASSIGNED.
                        <lfs_schedule_linesx>-req_date = abap_true.
                        <lfs_schedule_linesx>-updateflag = if_mrm_constants=>gc_updkz-update.
                      ELSE.
                        ls_schedule_linesx = VALUE bapischdlx( itm_number = ls_e1edp01-posex
                                                               sched_line = ls_vbep-sched_line
                                                               req_date   =  abap_true
                                                               updateflag = if_mrm_constants=>gc_updkz-update ) .
                        APPEND ls_schedule_linesx TO gt_schedule_linesx.
                        CLEAR ls_schedule_linesx.
                      ENDIF.

                      "PO Item text
                      CLEAR ls_vbfa.
                      CALL METHOD me->fetch_po_line_item
                        EXPORTING
                          iv_posnv = CONV posnr( ls_e1edp01-posex )
                        IMPORTING
                          es_vbfa  = ls_vbfa.
                      IF ls_vbfa IS NOT INITIAL.
*******************************************************************************************************************
*  PO SMP text
*  Check gt_order_text table if it contains Line item SMP flag
*  If SMP flag provided in idoc is X. Look into Tvarvc table P&M_SO_PO_SMP  for entry exists
*  Pass X to low to the TVARVC entry and fetch high value and pass it to Text Line
*******************************************************************************************************************
                        IF line_exists( gt_order_text[ doc_number = gv_document_number
                                                       itm_number = ls_e1edp01-posex
                                                       text_id = gc_zicg ] ).
                          TRY.
                              CLEAR lv_smptext.
                              lv_smptext = gt_order_text[ doc_number = gv_document_number
                                                          itm_number = ls_e1edp01-posex
                                                          text_id = gc_zicg ]-text_line.
                              ls_potextitem = VALUE bapimepotext( po_number = ls_vbfa-vbeln
                              po_item  = ls_vbfa-posnn
                              text_id   = gc_save_text-gc_tdid_f48
                              text_line = COND #( WHEN lv_smptext EQ abap_true"(X)
                                                  THEN COND #( WHEN line_exists( gt_pm_so_po_smp[ low = abap_true ] )
                                                               THEN gt_pm_so_po_smp[ low = abap_true ]-high
                                                               ELSE gc_smp_flag_text-yes )
                                                  ELSE lv_smptext  ) ). "Save PO text wit Y when SO text is X. If SO text Y , then PO text is Y. N with N

                              APPEND ls_potextitem TO gt_potextitem.
                              CLEAR ls_potextitem.
                            CATCH cx_sy_itab_line_not_found.
                              CLEAR : ls_potextitem.
                          ENDTRY.
                        ELSE.
                          ls_potextitem = VALUE bapimepotext( po_number = ls_vbfa-vbeln
                                                      po_item = ls_vbfa-posnn
                                                      text_id = gc_save_text-gc_tdid_f48
                                                      text_line =  abap_true ).
                          APPEND ls_potextitem TO gt_potextitem.
                          CLEAR ls_potextitem.
                        ENDIF.

*  Begin of changes "#CR_452 by 24093780 on 10.23.2020
**********************************************************************************************
*                    Add PO Header                                                                 #CR_452
**********************************************************************************************
                        IF lt_header_changes_tmp IS NOT INITIAL.
                          "Perform Mapping from TVARVC.SMP Flag in X in SO is Y in PO . N to N and Y in So is Y in PO
                          CLEAR ls_potextheader.
                          ls_potextheader = VALUE bapimepotextheader(
                          po_number = ls_vbfa-vbeln              "PO
                          text_id   = gc_save_text-gc_tdid_f26   "PO Text Header
                          text_line = abap_true )."SMp flag
                          APPEND ls_potextheader TO gt_potextheader.
                          CLEAR ls_potextheader.
                        ENDIF.
*  Begin of changes "#CR_452 by 24093780 on 10.23.2020
*****************************************************************************************************
                        "Delete AB lines for a PO if it has one
*****************************************************************************************************
                        CALL METHOD delete_ab_texts
                          EXPORTING
                            iv_ebeln = CONV ebeln( ls_vbfa-vbeln ) ##OPERATOR[EBELN]
                            iv_ebelp = CONV ebelp( ls_vbfa-posnn ).
                      ENDIF.
                    ENDIF.
                    EXIT.
                  ENDLOOP.
**************************************************************************************************
*         CUSTOMER PART NUMBER
**************************************************************************************************
                WHEN gc_change_types-cpn.
                  LOOP AT gt_idoc_data1 ASSIGNING <lfs_lidoc_idata> WHERE segnam = gc_segments-gc_e1edp19 AND "#EC CI_NESTED
                                                                          psgnum = <lfs_e1edp01>-segnum. "#EC CI_STDSEQ
                    CLEAR ls_e1edp19.
                    ls_e1edp19 = <lfs_lidoc_idata>-sdata.
                    IF ls_e1edp19-qualf = gc_001.


                      ASSIGN  gt_order_item_in[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itm>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                        <lfs_ord_itm>-cust_mat35   = ls_e1edp19-idtnr.
                      ELSE.
                        ls_order_item_in = VALUE #( itm_number = ls_e1edp01-posex
                                                    cust_mat35   = ls_e1edp19-idtnr ).
                        APPEND:ls_order_item_in TO gt_order_item_in.
                        CLEAR ls_order_item_in.
                      ENDIF.
                      ASSIGN gt_order_item_inx[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itmx>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                        <lfs_ord_itmx>-cust_mat35 = abap_true.
                        <lfs_ord_itmx>-updateflag = if_mrm_constants=>gc_updkz-update.
                      ELSE.
                        ls_order_item_inx = VALUE #( itm_number = ls_e1edp01-posex
                                                     cust_mat35 = abap_true
                                                     updateflag = if_mrm_constants=>gc_updkz-update ).
                        APPEND ls_order_item_inx TO gt_order_item_inx.
                        CLEAR ls_order_item_inx.
                      ENDIF.
                      CLEAR:ls_order_item_in,ls_order_item_inx.
                      EXIT.
                    ENDIF.

                  ENDLOOP.

                  "Populate the Internal table to pass to BAPI_PO_CHANGE
                  CLEAR ls_vbfa.
                  CALL METHOD me->fetch_po_line_item
                    EXPORTING
                      iv_posnv = CONV posnr( ls_e1edp01-posex )
                    IMPORTING
                      es_vbfa  = ls_vbfa.
                  IF ls_vbfa IS NOT INITIAL.
                    "Add PO item text logic here
                    IF NOT line_exists( gt_potextitem[ po_number = ls_vbfa-vbeln  po_item = ls_vbfa-posnn text_id = gc_save_text-gc_tdid_f48 ] ).
                      IF line_exists( gt_order_text[ itm_number = ls_e1edp01-posex doc_number = gv_document_number text_id = gc_zicg ] ).

                        ls_potextitem = VALUE #( po_number = ls_vbfa-vbeln
                                                   po_item = ls_vbfa-posnn
                                                   text_id = gc_save_text-gc_tdid_f48
                                                   text_line =  gt_order_text[ itm_number = ls_e1edp01-posex doc_number = gv_document_number text_id = gc_zicg ]-text_line ).
                        APPEND ls_potextitem TO gt_potextitem.
                        CLEAR ls_potextitem.
                      ENDIF.
                    ENDIF.

*  Begin of changes "#CR_452 by 24093780 on 10.23.2020
**********************************************************************************************
*                    Add PO Header                                                                 #CR_452
**********************************************************************************************
                    IF lt_header_changes_tmp IS NOT INITIAL.
                      "Perform Mapping from TVARVC.SMP Flag in X in SO is Y in PO . N to N and Y in So is Y in PO
                      CLEAR ls_potextheader.
                      ls_potextheader = VALUE bapimepotextheader(
                      po_number = ls_vbfa-vbeln              "PO
                      text_id   = gc_save_text-gc_tdid_f26   "PO Header Text ID
                      text_line = abap_true )."SMP flag
                      APPEND ls_potextheader TO gt_potextheader.
                      CLEAR ls_potextheader.
                    ENDIF.
*  End of changes "#CR_452 by 24093780 on 10.23.2020
                  ENDIF.
**************************************************************************************************
*         LINE ITEM CANCEL
**************************************************************************************************
                WHEN gc_icl.
                  CLEAR gv_abgru.
                  gv_abgru = ls_e1edp01-abgru.
                  "Populate the Internal table to pass to BAPI_PO_CHANGE
                  CLEAR ls_vbfa.
                  CALL METHOD me->fetch_po_line_items
                    EXPORTING
                      iv_posnv = CONV posnr( ls_e1edp01-posex )
                    IMPORTING
                      et_vbfa  = DATA(lt_vbfa).
                  IF lt_vbfa IS NOT INITIAL.
*                   Fetch SMP FLAG
                    LOOP AT gt_idoc_data1  INTO DATA(ls_idoc_data) WHERE segnam = gc_segments-gc_e1edp35 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                        AND psgnum = <lfs_e1edp01>-segnum .
                      ls_1058_e1edp35 = ls_idoc_data-sdata.

                      DATA(lv_qualz) = ls_1058_e1edp35-qualz.
                      IF lv_qualz  EQ gc_smp.
                        "Fetch SMP flag and save it in a variable
                        DATA(lv_text) = ls_1058_e1edp35-cusadd.
                        "if Text is X make the PO text to Y
                        IF lv_text EQ abap_true."(X)
                          "pass X as low and fetch high value from TVARVC entry gt_pm_so_po_smp table
                          IF line_exists( gt_pm_so_po_smp[ low = abap_true ] ).
                            "Fetch high value from TVARVC
                            lv_text = gt_pm_so_po_smp[ low = abap_true ]-high.
                          ENDIF.
                        ENDIF.
                      ENDIF.
                    ENDLOOP.
                    LOOP AT lt_vbfa ASSIGNING FIELD-SYMBOL(<lfs_vbfa>). "#EC CI_NESTED
*                     Collect  all line items to be deleted
                      DATA(ls_vbfa_po) = VALUE gty_vbfa( vbelv = <lfs_vbfa>-vbelv
                                                         posnv = <lfs_vbfa>-posnv
                                                         vbeln = <lfs_vbfa>-vbeln
                                                         posnn = <lfs_vbfa>-posnn
                                                         abgru = gv_abgru
                                                         smp_text = lv_text   ).
                      APPEND ls_vbfa_po TO gt_vbfa_icl.
                    ENDLOOP.
                  ELSE.
                    ASSIGN  gt_order_item_in[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itm>.
                    IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                      <lfs_ord_itm>-itm_number =  ls_e1edp01-posex.
                      <lfs_ord_itm>-reason_rej = gv_abgru.
                    ELSE.
                      ls_order_item_in = VALUE #(  itm_number = ls_e1edp01-posex
                                                   reason_rej = gv_abgru  ) .
                      APPEND:ls_order_item_in TO gt_order_item_in.
                      CLEAR ls_order_item_in.
                    ENDIF.

                    ASSIGN gt_order_item_inx[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itmx>.
                    IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                      <lfs_ord_itmx>-itm_number = ls_e1edp01-posex.
                      <lfs_ord_itmx>-updateflag = abap_true.
                      <lfs_ord_itmx>-reason_rej = abap_true.
                    ELSE.
                      ls_order_item_inx = VALUE #(  itm_number = ls_e1edp01-posex
                                      updateflag = abap_true
                                      reason_rej = abap_true ).
                      APPEND ls_order_item_inx TO gt_order_item_inx.
                      CLEAR ls_order_item_inx.
                    ENDIF.

*  Begin of changes "#CR_452 by 24093780 on 10.23.2020
**********************************************************************************************
*                    Add PO Header                                                                 #CR_452
**********************************************************************************************
                    IF lt_header_changes_tmp IS NOT INITIAL.
                      "Perform Mapping from TVARVC.SMP Flag in X in SO is Y in PO . N to N and Y in So is Y in PO
                      CLEAR ls_potextheader.
                      ls_potextheader = VALUE bapimepotextheader(
                           po_number = ls_vbfa-vbeln
                           text_id   = gc_save_text-gc_tdid_f26
                           text_line = abap_true ).
                      APPEND ls_potextheader TO gt_potextheader.
                      CLEAR ls_potextheader.
                    ENDIF.
                  ENDIF.
*  End of changes "#CR_452 by 24093780 on 10.23.2020
**************************************************************************************************
*               SPLIT Scenario
**************************************************************************************************
                WHEN gc_change_types-csp.
                  LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_idata>) WHERE segnam = gc_segments-gc_e1edp03 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                                   AND psgnum = <lfs_e1edp01>-segnum.

                    CLEAR  ls_e1edp03.
                    ls_e1edp03 = <lfs_idoc_idata>-sdata.
                    "fetch E1EDP03 for Qualifier 002
                    IF ls_e1edp03-iddat = gc_002.
                      CLEAR lv_delivery_date.
                      lv_delivery_date = ls_e1edp03-datum.
                      "Fetch IDOC data and pass to ls_vbep
                      ls_vbep_detail-vbeln = gv_document_number.
                      ls_vbep_detail-posnr = ls_e1edp01-posex.
                      ls_vbep_detail-edatu = lv_delivery_date.
                      ls_vbep_detail-wmeng = ls_e1edp01-menge.

*                    Fetch SMp Flag from Idoc
                      IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edp35 psgnum =  <lfs_e1edp01>-segnum ] ).
                        "Fetchg SMP Flag from segmet 35 for QUALZ SMP and ZAK
                        LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_e1edp35>) WHERE segnam = gc_segments-gc_e1edp35 AND "#EC CI_STDSEQ "#EC CI_NESTED
                                                                                          psgnum = <lfs_e1edp01>-segnum.
                          CLEAR ls_e1edp35.
                          ls_e1edp35 = <lfs_e1edp35>-sdata.
                          "For Qualifier SMP
                          IF ls_e1edp35-qualz EQ gc_smp.
                            ls_vbep_detail-smp_flag =  COND #( WHEN ls_e1edp35-cusadd EQ abap_true"(X) .
                                              THEN COND #( WHEN line_exists( gt_pm_so_po_smp[ low = abap_true ] )
                                                                THEN gt_pm_so_po_smp[ low = abap_true ]-high )
                                             ELSE ls_e1edp35-cusadd ).
                            "For Qualifier ZAK
                          ELSEIF  ls_e1edp35-qualz EQ gc_zak.
                            ls_vbep_detail-smp_addtnl = ls_e1edp35-cusadd.
                            "For Qualifier SRQ
                          ELSEIF ls_e1edp35-qualz EQ gc_srq.
                            ls_vbep_detail-srq = ls_e1edp35-cusadd.
                            CONDENSE ls_vbep_detail-srq NO-GAPS.
                            "For Qualifier ZSI
                          ELSEIF ls_e1edp35-qualz EQ gc_zsi.
                            ls_vbep_detail-zsi = ls_e1edp35-cusadd.
                            CONDENSE ls_vbep_detail-zsi NO-GAPS.
                          ENDIF.
                        ENDLOOP.
                      ENDIF.
                      EXIT.
                    ENDIF.
                  ENDLOOP.
                  APPEND ls_vbep_detail TO gt_vbep_detail."Populate VBEP detail table for CSP
                  CLEAR ls_vbep_detail.
              ENDCASE.
            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->GET_ITEM_DATA_HOI
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_item_data_hoi.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  GET_ITEM_DATA_HOI                                *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  11/29/2020                                       *
**  Object ID         :  OTCI1084_CR_1516                                 *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch Item data from IDOC                        *
**  Transport Request :  S4DK948161                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #| Changed By  | Description                     *
*&-----------------------------------------------------------------------*
*&-----------------------------------------------------------------------*
*& 11.23.2020 | CR_1516  |  24093780   | S4DK948161 HOI Enhancement      *
*&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD GET_ITEM_DATA_HOI
***&----------------------------------------------------------------------*
*   Local internal table declaration
    DATA:lt_return1              TYPE STANDARD TABLE OF bapiret2,
         lt_order_items          TYPE STANDARD TABLE OF bapisditbos,
         lt_order_schedule_lines TYPE STANDARD TABLE OF bapisdhedu,
         lt_partners             TYPE STANDARD TABLE OF bapisdpart,
         lt_conditions           TYPE STANDARD TABLE OF bapisdcond,
         lt_order_business       TYPE STANDARD TABLE OF bapisdbusi,
         lt_header_changes       TYPE gtt_ctyp,
         lt_item_changes         TYPE gtt_ctyp.

*   Local data declarations
    DATA:lv_partner TYPE partner. "Partner number

*   Local structure declaration
    DATA:
         ls_e1edkt1 TYPE e1edkt1,
         ls_e1edka1 TYPE e1edka1,
         ls_e1edp35 TYPE e1edp35,
         ls_e1edp05 TYPE e1edp05,
         ls_e1edkt2 TYPE e1edkt2,
         ls_e1edp01 TYPE e1edp01,
         ls_e1edp03 TYPE e1edp03,
         ls_e1edp19 TYPE e1edp19,
         ls_e1edpt1 TYPE e1edpt1,
         ls_e1edpa1 TYPE e1edpa1,
         ls_e1edp17 TYPE e1edp17.

*   Local constants
    CONSTANTS:lc_01 TYPE dzaehk_short VALUE 01. "Condition counter (short length)

    "get doc. header details
    gv_document_number   =  |{ gv_document_number  ALPHA = IN WIDTH = 10 }| .
    " Sales Order: Display Order Data of Order
    CALL FUNCTION 'BS01_SALESORDER_GETDETAIL'
    "#EC CI_USAGE_OK[2438131] "Added pragma for code remediation
      EXPORTING
        salesdocument        = gv_document_number          "SD document table
      TABLES
        return               = lt_return1                  "Bapi return Table
        order_items          = lt_order_items
        order_schedule_lines = lt_order_schedule_lines     "Schedule lines (Date and Quantity lines)
        order_business       = lt_order_business
        order_partners       = lt_partners                 "Partner profile
        order_conditions     = lt_conditions.              "Condition Lines

**************************************************************************************************
*                        HEADER LEVEL CHANGES
**************************************************************************************************
    "Fetch header level changes
    CALL METHOD fetch_header_change_identifier( IMPORTING et_header_changes = lt_header_changes ).

*   Loop at GT_header_changes and Populate Header Internal table for SO BAPI
    IF lt_header_changes IS NOT INITIAL. "proceed only for any changes in Header
      LOOP AT lt_header_changes ASSIGNING FIELD-SYMBOL(<lfs_header_changes>).
        "Check change type for header level changes
        CASE <lfs_header_changes>-ctyp.
**************************************************************************************************
*         SALES GROUP
**************************************************************************************************
          WHEN gc_change_types-sgp.
            LOOP AT gt_idoc_data1  ASSIGNING FIELD-SYMBOL(<lfs_idoc_data1>) "#EC CI_STDSEQ "#EC CI_NESTED
                                                    WHERE segnam = gc_segments-gc_e1edk14 .
              DATA(ls_e1edk14) = CONV e1edk14( <lfs_idoc_data1>-sdata ).
              IF ls_e1edk14-qualf = gc_010.
                "Headers structure
                gs_order_header_in_hoi-sales_grp = ls_e1edk14-orgid .
                "Update Structure for header
                gs_order_header_inx_hoi-updateflag = if_mrm_constants=>gc_updkz-update.
                gs_order_header_inx_hoi-sales_grp  = abap_true .
                EXIT.
              ENDIF.
            ENDLOOP.
            "Check if Simple change flag for header is Y, if not pass Y to header text data
            APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING FIELD-SYMBOL(<lfs_order_text>).
            <lfs_order_text> = VALUE bapisdtext(
            doc_number = gv_document_number "SO
            text_id    = gc_zhcg            "Text ID
            langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 "Added tvarvc gt_header_smp_flag for SMp flag
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-sgp ] )
                                 THEN gt_header_smp_flag[ low = gc_change_types-sgp ]-high
                                 ELSE gc_smp_flag_text-yes ) ) .

**************************************************************************************************
*         PAYMENT TERMS
**************************************************************************************************
          WHEN gc_change_types-ptm.
            LOOP AT gt_idoc_data1  ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edk01. "#EC CI_STDSEQ "#EC CI_NESTED
              DATA(ls_e1edk01) = CONV e1edk01( <lfs_idoc_data1>-sdata ).
              "Header structure
              gs_order_header_in_hoi-pmnttrms    = ls_e1edk01-zterm.
              "Update field Structure
              gs_order_header_inx_hoi-updateflag = if_mrm_constants=>gc_updkz-update.
              gs_order_header_inx_hoi-pmnttrms   = abap_true.
              EXIT.
            ENDLOOP.
            "Check if Simple change flag for header is Y, if not pass Y to header text data
            IF <lfs_order_text> IS ASSIGNED .
              UNASSIGN <lfs_order_text>.
            ENDIF.
            APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
            <lfs_order_text> = VALUE bapisdtext(
            doc_number = gv_document_number "SO
            text_id    = gc_zhcg            "Text ID
            langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 Added TVARVC for OTC header SMP flag
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-ptm ] )
                                 THEN  gt_header_smp_flag[ low = gc_change_types-ptm ]-high
                                 ELSE gc_smp_flag_text-yes ) ).

**************************************************************************************************
*         SO HEADER TEXT
**************************************************************************************************
          WHEN gc_change_types-ht1.
            LOOP  AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edkt1. "#EC CI_STDSEQ "#EC CI_NESTED
              CLEAR ls_e1edkt1.
              ls_e1edkt1 = <lfs_idoc_data1>-sdata.
              DATA(lv_segnum) = <lfs_idoc_data1>-segnum.
              "IF changet type CTYP read E1EDPT2
              IF ls_e1edkt1-tdid EQ gc_0002.
                IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edkt2  psgnum = lv_segnum ] ).
                  CLEAR ls_e1edkt2.
                  ls_e1edkt2  = gt_idoc_data1[ segnam = gc_segments-gc_e1edkt2  psgnum = lv_segnum ]-sdata .

                  DATA(lv_change_identifier) = ls_e1edkt2-tdline."*LT1 value is for E1EDPT1 for any TDID
                  IF <lfs_order_text> IS ASSIGNED .
                    UNASSIGN <lfs_order_text>.
                  ENDIF.
                  APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
                  <lfs_order_text> = VALUE bapisdtext( doc_number = gv_document_number
                                                       text_id    = gc_y006
                                                       langu      = gc_text_langu
                                                       text_line  = lv_change_identifier ).

                  EXIT.
                ENDIF.
              ENDIF.
            ENDLOOP.

            IF <lfs_order_text> IS ASSIGNED .
              UNASSIGN <lfs_order_text>.
            ENDIF.
            APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
            <lfs_order_text> = VALUE bapisdtext(
            doc_number = gv_document_number
            text_id    = gc_zhcg
            langu      = gc_text_langu
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 Added TVARVC for header SMP flag
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-ht1 ] )
                                 THEN  gt_header_smp_flag[ low = gc_change_types-ht1 ]-high
                                 ELSE gc_smp_flag_text-yes ) ).


**************************************************************************************************
*         SHIP TO ID
**************************************************************************************************
          WHEN gc_change_types-spt.
            " Fetch segment E1EDKA1 with Partner Function WE
            LOOP AT gt_idoc_data1 INTO DATA(ls_idoc_idata) WHERE segnam = gc_segments-gc_e1edka1. "#EC CI_STDSEQ "#EC CI_NESTED
              CLEAR ls_e1edka1.
              "Move First 3 characters of segment E1EDKA1 which contains Part Fucntion.
              ls_e1edka1 = ls_idoc_idata-sdata+0(3).
              "Procedd only if WE
              IF ls_e1edka1 EQ gc_we ." partner exists in SO
                "Check if already PArtnet exists
                IF line_exists( lt_partners[ sd_doc      = gv_document_number
                                             partn_role  = gc_we ] ).
                  "Populate Itab gt_bapiparnrc. Pass Part role , old and new numbers
                  DATA(ls_existing_part) = lt_partners[ sd_doc = gv_document_number  partn_role  = gc_we ].
                  "Move segment E1EDKA1 to local structure
                  ls_e1edka1 = ls_idoc_idata-sdata.
                  "Move Partner number
                  lv_partner = ls_e1edka1-partn.
                  "Convert Partnumber to internal format
                  lv_partner = |{ lv_partner  ALPHA = IN WIDTH = 10 }| .
                  "Populae itab with Old
                  APPEND INITIAL LINE TO gt_bapiparnrc_hoi ASSIGNING FIELD-SYMBOL(<lfs_bapiparnrc>).
                  <lfs_bapiparnrc> = VALUE bapiparnrc(
                                              document    = ls_existing_part-sd_doc
                                              itm_number  = ls_existing_part-itm_number
                                              updateflag  = if_mrm_constants=>gc_updkz-update
                                              partn_role  = ls_e1edka1-parvw
                                              p_numb_old  = COND #( WHEN ls_existing_part-customer IS NOT INITIAL
                                                                    THEN ls_existing_part-customer
                                                                    ELSE ls_existing_part-vendor_no )
                                              p_numb_new = lv_partner ).

                  "Update PO
                  "Populate gt_order_text to pass it to BAPI
                  IF <lfs_order_text> IS ASSIGNED .
                    UNASSIGN <lfs_order_text>.
                  ENDIF.
                  APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
                  <lfs_order_text> = VALUE bapisdtext(
                  doc_number = gv_document_number "SO
                  text_id    = gc_zhcg            "Text ID
                  langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452 Added for TVARVC header SMP flag
                  text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-ht1 ] )
                                       THEN  gt_header_smp_flag[ low = gc_change_types-ht1 ]-high
                                       ELSE gc_smp_flag_text-no ) ). "N


*                 SIMPLE CHANGE FLAG "Update PO Header
                  DATA(lv_date_po_header_text) = abap_true.
**************************************Fetch partner address*******************************************
                  "Continue only if partner number is present in Idoc
                  EXIT.
                ENDIF.
              ENDIF.
            ENDLOOP.

***************************************************************************************
*         Customer Order Number
***************************************************************************************
          WHEN gc_change_types-con .
            LOOP AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edk02. "#EC CI_STDSEQ "#EC CI_NESTED
              DATA(ls_e1edk02) = CONV e1edk02( <lfs_idoc_data1>-sdata ).
              gs_order_header_in_hoi-purch_no_c = ls_e1edk02-belnr.
              gs_order_header_inx_hoi-updateflag = if_mrm_constants=>gc_updkz-update.
              gs_order_header_inx_hoi-purch_no_c  = abap_true.
              EXIT.
            ENDLOOP.

*           SIMPLE CHANGE FLAG "Update PO Header
            lv_date_po_header_text = abap_true.
*           Check if Text table is populated with SMP change flag
            "Populate gt_order_text to pass it to BAPI
            IF <lfs_order_text> IS ASSIGNED .
              UNASSIGN <lfs_order_text>.
            ENDIF.
            APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
            <lfs_order_text> = VALUE bapisdtext(
            doc_number = gv_document_number "SO
            text_id    = gc_zhcg            "SO header Text ID
            langu      = gc_text_langu      "Language
* / Populate TEXT_LINE with IDOC SMP Flag data Segment E1EDK35 .
*   IF SMP flag does not comewith Idoc fetch from TVARVC gt_header_smp_flag
*   If TVARVC does not contain data then populate data with Mapping data provided in Excel /*          #CR_452
            text_line  = COND #( WHEN line_exists( gt_header_smp_flag[ low = gc_change_types-con ] )
                                 THEN  gt_header_smp_flag[ low = gc_change_types-con ]-high
                                 ELSE  gc_smp_flag_text-yes ) ).
          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.
    ENDIF.



****************************************************************************************************
*  For SO details flowing to PO Header we are populating PO header flag.
*  For SO header change and PO Line item change we need to populate PO header Flag
*  Line item flowing from SO to PO must check for SO header change exists and Fill PO header as well
****************************************************************************************************
    "Move SO_header_changes to temporary itab to delete changes related to CON
    DATA(lt_header_changes_tmp) = lt_header_changes.
    "For CON , the header data is already populated in method - populate_po_header_text
    DELETE lt_header_changes_tmp WHERE ctyp EQ gc_change_types-con. "#CR_452

*  End of changes "#CR_452 by 24093780 on 10.23.2020

    "Loop through each Item SEGMENT E1EDP01 from IDOC
    LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_e1edp01>) WHERE segnam = gc_segments-gc_e1edp01.
      CLEAR ls_e1edp01.
      ls_e1edp01 = <lfs_e1edp01>-sdata.
      "Loop through Segment E1EDPT1 for Change type/Identifier CTYP .
*     /* Second loop only loops through Line item Segments E1EDP01 with inner loop psegnum = Segment Name
      LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_e1edpt1>) WHERE segnam = gc_segments-gc_e1edpt1 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                    AND psgnum = <lfs_e1edp01>-segnum . "#EC CI_STDSEQ
        ls_e1edpt1 = <lfs_e1edpt1>-sdata. "Move E1EDPT1 to local structure
        lv_segnum  = <lfs_e1edpt1>-segnum. "Fetch Segment number of parent segment E1EDPT1 and pass it to Fetch Child Segment
        IF ls_e1edpt1-tdid EQ gc_change_types-ctyp.

          "For change type CTYP in Segment E1EDPT1. Fetch E1EDPT2-TDLINE for change idntifiers seperated by  '_'
          IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2  psgnum = lv_segnum ] ).

            DATA(ls_e1edpt2) = CONV e1edpt2( gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2
                                                            psgnum = lv_segnum ]-sdata ).
            CLEAR lv_change_identifier.
            "move tdline to variable  lv_change_identifier and use SPLIT to split change identifiers into itab lt_item_changes
            lv_change_identifier = ls_e1edpt2-tdline.

            CLEAR lt_item_changes.
            SPLIT lv_change_identifier AT gc_seperator INTO TABLE lt_item_changes.

            "For each change type for each Line item Populate Final internal tables to send to BAPI_SO_CHANGE
            LOOP AT lt_item_changes ASSIGNING FIELD-SYMBOL(<lfs_change1>). "#EC CI_NESTED
              "For each line item get all the texts from Idoc
              "Use case statementto populate final internal tables for each change type
              CASE <lfs_change1>-ctyp.
**************************************************************************************************
*               INCO TERM
**************************************************************************************************
                WHEN gc_change_types-ict.
                  LOOP AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edp17 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                     AND psgnum = <lfs_e1edp01>-segnum . "#EC CI_STDSEQ "CR34817
                    CLEAR ls_e1edp17.
                    ls_e1edp17 = <lfs_idoc_data1>-sdata.
                    "Fetch data only if QUALIFIER 001
                    IF ls_e1edp17-qualf = gc_qualf_001.
                      "Populate order and orderx item tables
                      ASSIGN  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_ord_itm>).
                      IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                        <lfs_ord_itm>-incoterms1  = ls_e1edp17-lkond.
                      ELSE.
                        APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING FIELD-SYMBOL(<lfs_order_item_in>).
                        <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex
                                                           incoterms1  = ls_e1edp17-lkond  ).

                      ENDIF.

                      "Updat X table
                      ASSIGN gt_order_item_inx_hoi[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_ord_itmx>).
                      IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                        <lfs_ord_itmx>-updateflag = abap_true.
                        <lfs_ord_itmx>-incoterms1 = abap_true.
                      ELSE.
                        APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING FIELD-SYMBOL(<lfs_order_item_inx>).
                        <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                                 updateflag = abap_true
                                                                 incoterms1 = abap_true ).
                      ENDIF.
                    ENDIF.
                  ENDLOOP.
*        Begin of CR_1516 by 24093780 on 12/03/2020
**************************************************************************************************
*         Storage Location
**************************************************************************************************
                WHEN gc_change_types-stl.
                  "For Storage location change in BAPI we must also Pass PLANT along with ST LOC.
                  "lt_order_items contains Item details of SO populated from BS01_SALESORDER_GETDETAIL
                  DATA(lv_werks) = VALUE #( lt_order_items[ doc_number = gv_document_number
                                                            itm_number = ls_e1edp01-posex ]-plant DEFAULT space ).
                  "Populate order and orderx item tables
                  ASSIGN  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itm>.
                  IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                    <lfs_ord_itm>-store_loc  = ls_e1edp01-lgort.  "Storage Location
                    <lfs_ord_itm>-plant  = lv_werks.              "Plant
                  ELSE.
                    APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                    <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex
                                                           plant      = lv_werks              "Plant
                                                           store_loc  = ls_e1edp01-lgort  ).  "Storage Loc

                  ENDIF.

                  "Updat X table
                  ASSIGN gt_order_item_inx_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itmx>.
                  IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                    <lfs_ord_itmx>-updateflag = abap_true. "Update True
                    <lfs_ord_itmx>-store_loc  = abap_true. "SLOC
                    <lfs_ord_itmx>-plant      = abap_true. "Plant
                  ELSE.
                    APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                    <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                             updateflag = abap_true
                                                             plant      = abap_true
                                                             store_loc  = abap_true ).
                  ENDIF.
*        End of CR_1516 by 24093780 on 12/03/2020
**************************************************************************************************
*         INCO TERM 2
**************************************************************************************************
                WHEN gc_change_types-ic2.
                  LOOP AT gt_idoc_data1 ASSIGNING <lfs_idoc_data1> WHERE segnam = gc_segments-gc_e1edp17 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                     AND psgnum = <lfs_e1edp01>-segnum . "#EC CI_STDSEQ "CR34817

                    ls_e1edp17 = <lfs_idoc_data1>-sdata. "Move data to local structue E1EDP17
                    "Fetch Incoterm data only if for QUALIFER 002
                    IF ls_e1edp17-qualf = gc_qualf_002.

*                    If only Incoterm 2 is given in Idoc. Fetch Inco term from Bapi So
                      IF line_exists( lt_order_business[ sd_doc     = gv_document_number
                                                         itm_number = ls_e1edp01-posex ] ).
                        DATA(lv_incoterm1) = lt_order_business[ sd_doc = gv_document_number
                                                                itm_number = ls_e1edp01-posex ]-incoterms1.
                      ENDIF.

                      ASSIGN gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itm>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                        <lfs_ord_itm>-incoterms2  = ls_e1edp17-lktext.

                        IF <lfs_ord_itm>-incoterms1 IS INITIAL.
                          <lfs_ord_itm>-incoterms1 = lv_incoterm1.
                        ENDIF.

                      ELSE.
                        IF  <lfs_order_item_in> IS ASSIGNED.
                          UNASSIGN <lfs_order_item_in>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                        <lfs_order_item_in> = VALUE #( itm_number = ls_e1edp01-posex
                                                    incoterms1 = lv_incoterm1
                                                    incoterms2 = ls_e1edp17-lktext  ).

                      ENDIF.

                      "Assign flag to Update TABLE
                      ASSIGN gt_order_item_inx_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itmx>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                        <lfs_ord_itmx>-updateflag = abap_true.
                        <lfs_ord_itmx>-incoterms2 = abap_true.
                      ELSE.
                        IF <lfs_order_item_inx> IS ASSIGNED.
                          UNASSIGN <lfs_order_item_inx>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                        <lfs_order_item_inx> = VALUE #( itm_number = ls_e1edp01-posex
                                                        updateflag = abap_true
                                                        incoterms2 = abap_true  ).

                      ENDIF.
                    ENDIF.
                  ENDLOOP.
********************************************************************************************************
*               ITEM TEXT
********************************************************************************************************
                WHEN gc_lt1.
                  LOOP  AT gt_idoc_data1 INTO DATA(ls_ctyp) WHERE segnam = gc_segments-gc_e1edpt1
                                                              AND psgnum = <lfs_e1edp01>-segnum. "#EC CI_STDSEQ "#EC CI_NESTED
                    CLEAR ls_e1edpt1.
                    ls_e1edpt1 = ls_ctyp-sdata.
                    DATA(lv_segnum_lt1) = ls_ctyp-segnum.
                    "IF changet type CTYP read E1EDPT2
                    IF ls_e1edpt1-tdid EQ gc_0002.
                      "Fetch LT1 Text from IDOC data for segment E1EDPT2
                      IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2  psgnum = lv_segnum_lt1 ] ).
                        CLEAR ls_e1edpt2.
                        ls_e1edpt2  = gt_idoc_data1[ segnam = gc_segments-gc_e1edpt2  psgnum = lv_segnum_lt1 ]-sdata.
                        CLEAR lv_change_identifier.
                        "TDLINE contains SMP
                        lv_change_identifier  = ls_e1edpt2-tdline."*LT1 value is for E1EDPT1 for any TDID
                        "Populate gt_order text with Line item Text
                        IF <lfs_order_text> IS ASSIGNED .
                          UNASSIGN <lfs_order_text>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_order_text_hoi ASSIGNING <lfs_order_text>.
                        <lfs_order_text> = VALUE bapisdtext( itm_number = ls_e1edp01-posex
                                                    doc_number = gv_document_number
                                                    text_id    = gc_y008
                                                    langu      = gc_text_langu
                                                    langu_iso  = gc_text_langu
                                                    text_line  = lv_change_identifier ) .


*If line item of Text ID is present in orderitems table. If not populate item and itemx tables with U
                        IF NOT line_exists(  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] ) .
                          IF  <lfs_order_item_in> IS ASSIGNED.
                            UNASSIGN <lfs_order_item_in>.
                          ENDIF.
                          APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                          <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                        ENDIF.

                        IF NOT line_exists(  gt_order_item_inx_hoi[  itm_number = ls_e1edp01-posex ] ) .
                          IF <lfs_order_item_inx> IS ASSIGNED.
                            UNASSIGN <lfs_order_item_inx>.
                          ENDIF.
                          APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                          <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                               updateflag = if_mrm_constants=>gc_updkz-update  ).
                        ENDIF.
                      ENDIF.
                    ENDIF.
                  ENDLOOP.
**************************************************************************************************
*              PARTNER DATA
**************************************************************************************************
                WHEN gc_sca.
                  LOOP AT gt_idoc_data1 INTO ls_idoc_idata WHERE segnam = gc_segments-gc_e1edpa1 "#EC CI_STDSEQ "#EC CI_NESTED
                                                            AND  psgnum = <lfs_e1edp01>-segnum.
                    CLEAR ls_e1edpa1.
                    ls_e1edpa1 = ls_idoc_idata-sdata+0(3).
                    IF  ls_e1edpa1 EQ gc_ca ." partner exists in SO
                      ls_e1edpa1 = ls_idoc_idata-sdata.
                      lv_partner = ls_e1edpa1-partn.
                      lv_partner = |{ lv_partner  ALPHA = IN WIDTH = 10 }| .
                      IF line_exists( lt_partners[  sd_doc = gv_document_number
                                                    itm_number = ls_e1edp01-posex
                                                    partn_role  = gc_sp ] ).

                        ls_existing_part = lt_partners[ sd_doc = gv_document_number
                                                        itm_number = ls_e1edp01-posex
                                                        partn_role  = gc_sp ].

                        APPEND INITIAL LINE TO gt_bapiparnrc_hoi ASSIGNING <lfs_bapiparnrc>.

                        <lfs_bapiparnrc> = VALUE bapiparnrc(
                                           document = ls_existing_part-sd_doc
                                           itm_number = ls_existing_part-itm_number
                                           updateflag = if_mrm_constants=>gc_updkz-update
                                           partn_role = gc_sp
                                           p_numb_old  = COND #( WHEN ls_existing_part-customer IS NOT INITIAL
                                                                 THEN ls_existing_part-customer
                                                                 ELSE ls_existing_part-vendor_no )
                                           p_numb_new = lv_partner ).

                        IF NOT line_exists(  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] ) .
                          IF <lfs_order_item_in> IS ASSIGNED.
                            UNASSIGN <lfs_order_item_in>.
                          ENDIF.
                          APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                          <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex ).

                        ENDIF.

                        IF NOT line_exists(  gt_order_item_inx_hoi[  itm_number = ls_e1edp01-posex ] ) .
                          IF <lfs_order_item_inx> IS ASSIGNED.
                            UNASSIGN <lfs_order_item_inx>.
                          ENDIF.
                          APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                          <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                               updateflag = if_mrm_constants=>gc_updkz-update  ).
                        ENDIF.
                        EXIT.
                      ELSE.
                        APPEND INITIAL LINE TO gt_partners_hoi ASSIGNING FIELD-SYMBOL(<lfs_partners>).
                        <lfs_partners> = VALUE bapiparnr( itm_number = ls_e1edp01-posex
                                                          partn_numb = lv_partner
                                                          partn_role = gc_sp ).

                        IF NOT line_exists(  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] ) .
                          IF <lfs_order_item_in> IS ASSIGNED.
                            UNASSIGN <lfs_order_item_in>.
                          ENDIF.
                          APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                          <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex ).

                        ENDIF.

                        IF NOT line_exists(  gt_order_item_inx_hoi[  itm_number = ls_e1edp01-posex ] ) .
                          IF <lfs_order_item_inx> IS ASSIGNED.
                            UNASSIGN <lfs_order_item_inx>.
                          ENDIF.
                          APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                          <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                                   updateflag = if_mrm_constants=>gc_updkz-update  ).

                        ENDIF.
                        EXIT.
                      ENDIF.
                    ENDIF.
                  ENDLOOP.
**************************************************************************************************
*         MANUAL PRICING
**************************************************************************************************
                WHEN gc_sdp.
*                 For updating condition record, check and populate ORER_ITEM table is populatd with current Item number from IDOC
                  "Check if current item number exist in gt_order_item_in_hoi itab
                  IF NOT line_exists( gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] ) .
                    "POpulate current item number
                    IF  <lfs_order_item_in> IS ASSIGNED .
                      UNASSIGN <lfs_order_item_in>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                    <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex ).
                  ENDIF.
                  "Fill X table with Current line item and Update Flag
                  IF NOT line_exists( gt_order_item_inx_hoi[ itm_number = ls_e1edp01-posex ] ).
                    IF  <lfs_order_item_inx> IS ASSIGNED.
                      UNASSIGN <lfs_order_item_inx>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                    <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                             updateflag = if_mrm_constants=>gc_updkz-update ).

                  ENDIF.
                  "Fetch E1EDP05 data
                  IF line_exists( gt_idoc_data1[ segnam =  gc_segments-gc_e1edp05  psgnum = <lfs_e1edp01>-segnum ] ).
                    ls_idoc_idata =  gt_idoc_data1[ segnam =  gc_segments-gc_e1edp05  psgnum = <lfs_e1edp01>-segnum ].
                    CLEAR ls_e1edp05.
                    ls_e1edp05 = ls_idoc_idata-sdata.
                    "Validate E1EDP05-KSCHL in IDOC if equals to ZMZQ
                    IF ls_e1edp05-kschl EQ gc_zmzq AND ls_e1edp05-krate IS NOT INITIAL.
                      "Check for which Line item Manual price is to be changed
                      "lt_conditions contains condition records for a document saved in DB
                      ASSIGN lt_conditions[ sd_doc     = gv_document_number
                                            itm_number = ls_e1edp01-posex
                                            cond_type  = gc_zmzq
                                            cond_count = lc_01 ] TO FIELD-SYMBOL(<lfs_conditions_db>).
                      IF sy-subrc EQ 0 AND <lfs_conditions_db> IS ASSIGNED .
                        "IF data exists for ZMZQ fetch count ID and Count No
                        DATA(lv_cond_st_no) = <lfs_conditions_db>-cond_st_no.
                        DATA(lv_cond_count) = <lfs_conditions_db>-cond_count.
                      ENDIF.

*                     "Fill conditions and conditionsx tables to pass to BAPI
                      ASSIGN gt_conditions_in_hoi[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_conditions_in>).
                      IF sy-subrc EQ 0 AND <lfs_conditions_in> IS ASSIGNED.
                        <lfs_conditions_in>-itm_number = ls_e1edp01-posex.      "Line item
                        <lfs_conditions_in>-cond_st_no = lv_cond_st_no.         "Step no
                        <lfs_conditions_in>-cond_count = lv_cond_count.         "Step Count
                        <lfs_conditions_in>-cond_type  = ls_e1edp05-kschl.      "Conditio type
                        <lfs_conditions_in>-cond_value = ls_e1edp05-krate / 10. "Value
                        <lfs_conditions_in>-cond_p_unt = ls_e1edp05-uprbs(5).   "Pricing Unit
                        <lfs_conditions_in>-cond_unit  = ls_e1edp05-meaun.      "Unit of measure
                      ELSE.
                        APPEND INITIAL LINE TO gt_conditions_in_hoi ASSIGNING <lfs_conditions_in>.
                        <lfs_conditions_in> = VALUE bapicond( itm_number = ls_e1edp01-posex
                                                                 cond_st_no = lv_cond_st_no
                                                                 cond_count = lv_cond_count
                                             cond_type      = ls_e1edp05-kschl
                                             cond_value     = ls_e1edp05-krate / 10
                                             cond_p_unt     = ls_e1edp05-uprbs(5)
                                             cond_unit      = ls_e1edp05-meaun  ).

                      ENDIF.
                      ASSIGN gt_conditions_inx_hoi[ itm_number = ls_e1edp01-posex ] TO FIELD-SYMBOL(<lfs_conditions_inx>).
                      IF sy-subrc EQ 0 AND <lfs_conditions_inx> IS ASSIGNED.
                        <lfs_conditions_inx>-cond_type = ls_e1edp05-kschl.
                        <lfs_conditions_inx>-cond_st_no = lv_cond_st_no.
                        <lfs_conditions_inx>-cond_count = lv_cond_count.
                        <lfs_conditions_inx>-cond_value = abap_true.
                        <lfs_conditions_inx>-cond_p_unt = abap_true.
                        <lfs_conditions_inx>-cond_unit  = abap_true.
                        <lfs_conditions_inx>-updateflag = if_mrm_constants=>gc_updkz-update.
                      ELSE.
                        IF <lfs_conditions_inx> IS ASSIGNED.
                          UNASSIGN <lfs_conditions_inx>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_conditions_inx_hoi ASSIGNING <lfs_conditions_inx>.
                        <lfs_conditions_inx> = VALUE bapicondx(  itm_number  = ls_e1edp01-posex
                                             cond_st_no = lv_cond_st_no
                                             cond_count = lv_cond_count
                                             cond_type     = ls_e1edp05-kschl
                                             cond_value    = abap_true
                                             cond_p_unt    = abap_true
                                             cond_unit     = abap_true
                                             updateflag    = if_mrm_constants=>gc_updkz-update    ).
                      ENDIF.

                      CLEAR:lv_cond_st_no,
                            lv_cond_count.

                    ENDIF.
                  ENDIF.
**************************************************************************************************
*               QUANTITY
**************************************************************************************************
                WHEN gc_change_types-qty.
*                 For QTY and DDT ,Check for GTS block after sucessful commit
                  gv_check_gts_block_exist = abap_true.

                  IF NOT line_exists(  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] ) .
                    IF  <lfs_order_item_in> IS ASSIGNED.
                      UNASSIGN <lfs_order_item_in>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.

                    <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex ).

                  ENDIF.

                  IF NOT line_exists(  gt_order_item_inx_hoi[  itm_number = ls_e1edp01-posex ] ) .
                    IF  <lfs_order_item_inx> IS ASSIGNED.
                      UNASSIGN <lfs_order_item_inx>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                    <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                          updateflag = if_mrm_constants=>gc_updkz-update  ).
                  ENDIF.
*                  * Delete the line item from gt_so_schjedule with REQ_QTY is initial
                  DELETE lt_order_schedule_lines WHERE req_qty IS INITIAL. "#EC CI_STDSEQ

                  TRY .
                      DATA(ls_vbep) = lt_order_schedule_lines[ doc_number = gv_document_number itm_number = ls_e1edp01-posex ].
                    CATCH cx_sy_itab_line_not_found.
                      CLEAR : ls_vbep.
                  ENDTRY.

                  ASSIGN gt_schedule_lines_hoi[ itm_number = ls_e1edp01-posex  sched_line = ls_vbep-sched_line ] TO FIELD-SYMBOL(<lfs_schedule_lines>).
                  IF sy-subrc EQ 0 AND <lfs_schedule_lines> IS ASSIGNED.
                    <lfs_schedule_lines>-req_qty     = ls_e1edp01-menge.
                  ELSE.
                    IF <lfs_schedule_lines> IS ASSIGNED.
                      UNASSIGN <lfs_schedule_lines>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_schedule_lines_hoi ASSIGNING <lfs_schedule_lines>.
                    <lfs_schedule_lines> = VALUE bapischdl( itm_number = ls_e1edp01-posex
                                                         sched_line = ls_vbep-sched_line
                                                         req_qty    = ls_e1edp01-menge )  .

                  ENDIF.

                  ASSIGN gt_schedule_linesx_hoi[ itm_number = ls_e1edp01-posex  sched_line = ls_vbep-sched_line ] TO FIELD-SYMBOL(<lfs_schedule_linesx>).
                  IF sy-subrc EQ 0 AND <lfs_schedule_linesx> IS ASSIGNED.
                    <lfs_schedule_linesx>-req_qty = abap_true.
                    <lfs_schedule_linesx>-updateflag = if_mrm_constants=>gc_updkz-update.
                  ELSE.
                    IF <lfs_schedule_linesx> IS ASSIGNED.
                      UNASSIGN <lfs_schedule_linesx>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_schedule_linesx_hoi ASSIGNING <lfs_schedule_linesx>.

                    <lfs_schedule_linesx> = VALUE bapischdlx(
                                                       itm_number = ls_e1edp01-posex
                                                       sched_line = ls_vbep-sched_line
                                                       req_qty    = abap_true
                                                       updateflag = if_mrm_constants=>gc_updkz-update ) .

                  ENDIF.

**************************************************************************************************
*         DATE
**************************************************************************************************
                WHEN gc_change_types-ddt.
*                 For QTY and DDT ,Check for GTS block after sucessful commit
                  gv_check_gts_block_exist = abap_true.
                  LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_lidoc_idata>) WHERE segnam = gc_segments-gc_e1edp03 AND "#EC CI_STDSEQ "#EC CI_NESTED
                                                                                        psgnum = <lfs_e1edp01>-segnum.
                    CLEAR ls_e1edp03.
                    ls_e1edp03 = <lfs_lidoc_idata>-sdata.
                    IF ls_e1edp03-iddat = gc_002.


                      DATA(lv_delivery_date) = CONV erdat( ls_e1edp03-datum ).

                      IF NOT line_exists(  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] ) .
                        IF  <lfs_order_item_in> IS ASSIGNED.
                          UNASSIGN <lfs_order_item_in>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.

                        <lfs_order_item_in> = VALUE bapisditm( itm_number = ls_e1edp01-posex ).

                      ENDIF.

                      IF NOT line_exists(  gt_order_item_inx_hoi[  itm_number = ls_e1edp01-posex ] ) .
                        IF  <lfs_order_item_inx> IS ASSIGNED.
                          UNASSIGN <lfs_order_item_inx>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                        <lfs_order_item_inx> = VALUE bapisditmx( itm_number = ls_e1edp01-posex
                                                              updateflag = if_mrm_constants=>gc_updkz-update  ).
                      ENDIF.


                      DELETE lt_order_schedule_lines WHERE req_qty IS INITIAL. "#EC CI_STDSEQ
                      TRY .
                          ls_vbep = lt_order_schedule_lines[ doc_number = gv_document_number itm_number = ls_e1edp01-posex ].
                        CATCH cx_sy_itab_line_not_found.
                          CLEAR : ls_vbep.
                      ENDTRY.
                      ASSIGN gt_schedule_lines_hoi[ itm_number = ls_e1edp01-posex
                                                sched_line = ls_vbep-sched_line ] TO <lfs_schedule_lines>.
                      IF sy-subrc EQ 0 AND <lfs_schedule_lines> IS ASSIGNED.
                        <lfs_schedule_lines>-req_date = lv_delivery_date.
                      ELSE.


                        IF <lfs_schedule_lines> IS ASSIGNED.
                          UNASSIGN <lfs_schedule_lines>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_schedule_lines_hoi ASSIGNING <lfs_schedule_lines>.

                        <lfs_schedule_lines> = VALUE bapischdl( itm_number = ls_e1edp01-posex
                                                                sched_line = ls_vbep-sched_line
                                                                req_date   = lv_delivery_date )  .

                      ENDIF.
                      ASSIGN gt_schedule_linesx_hoi[ itm_number = ls_e1edp01-posex  sched_line = ls_vbep-sched_line ] TO <lfs_schedule_linesx>.
                      IF sy-subrc EQ 0 AND <lfs_schedule_linesx> IS ASSIGNED.
                        <lfs_schedule_linesx>-req_date = abap_true.
                        <lfs_schedule_linesx>-updateflag = if_mrm_constants=>gc_updkz-update.
                      ELSE.
                        IF <lfs_schedule_linesx> IS ASSIGNED.
                          UNASSIGN <lfs_schedule_linesx>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_schedule_linesx_hoi ASSIGNING <lfs_schedule_linesx>.
                        <lfs_schedule_linesx> = VALUE bapischdlx( itm_number = ls_e1edp01-posex
                                                               sched_line = ls_vbep-sched_line
                                                               req_date   =  abap_true
                                                               updateflag = if_mrm_constants=>gc_updkz-update ) .

                      ENDIF.

                    ENDIF.
                    EXIT.
                  ENDLOOP.
**************************************************************************************************
*         CUSTOMER PART NUMBER
**************************************************************************************************
                WHEN gc_change_types-cpn.
                  LOOP AT gt_idoc_data1 ASSIGNING <lfs_lidoc_idata> WHERE segnam = gc_segments-gc_e1edp19 AND "#EC CI_NESTED
                                                                          psgnum = <lfs_e1edp01>-segnum. "#EC CI_STDSEQ
                    CLEAR ls_e1edp19.
                    ls_e1edp19 = <lfs_lidoc_idata>-sdata.
                    IF ls_e1edp19-qualf = gc_001.


                      ASSIGN  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itm>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                        <lfs_ord_itm>-cust_mat35   = ls_e1edp19-idtnr.
                      ELSE.
                        IF <lfs_order_item_in> IS ASSIGNED.
                          UNASSIGN <lfs_order_item_in>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                        <lfs_order_item_in> = VALUE #( itm_number = ls_e1edp01-posex
                                                    cust_mat35   = ls_e1edp19-idtnr ).

                      ENDIF.
                      ASSIGN gt_order_item_inx_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itmx>.
                      IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                        <lfs_ord_itmx>-cust_mat35 = abap_true.
                        <lfs_ord_itmx>-updateflag = if_mrm_constants=>gc_updkz-update.
                      ELSE.
                        IF <lfs_order_item_inx> IS ASSIGNED.
                          UNASSIGN <lfs_order_item_inx>.
                        ENDIF.
                        APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                        <lfs_order_item_inx> = VALUE #( itm_number = ls_e1edp01-posex
                                                     cust_mat35 = abap_true
                                                     updateflag = if_mrm_constants=>gc_updkz-update ).

                      ENDIF.

                      EXIT.
                    ENDIF.

                  ENDLOOP.

**************************************************************************************************
*         LINE ITEM CANCEL
**************************************************************************************************
                WHEN gc_icl.
                  CLEAR gv_abgru.
                  gv_abgru = ls_e1edp01-abgru.
                  ASSIGN  gt_order_item_in_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itm>.
                  IF sy-subrc EQ 0 AND <lfs_ord_itm> IS ASSIGNED.
                    <lfs_ord_itm>-itm_number =  ls_e1edp01-posex.
                    <lfs_ord_itm>-reason_rej = gv_abgru.
                  ELSE.
                    IF <lfs_order_item_in> IS ASSIGNED.
                      UNASSIGN <lfs_order_item_in>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_order_item_in_hoi ASSIGNING <lfs_order_item_in>.
                    <lfs_order_item_in> = VALUE #(  itm_number = ls_e1edp01-posex
                                                 reason_rej = gv_abgru  ) .

                  ENDIF.

                  ASSIGN gt_order_item_inx_hoi[ itm_number = ls_e1edp01-posex ] TO <lfs_ord_itmx>.
                  IF sy-subrc EQ 0 AND <lfs_ord_itmx> IS ASSIGNED.
                    <lfs_ord_itmx>-itm_number = ls_e1edp01-posex.
                    <lfs_ord_itmx>-updateflag = abap_true.
                    <lfs_ord_itmx>-reason_rej = abap_true.
                  ELSE.
                    IF  <lfs_order_item_inx> IS ASSIGNED.
                      UNASSIGN <lfs_order_item_inx>.
                    ENDIF.
                    APPEND INITIAL LINE TO gt_order_item_inx_hoi ASSIGNING <lfs_order_item_inx>.
                    <lfs_order_item_inx> = VALUE #(  itm_number = ls_e1edp01-posex
                                    updateflag = abap_true
                                    reason_rej = abap_true ).
                  ENDIF.

**************************************************************************************************
*               SPLIT Scenario
**************************************************************************************************
                WHEN gc_change_types-csp.
                  LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_idata>) WHERE segnam = gc_segments-gc_e1edp03 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                                   AND psgnum = <lfs_e1edp01>-segnum.

                    CLEAR  ls_e1edp03.
                    ls_e1edp03 = <lfs_idoc_idata>-sdata.
                    "fetch E1EDP03 for Qualifier 002
                    IF ls_e1edp03-iddat = gc_002.
                      CLEAR lv_delivery_date.
                      lv_delivery_date = ls_e1edp03-datum.
                      "Fetch IDOC data and pass to ls_vbep
                      APPEND INITIAL LINE TO gt_vbep_detail_hoi ASSIGNING FIELD-SYMBOL(<lfs_vbep_detail>).
                      <lfs_vbep_detail>-vbeln = gv_document_number.
                      <lfs_vbep_detail>-posnr = ls_e1edp01-posex.
                      <lfs_vbep_detail>-edatu = lv_delivery_date.
                      <lfs_vbep_detail>-wmeng = ls_e1edp01-menge.

*                    Fetch SMp Flag from Idoc
                      IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edp35 psgnum =  <lfs_e1edp01>-segnum ] ).
                        "Fetchg SMP Flag from segmet 35 for QUALZ SMP and ZAK
                        LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_e1edp35>) WHERE segnam = gc_segments-gc_e1edp35 AND "#EC CI_STDSEQ "#EC CI_NESTED
                                                                                          psgnum = <lfs_e1edp01>-segnum.
                          CLEAR ls_e1edp35.
                          ls_e1edp35 = <lfs_e1edp35>-sdata.
                          "For Qualifier SMP
                          IF ls_e1edp35-qualz EQ gc_smp.
                            <lfs_vbep_detail>-smp_flag =  COND #( WHEN ls_e1edp35-cusadd EQ abap_true"(X) .
                                              THEN COND #( WHEN line_exists( gt_pm_so_po_smp[ low = abap_true ] )
                                                                THEN gt_pm_so_po_smp[ low = abap_true ]-high )
                                             ELSE ls_e1edp35-cusadd ).
                            "For Qualifier ZAK
                          ELSEIF  ls_e1edp35-qualz EQ gc_zak.
                            <lfs_vbep_detail>-smp_addtnl = ls_e1edp35-cusadd.
                            "For Qualifier SRQ
                          ELSEIF ls_e1edp35-qualz EQ gc_srq.
                            <lfs_vbep_detail>-srq = ls_e1edp35-cusadd.
                            CONDENSE <lfs_vbep_detail>-srq NO-GAPS.
                            "For Qualifier ZSI
                          ELSEIF ls_e1edp35-qualz EQ gc_zsi.
                            <lfs_vbep_detail>-zsi = ls_e1edp35-cusadd.
                            CONDENSE <lfs_vbep_detail>-zsi NO-GAPS.
                          ENDIF.
                        ENDLOOP.
                      ENDIF.
                      EXIT.
                    ENDIF.
                  ENDLOOP.
                WHEN OTHERS.
              ENDCASE.
            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->GET_ITEM_TEXT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_item_text.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  GET_ITEM_TEXT                                    *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch Item text from e1edp01                     *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD GET_ITEM_TEXT
***&----------------------------------------------------------------------*
*   Local declarations
    DATA:ls_e1edp01 TYPE e1edp01,
         ls_e1edp35 TYPE e1edp35.

    "Loop through Item Segments to Fetch Item Texts
    LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_idata>) WHERE segnam = gc_segments-gc_e1edp01. "#EC CI_NESTED
      CLEAR ls_e1edp01.
      ls_e1edp01 = <lfs_idoc_idata>-sdata.
      LOOP AT gt_idoc_data1 ASSIGNING FIELD-SYMBOL(<lfs_idoc_idata1>) WHERE segnam = gc_segments-gc_e1edp35 "#EC CI_STDSEQ "#EC CI_NESTED
                                                                        AND psgnum = <lfs_idoc_idata>-segnum.
        CLEAR ls_e1edp35.
        ls_e1edp35 = <lfs_idoc_idata1>-sdata.
        "Fetch the simple change flag with SMP indicator value in QUALZ
        IF ls_e1edp35-qualz EQ gc_smp.
          DATA(ls_order_text) = VALUE bapisdtext(
                   itm_number = ls_e1edp01-posex
                   doc_number = gv_document_number
                   text_id    = gc_zicg
                   langu      = gc_text_langu
                   text_line  = COND #( WHEN ls_e1edp35-cusadd IS NOT INITIAL
                                        THEN ls_e1edp35-cusadd
                                        ELSE abap_true ) ) .
          "Populate global header table
          APPEND ls_order_text TO gt_order_text.
          CLEAR ls_order_text.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->GET_ITEM_TEXT_HOI
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method GET_ITEM_TEXT_HOI.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->GET_SO_DOCUMENT_NUMBER
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_IDOC_DATA1                  TYPE        IDOC_DATA
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_so_document_number.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  GET_SO_DOCUMENT_NUMBER                           *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch Idoc data                                  *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD GET_SO_DOCUMENT_NUMBER
***&----------------------------------------------------------------------*
    " Read So Number
    IF line_exists( gt_idoc_data1[ segnam = gc_segments-gc_e1edk01 ] ).
      DATA(ls_e1edk01) = CONV e1edk01( gt_idoc_data1[ segnam = gc_segments-gc_e1edk01 ]-sdata ).
      gv_document_number = |{ ls_e1edk01-belnr ALPHA = IN }| . "Sales Order
    ELSE.
      gv_succe = abap_false.
      "Update status tab with 51
      update_idoc_status(
           EXPORTING
                     iv_status = gc_idoc_status-error
                     iv_msgty  = if_mrm_constants=>gc_msgty_e
                     iv_msgid  = gc_msgid_1
                     iv_msgno  = gc_messages-gc_msgno_479
                     iv_msgv_1 = CONV edi_stapa1( gc_segments-gc_e1edk01 )
                     iv_msgv_2 = space
                     iv_msgv_3 = space
                     iv_msgv_4 = space
           CHANGING
                    ct_idoc_data1  = ct_idoc_data1[]
                    ct_idoc_status = ct_idoc_status[] ).
      RETURN.
    ENDIF.

    IF gv_document_number IS NOT INITIAL.
      "Check SO valid
      SELECT COUNT( * ) FROM vbak WHERE vbeln EQ @gv_document_number .
      IF sy-subrc NE 0.
        gv_succe = abap_false.
        "Update status tab with 51
        update_idoc_status(
             EXPORTING
                       iv_status = gc_idoc_status-error
                       iv_msgty  = if_mrm_constants=>gc_msgty_e
                       iv_msgid  = gc_msgid_1
                       iv_msgno  = gc_messages-gc_msgno_481
                       iv_msgv_1 = CONV  edi_stapa1( gv_document_number )
                       iv_msgv_2 = space
                       iv_msgv_3 = space
                       iv_msgv_4 = space
             CHANGING
                      ct_idoc_data1  = ct_idoc_data1[]
                      ct_idoc_status = ct_idoc_status[] ).
        RETURN.
      ELSE.
        "Collect PO number linked to SO
        SELECT DISTINCT vbeln INTO TABLE @DATA(lt_po_num) FROM vbfa "#EC CI_SUBRC
                                               WHERE vbelv = @gv_document_number "Sales Order
                                               AND vbtyp_n = @if_mrm_constants=>gc_trtyp_v ORDER BY vbeln.
        CLEAR gt_po_num.
        gt_po_num = lt_po_num.
      ENDIF.
    ELSE.
      gv_succe = abap_false.
      update_idoc_status(
                   EXPORTING
                             iv_status = gc_idoc_status-error
                             iv_msgty  = if_mrm_constants=>gc_msgty_e
                             iv_msgid  = gc_msgid_1
                             iv_msgno  = gc_messages-gc_msgno_480
                             iv_msgv_1 = space
                             iv_msgv_2 = space
                             iv_msgv_3 = space
                             iv_msgv_4 = space
                   CHANGING
                            ct_idoc_data1  = ct_idoc_data1[]
                            ct_idoc_status = ct_idoc_status[] ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->INITIALIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD initialize.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  INITIALIZE                                       *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                    *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Initialize  variables                            *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
*&-----------------------------------------------------------------------*
*& 11.23.2020 | CR_1516  |  24093780   | S4DK948161 HOI Enhancement      *
*&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD INITIALIZE
***&----------------------------------------------------------------------*
*   Local constants
    CONSTANTS: lc_pm_so_po_smp        TYPE rvari_vnam VALUE 'P&M_SO_PO_SMP', "SMP value Mapping for SO and PO
               lc_pm_po_texts         TYPE rvari_vnam VALUE 'P&M_PO_TEXTS', "PO Text ID for Header and Item
               lc_parent_text         TYPE rvari_vnam VALUE 'OTC_P&M_PARENT_TEXT' ##NO_TEXT,
               lc_hoi_itemcat_doctype TYPE rvari_vnam VALUE 'OTC_1084_HOI_DOCTYPE', "Added for CR_1516 by 24093780 on 12/03/2020
               lc_s                   TYPE rvari_vnam VALUE 'S',                    "Added for CR_1516 by 24093780 on 12/03/2020
               lc_parent(6)           TYPE c VALUE 'PARENT',
               lc_split(5)            TYPE c VALUE 'SPLIT',
               lc_header_smp_flag     TYPE rvari_vnam VALUE 'OTC_HEADER_SMP_FLAG'. "PO Text ID for Header and Item

*   Clear global variables
    CLEAR:gv_document_number,
          gv_stop_flag.
*  Tables
    CLEAR :
        gt_idoc_data1,
        gt_order_item_in,
        gt_order_item_inx,
        gt_potextitem,
        gt_schedule_lines,
        gt_schedule_linesx,
        gt_order_text,
        gt_potextheader,
        gt_conditions_in,
        gt_conditions_inx,
        gt_partners,
        gt_po_num,
        gv_document_number,
        gs_order_header_in,
        gs_order_header_inx,
        gt_ekkn_delivery,
        gt_pm_so_po_smp,
        gt_pm_po_text.

    CLEAR:gs_order_header_in_hoi,
   gs_order_header_inx_hoi,
   gt_order_item_in_hoi,
   gt_order_item_inx_hoi,
   gt_partners_hoi,
   gt_bapiparnrc_hoi,
   gt_schedule_lines_hoi,
   gt_schedule_linesx_hoi,
   gt_order_text_hoi,
   gt_conditions_in_hoi,
   gt_conditions_inx_hoi,
   gt_vbep_detail_hoi,
   gt_bapiparnrc_hoi.

    "Fetch TVARVC entries to Fetch SMP flag mapping and text ID's
    SELECT
       name,
       type,   "++ Added for CR_1516 by 24093780 on 11/23/2020
       sign,
       opti,
       low,
       high
       FROM tvarvc
       INTO TABLE @DATA(lt_tvarvc)
       WHERE name IN ( @lc_pm_so_po_smp ,
                       @lc_pm_po_texts ,
                       @lc_header_smp_flag ,
                       @lc_parent_text,
                       @lc_hoi_itemcat_doctype "++ Added for CR_1516 by 24093780 on 11/23/2020
      ).
    IF sy-subrc EQ 0.
      "TVARVC to Map Simple Change flag in PO for every SMP flag in SO
      gt_pm_so_po_smp = VALUE #( FOR ls_tvarvc  IN lt_tvarvc WHERE ( name = lc_pm_so_po_smp )
                                    ( low    = ls_tvarvc-low
                                      high   = ls_tvarvc-high ) ).

      "Text ID's to save Text ID's for Header and Item
      gt_pm_po_text = VALUE #( FOR ls_tvarvc  IN lt_tvarvc WHERE ( name = lc_pm_po_texts )
                                    ( low    = ls_tvarvc-low
                                      high   = ls_tvarvc-high ) ).

      "Text ID's to save Text ID's for Header and Item
      gt_header_smp_flag = VALUE #( FOR ls_tvarvc  IN lt_tvarvc WHERE ( name = lc_header_smp_flag )
                                    ( low    = ls_tvarvc-low
                                      high   = ls_tvarvc-high ) ).

      READ TABLE lt_tvarvc INTO DATA(ls_tvarvc1) WITH KEY name = lc_parent_text low = lc_parent.
      IF sy-subrc = 0.
        gv_parent_text_id = ls_tvarvc1-high.
      ENDIF.
      CLEAR ls_tvarvc1.
      READ TABLE lt_tvarvc INTO ls_tvarvc1 WITH KEY name = lc_parent_text low = lc_split.
      IF sy-subrc = 0.
        gv_split_text = ls_tvarvc1-high.
      ENDIF.

**    Begin of CR_1516 by 24093780 on 11/23/2020
*      Document types valid for this Enhancement to allow HOI objects
      gr_hoi_itemcat_doctype = VALUE #( FOR ls_tvarvc IN lt_tvarvc  WHERE ( name = lc_hoi_itemcat_doctype AND type = lc_s ) (
                                sign   = ls_tvarvc-sign
                                option =  ls_tvarvc-opti
                                low    =  ls_tvarvc-low
                                high   =  ls_tvarvc-high ) ) .
**    End of CR_1516 by 24093780 on 11/23/2020
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZOTCCL_I1084_ORDCHG->POPULATE_PO_HEADER_TEXT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD populate_po_header_text.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  POPULATE_PO_HEADER_TEXT                          *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Fetch header text from e1edk35                   *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD POPULATE_PO_HEADER_TEXT
***&----------------------------------------------------------------------*
    "To populate the PO header SMP Text we need to fetch the first record
    IF line_exists( gt_order_text[ 1 ] ).
      LOOP AT gt_po_num ASSIGNING FIELD-SYMBOL(<lfs_ebeln>).
        DATA(ls_potextheader) = VALUE bapimepotextheader(
                                      po_number = <lfs_ebeln>-vbeln
                                      text_id   = gc_save_text-gc_tdid_f26
                                      text_line = abap_true ). "potextheader for CTYP CON is X
        APPEND ls_potextheader TO gt_potextheader.
        CLEAR ls_potextheader.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->UPDATE_DELIVERY_ADDRESS_PO
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_IDOC_DATA1                  TYPE        IDOC_DATA
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_delivery_address_po.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_DELIVERY_ADDRESS_PO                       *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD UPDATE_DELIVERY_ADDRESS_PO
***&----------------------------------------------------------------------*
*   LOcal data declaration
    DATA:lt_return           TYPE STANDARD TABLE OF bapiret2,
         ls_delivery_address TYPE bapimepoaddrdelivery,
         lt_delivery_address TYPE STANDARD TABLE OF bapimepoaddrdelivery,
         lt_item             TYPE STANDARD TABLE OF bapimepoitem,
         ls_item             TYPE bapimepoitem,
         lt_itemx            TYPE STANDARD TABLE OF bapimepoitemx,
         ls_itemx            TYPE bapimepoitemx,
         lv_memory_1059      TYPE char20.
    CONSTANTS :  lc_ptp_1059           TYPE c LENGTH 9 VALUE 'ZPTP_1059'.
******************************************************************************************
*PO Item Texts
******************************************************************************************
    DATA(lv_line_count) = lines( gt_ekkn_delivery ).
    SORT gt_ekkn_delivery BY ebeln ebelp.
    DELETE ADJACENT DUPLICATES FROM gt_ekkn_delivery COMPARING ebeln ebelp.
    LOOP AT gt_ekkn_delivery ASSIGNING FIELD-SYMBOL(<lfs_ekkn>).
      DATA(lv_tabix) = sy-tabix.
      CLEAR ls_delivery_address.
      ls_delivery_address   = VALUE #( po_item = <lfs_ekkn>-ebelp
                                       addr_no = <lfs_ekkn>-addr_no ).
      APPEND ls_delivery_address TO lt_delivery_address.
      CLEAR ls_delivery_address.

      ls_item = VALUE #( po_item = <lfs_ekkn>-ebelp  ). " set position here
      APPEND ls_item TO lt_item.

      ls_itemx = VALUE #(  po_item = <lfs_ekkn>-ebelp " set position here
                           po_itemx = abap_true ).
      APPEND ls_itemx TO lt_itemx.

      IF lv_tabix LT lv_line_count.
        READ TABLE gt_ekkn_delivery ASSIGNING FIELD-SYMBOL(<lfs_ekkn_delivery>) INDEX ( lv_tabix + 1 ). "#EC CI_SUBRC
        IF <lfs_ekkn_delivery> IS ASSIGNED .
          IF <lfs_ekkn_delivery>-ebeln <> <lfs_ekkn>-ebeln.
            CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
              EXPORTING
                purchaseorder  = <lfs_ekkn>-ebeln
              TABLES
                return         = lt_return
                poitem         = lt_item
                poitemx        = lt_itemx
                poaddrdelivery = lt_delivery_address.
            IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR
                line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
              IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
                LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<lfs_err>) WHERE type = if_mrm_constants=>gc_msgty_e . "#EC CI_STDSEQ "#EC CI_NESTED
                  CALL METHOD me->update_idoc_status
                    EXPORTING
                      iv_status      = gc_idoc_status-incomplete
                      iv_msgty       = if_mrm_constants=>gc_msgty_e
                      iv_msgid       = <lfs_err>-id
                      iv_msgno       = <lfs_err>-number
                      iv_msgv_1      = <lfs_err>-message_v1
                      iv_msgv_2      = <lfs_err>-message_v2
                      iv_msgv_3      = space
                      iv_msgv_4      = space
                    CHANGING
                      ct_idoc_data1  = ct_idoc_data1
                      ct_idoc_status = ct_idoc_status.
                ENDLOOP.
              ENDIF.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = abap_true.
            ENDIF.

            CLEAR:lt_delivery_address,lt_item,lt_itemx.
          ENDIF.
        ENDIF.
      ELSE.
        CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
          EXPORTING
            purchaseorder  = <lfs_ekkn>-ebeln
          TABLES
            return         = lt_return
            poitem         = lt_item
            poitemx        = lt_itemx
            poaddrdelivery = lt_delivery_address.
        IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR
              line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
          IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
            LOOP AT lt_return ASSIGNING <lfs_err> WHERE type = if_mrm_constants=>gc_msgty_e . "#EC CI_STDSEQ "#EC CI_NESTED
              CALL METHOD me->update_idoc_status
                EXPORTING
                  iv_status      = gc_idoc_status-incomplete
                  iv_msgty       = if_mrm_constants=>gc_msgty_e
                  iv_msgid       = <lfs_err>-id
                  iv_msgno       = <lfs_err>-number
                  iv_msgv_1      = <lfs_err>-message_v1
                  iv_msgv_2      = <lfs_err>-message_v2
                  iv_msgv_3      = space
                  iv_msgv_4      = space
                CHANGING
                  ct_idoc_data1  = ct_idoc_data1
                  ct_idoc_status = ct_idoc_status.
            ENDLOOP.
          ENDIF.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.
        ENDIF.
        CLEAR:lt_delivery_address,lt_item,lt_itemx.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->UPDATE_IDOC_STATUS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_STATUS                      TYPE        BDIDOCSTAT-STATUS
* | [--->] IV_MSGTY                       TYPE        SY-MSGTY
* | [--->] IV_MSGID                       TYPE        BDIDOCSTAT-MSGID
* | [--->] IV_MSGNO                       TYPE        SY-MSGNO
* | [--->] IV_MSGV_1                      TYPE        BDIDOCSTAT-MSGV1
* | [--->] IV_MSGV_2                      TYPE        BDIDOCSTAT-MSGV2
* | [--->] IV_MSGV_3                      TYPE        BDIDOCSTAT-MSGV3
* | [--->] IV_MSGV_4                      TYPE        BDIDOCSTAT-MSGV4
* | [--->] IV_SEGFLD                      TYPE        BDIDOCSTAT-SEGFLD(optional)
* | [--->] IV_ROUTID                      TYPE        BDIDOCSTAT-ROUTID(optional)
* | [<-->] CT_IDOC_DATA1                  TYPE        IDOC_DATA
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_idoc_status.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_IDOC_STATUS                               *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                    *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Idoc Stats                                *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD UPDATE_IDOC_STATUS
***&----------------------------------------------------------------------*
    "Populate idoc status structure
    DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idoc_number
                                             status = iv_status
                                             msgty  = iv_msgty
                                             msgid  = iv_msgid
                                             msgno  = iv_msgno
                                             msgv1  = iv_msgv_1
                                             msgv2  = iv_msgv_2
                                             msgv3  = iv_msgv_3
                                             msgv4  = iv_msgv_4
                                             segnum = COND #( WHEN line_exists( ct_idoc_data1[ 1 ] )
                                                              THEN ct_idoc_data1[ 1 ]-segnum
                                                              ELSE space )
                                             segfld = iv_segfld
                                             repid  = sy-repid
                                             routid = iv_routid ).
    "Append it to global idoc structure table
    APPEND ls_idoc_status TO ct_idoc_status.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZOTCCL_I1084_ORDCHG->UPDATE_PO_LINE_ITEM_TEXTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_BAPIMEPOTEXT                TYPE        BAPIMEPOTEXT_TP(optional)
* | [--->] IV_PO_NUM                      TYPE        EBELN(optional)
* | [--->] IT_POTEXTHEADER                TYPE        BAPIMEPOTEXTHEADER_TP(optional)
* | [<---] ET_RETURN                      TYPE        BAPIRET1_T
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_po_line_item_texts.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_PO_LINE_ITEM_TEXTS                        *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
*METHOD UPDATE_PO_LINE_ITEM_TEXTS
***&----------------------------------------------------------------------*
* Local data declarations
    DATA: lt_return  TYPE STANDARD TABLE OF bapiret2.
    "Call BAPI yo to change item texts

    CALL FUNCTION 'BAPI_PO_CHANGE'  "#EC CI_USAGE_OK[2438131]
      EXPORTING
        purchaseorder = iv_po_num
      TABLES
        return        = lt_return
        potextheader  = it_potextheader
        potextitem    = it_bapimepotext.
    IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ENDIF.
    "Populate error table
    IF lt_return IS NOT INITIAL.
      APPEND LINES OF lt_return TO et_return.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->UPDATE_PO_TEXTS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_IDOC_DATA1                  TYPE        IDOC_DATA
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_po_texts.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_PO_TEXTS                                  *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD UPDATE_PO_TEXTS
***&----------------------------------------------------------------------*
*   LOcal data declaration
    DATA:ls_bapimepotext           TYPE bapimepotext,
         ls_bapimepotext_tmp       TYPE bapimepotext,
         ls_bapimepotextheader     TYPE bapimepotextheader,
         ls_bapimepotextheader_tmp TYPE bapimepotextheader,
         lt_bapimepotext           TYPE STANDARD TABLE OF bapimepotext,
         lt_bapimepotextheader     TYPE STANDARD TABLE OF bapimepotextheader,
         lt_return                 TYPE STANDARD TABLE OF bapiret2,
         lv_memory_1059            TYPE char20.

*   Local constants
    CONSTANTS : lc_ptp_1059           TYPE c LENGTH 9 VALUE 'ZPTP_1059',
                lc_poitem_textid(4)   TYPE c VALUE 'ITEM',
                lc_poheader_textid(6) TYPE c VALUE 'HEADER'.

******************************************************************************************
*  Sort Internal tables with key values and Delete Duplicate entries
******************************************************************************************
    SORT:gt_potextitem BY po_number po_item text_id,
         gt_potextheader BY po_number text_id.
    DELETE ADJACENT DUPLICATES FROM:gt_potextheader COMPARING po_number text_id,
                                    gt_potextitem   COMPARING po_number po_item text_id.

******************************************************************************************
*   PO Header Texts
******************************************************************************************
    DATA(lv_line_count) = lines( gt_potextheader ).
    LOOP AT gt_potextheader ASSIGNING FIELD-SYMBOL(<lfs_potextheader>).
      DATA(lv_tabix) = sy-tabix.
      CLEAR ls_bapimepotextheader.
      ls_bapimepotextheader = <lfs_potextheader>.
      APPEND ls_bapimepotextheader TO lt_bapimepotextheader.

      "Append Dummy text ID with date and time to trigger BAPI_PO_CHANGE
      MOVE-CORRESPONDING <lfs_potextheader> TO ls_bapimepotextheader_tmp.

      TRY.
          ls_bapimepotextheader_tmp-text_id = gt_pm_po_text[ low = lc_poheader_textid ]-high.
        CATCH cx_sy_itab_line_not_found.
          CLEAR ls_bapimepotextheader_tmp-text_id .
      ENDTRY.

      ls_bapimepotextheader_tmp-text_line = |{ sy-datum }| && |{ sy-uzeit }|.
      APPEND ls_bapimepotextheader_tmp TO lt_bapimepotextheader.
      IF lv_tabix LT lv_line_count.
        READ TABLE gt_potextheader ASSIGNING FIELD-SYMBOL(<lfs_head>) INDEX ( lv_tabix + 1 ). "#EC CI_SUBRC
        IF <lfs_head> IS ASSIGNED .
          IF <lfs_head>-po_number <> <lfs_potextheader>-po_number.
            "Change header details
            CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
              EXPORTING
                purchaseorder = ls_bapimepotextheader-po_number
              TABLES
                return        = lt_return
                potextheader  = lt_bapimepotextheader.
            IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR
               line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
              IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
                LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<lfs_err>) WHERE type = if_mrm_constants=>gc_msgty_e. "#EC CI_STDSEQ "#EC CI_NESTED
                  CALL METHOD me->update_idoc_status
                    EXPORTING
                      iv_status      = gc_idoc_status-incomplete
                      iv_msgty       = if_mrm_constants=>gc_msgty_e
                      iv_msgid       = <lfs_err>-id
                      iv_msgno       = <lfs_err>-number
                      iv_msgv_1      = <lfs_err>-message_v1
                      iv_msgv_2      = <lfs_err>-message_v2
                      iv_msgv_3      = space
                      iv_msgv_4      = space
                    CHANGING
                      ct_idoc_data1  = ct_idoc_data1
                      ct_idoc_status = ct_idoc_status.
                ENDLOOP.
              ENDIF.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = abap_true.
            ENDIF.
            CLEAR lt_bapimepotextheader.
          ENDIF.
        ENDIF.
      ELSE.
        "Change header details
        CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
          EXPORTING
            purchaseorder = ls_bapimepotextheader-po_number
          TABLES
            return        = lt_return
            potextheader  = lt_bapimepotextheader.
        IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR
             line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
          IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
            LOOP AT lt_return ASSIGNING <lfs_err> WHERE type = if_mrm_constants=>gc_msgty_e . "#EC CI_STDSEQ "#EC CI_NESTED
              CALL METHOD me->update_idoc_status
                EXPORTING
                  iv_status      = gc_idoc_status-incomplete
                  iv_msgty       = if_mrm_constants=>gc_msgty_e
                  iv_msgid       = <lfs_err>-id
                  iv_msgno       = <lfs_err>-number
                  iv_msgv_1      = <lfs_err>-message_v1
                  iv_msgv_2      = <lfs_err>-message_v2
                  iv_msgv_3      = space
                  iv_msgv_4      = space
                CHANGING
                  ct_idoc_data1  = ct_idoc_data1
                  ct_idoc_status = ct_idoc_status.
            ENDLOOP.
          ENDIF.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.
        ENDIF.
        CLEAR lt_bapimepotextheader.
      ENDIF.
    ENDLOOP.


******************************************************************************************
*  Update PO Item Texts
******************************************************************************************
    "Fetch number of lines in itab gt_potextitem
    lv_line_count = lines( gt_potextitem ).
    LOOP AT gt_potextitem ASSIGNING FIELD-SYMBOL(<lfs_potextitem>).
      "Fetch current line in itab
      lv_tabix = sy-tabix.
      CLEAR ls_bapimepotext.
      "Populate lt_bapimepotext table
      MOVE-CORRESPONDING <lfs_potextitem> TO ls_bapimepotext.
      APPEND ls_bapimepotext TO lt_bapimepotext.
      "Append Dummy text ID with date and time to trigger BAPI_PO_CHANGE
      MOVE-CORRESPONDING <lfs_potextitem> TO ls_bapimepotext_tmp.
*     FETCH PO ITEM ID FROM TVARVC
      TRY.
          ls_bapimepotext_tmp-text_id = gt_pm_po_text[ low = lc_poitem_textid ]-high.
        CATCH cx_sy_itab_line_not_found.
          CLEAR ls_bapimepotext_tmp-text_id.
      ENDTRY.

      ls_bapimepotext_tmp-text_line = |{ sy-datum }| && |{ sy-uzeit }|.
      APPEND ls_bapimepotext_tmp TO lt_bapimepotext.

      "Check if current loop not last record
      IF lv_tabix LT lv_line_count.
        "Read next record
        READ TABLE gt_potextitem ASSIGNING FIELD-SYMBOL(<lfs_potextitem_tmp>) INDEX ( lv_tabix + 1 ). "#EC CI_SUBRC
        "Check if field symbol assigned
        IF <lfs_potextitem_tmp> IS ASSIGNED .
          "Compare current value with next record if equal. Call BAPI if not equal
          IF <lfs_potextitem_tmp>-po_number <> <lfs_potextitem>-po_number.
            ls_bapimepotext-po_number = |{ ls_bapimepotext-po_number ALPHA = IN }|.
            CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
              EXPORTING
                purchaseorder = ls_bapimepotext-po_number
              TABLES
                return        = lt_return
                potextitem    = lt_bapimepotext.

            IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
              LOOP AT lt_return ASSIGNING <lfs_err> WHERE type = if_mrm_constants=>gc_msgty_e. "#EC CI_STDSEQ "#EC CI_NESTED

                CALL METHOD me->update_idoc_status
                  EXPORTING
                    iv_status      = gc_idoc_status-incomplete
                    iv_msgty       = if_mrm_constants=>gc_msgty_e
                    iv_msgid       = <lfs_err>-id
                    iv_msgno       = <lfs_err>-number
                    iv_msgv_1      = <lfs_err>-message_v1
                    iv_msgv_2      = <lfs_err>-message_v2
                    iv_msgv_3      = space
                    iv_msgv_4      = space
                  CHANGING
                    ct_idoc_data1  = ct_idoc_data1
                    ct_idoc_status = ct_idoc_status.
              ENDLOOP.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = abap_true.
            ENDIF.
            CLEAR:lt_bapimepotext.

          ENDIF.
        ENDIF.
      ELSE.
        ls_bapimepotext-po_number = |{ ls_bapimepotext-po_number ALPHA = IN }| .

*        Export PO number toi Routine only when the call is last BAPI change


        ls_bapimepotext-po_number = |{ ls_bapimepotext-po_number ALPHA = IN }| .
        DATA(lv_po_num) = ls_bapimepotext-po_number."Added by 24093785 on 17th Sep 2020
        DATA(lv_bapi_count) = abap_true."Added by 24093785 on 17th Sep 2020
        EXPORT lv_call_count FROM lv_bapi_count TO MEMORY ID lv_po_num. "Added by 24093785 on 17th Sep 2020
        CONCATENATE lv_po_num lc_ptp_1059 INTO lv_memory_1059.
        EXPORT lt_idoc FROM gt_idoc_data1 TO DATABASE indx(zk) ID lv_memory_1059. " Added by IDOC_INPUT_ORDCHG to capture IDOC DATA in PTPI1059
        "This is the last call
        DATA(lv_bapi_call_count) = abap_true.


* Export final BAPI call flag to output routine 964
        EXPORT lv_call_count FROM lv_bapi_call_count TO MEMORY ID ls_bapimepotext-po_number. "Added by 24072555 on 29th Aug 2020

        CALL FUNCTION 'BAPI_PO_CHANGE' "#EC CI_USAGE_OK[2438131]
          EXPORTING
            purchaseorder = ls_bapimepotext-po_number
          TABLES
            return        = lt_return
            potextitem    = lt_bapimepotext.

        IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
          LOOP AT lt_return ASSIGNING <lfs_err> WHERE type = if_mrm_constants=>gc_msgty_e. "#EC CI_STDSEQ "#EC CI_NESTED

            CALL METHOD me->update_idoc_status
              EXPORTING
                iv_status      = gc_idoc_status-incomplete
                iv_msgty       = if_mrm_constants=>gc_msgty_e
                iv_msgid       = <lfs_err>-id
                iv_msgno       = <lfs_err>-number
                iv_msgv_1      = <lfs_err>-message_v1
                iv_msgv_2      = <lfs_err>-message_v2
                iv_msgv_3      = space
                iv_msgv_4      = space
              CHANGING
                ct_idoc_data1  = ct_idoc_data1
                ct_idoc_status = ct_idoc_status.
          ENDLOOP.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.
        ENDIF.

        CLEAR:lt_bapimepotext.

      ENDIF.
    ENDLOOP.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->UPDATE_SO
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_IDOC_DATA1                  TYPE        IDOC_DATA
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_so.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_SO                                        *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD UPDATE_SO
***&----------------------------------------------------------------------*
*   Local data declaration
    DATA:lt_return TYPE STANDARD TABLE OF bapiret2.

    gv_document_number =  |{ gv_document_number  ALPHA = IN WIDTH = 10 }| .


**********************************************************************
*  Delete duplicate partner details
**********************************************************************
    SORT gt_partners DESCENDING.
    DELETE gt_partners WHERE partn_role = space.
    DELETE ADJACENT DUPLICATES FROM gt_partners COMPARING partn_role.

**********************************************************************
*   Delete duplicate Text Details
**********************************************************************
    SORT gt_order_text BY doc_number itm_number text_id.
    DELETE ADJACENT DUPLICATES FROM gt_order_text COMPARING doc_number itm_number text_id.

    gs_order_header_inx-updateflag = gc_u.
    CLEAR gv_gts_block_exist.
************************************************************************************
    "Update document using BAPI
************************************************************************************
    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'   "#EC CI_USAGE_OK[2438131]
      EXPORTING
        salesdocument    = gv_document_number
        order_header_in  = gs_order_header_in
        order_header_inx = gs_order_header_inx
      TABLES
        return           = lt_return
        order_item_in    = gt_order_item_in
        order_item_inx   = gt_order_item_inx
        partners         = gt_partners
        partnerchanges   = gt_bapiparnrc
        schedule_lines   = gt_schedule_lines
        schedule_linesx  = gt_schedule_linesx
        order_text       = gt_order_text
        conditions_in    = gt_conditions_in
        conditions_inx   = gt_conditions_inx.
    IF gv_gts_block_exist EQ abap_true.
      CLEAR gv_gts_block_exist.
      "Fail , update with 51
      update_idoc_status(
                     EXPORTING
                              iv_status = gc_idoc_status-error
                              iv_msgty  = if_mrm_constants=>gc_msgty_e
                              iv_msgid  = gc_msgid_1
                              iv_msgno  = gc_messages-gc_msgno_482
                              iv_msgv_1 = space
                              iv_msgv_2 = space
                              iv_msgv_3 = space
                              iv_msgv_4 = space
                    CHANGING
                            ct_idoc_data1  = gt_idoc_data1[]
                            ct_idoc_status = ct_idoc_status[] ).
      gv_succe = abap_false.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      RETURN.
    ENDIF.

    IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
      LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<lfs_err>) WHERE type = if_mrm_constants=>gc_msgty_e.
        CALL METHOD me->update_idoc_status
          EXPORTING
            iv_status      = gc_idoc_status-error
            iv_msgty       = if_mrm_constants=>gc_msgty_e
            iv_msgid       = <lfs_err>-id
            iv_msgno       = <lfs_err>-number
            iv_msgv_1      = <lfs_err>-message_v1
            iv_msgv_2      = <lfs_err>-message_v2
            iv_msgv_3      = space
            iv_msgv_4      = space
          CHANGING
            ct_idoc_data1  = ct_idoc_data1
            ct_idoc_status = ct_idoc_status.
      ENDLOOP.

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      gv_succe = abap_false.
      RETURN.

    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.

      CALL FUNCTION 'DEQUEUE_ALL'
        EXPORTING
          _synchron = abap_true.

      gv_succe = abap_true.
    ENDIF.

    CLEAR:
    gt_order_item_in,gt_order_item_inx,
    gt_partners,gt_schedule_lines,
    gt_schedule_linesx,gt_order_text,gt_conditions_in,gt_conditions_inx.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->UPDATE_SO_HOI
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_IDOC_DATA1                  TYPE        IDOC_DATA
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_so_hoi.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_SO                                        *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  11/29/2020                                       *
**  Object ID         :  OTC1804_CR_1516                                          *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK948161                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
***& METHOD UPDATE_SO_HOI
***&----------------------------------------------------------------------*
*   Local data declaration
    DATA:lt_return TYPE STANDARD TABLE OF bapiret2. "Return table for BAPI

    gv_document_number =  |{ gv_document_number  ALPHA = IN WIDTH = 10 }| .


**********************************************************************
*  Delete duplicate partner details
**********************************************************************
    DELETE gt_partners_hoi WHERE partn_role = space.
    SORT gt_partners_hoi ASCENDING BY partn_role.
    DELETE ADJACENT DUPLICATES FROM gt_partners_hoi COMPARING partn_role.

**********************************************************************
*   Delete duplicate Text Details
**********************************************************************
    SORT gt_order_text_hoi BY doc_number itm_number text_id.
    DELETE ADJACENT DUPLICATES FROM gt_order_text_hoi COMPARING doc_number itm_number text_id.

    gs_order_header_inx_hoi-updateflag = gc_u.
    CLEAR gv_gts_block_exist.
************************************************************************************
    "Update document using BAPI
************************************************************************************
    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'   "#EC CI_USAGE_OK[2438131]
      EXPORTING
        salesdocument    = gv_document_number
        order_header_in  = gs_order_header_in_hoi
        order_header_inx = gs_order_header_inx_hoi
      TABLES
        return           = lt_return
        order_item_in    = gt_order_item_in_hoi
        order_item_inx   = gt_order_item_inx_hoi
        partners         = gt_partners_hoi
        partnerchanges   = gt_bapiparnrc_hoi
        schedule_lines   = gt_schedule_lines_hoi
        schedule_linesx  = gt_schedule_linesx_hoi
        order_text       = gt_order_text_hoi
        conditions_in    = gt_conditions_in_hoi
        conditions_inx   = gt_conditions_inx_hoi.
    IF gv_gts_block_exist EQ abap_true.
      CLEAR gv_gts_block_exist.
      "Fail , update with 51
      update_idoc_status(
                     EXPORTING
                              iv_status = gc_idoc_status-error
                              iv_msgty  = if_mrm_constants=>gc_msgty_e
                              iv_msgid  = gc_msgid_1
                              iv_msgno  = gc_messages-gc_msgno_482
                              iv_msgv_1 = space
                              iv_msgv_2 = space
                              iv_msgv_3 = space
                              iv_msgv_4 = space
                    CHANGING
                            ct_idoc_data1  = gt_idoc_data1[]
                            ct_idoc_status = ct_idoc_status[] ).
      gv_succe = abap_false.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      RETURN.
    ENDIF.

    IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ).
      LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<lfs_err>) WHERE type = if_mrm_constants=>gc_msgty_e.
        CALL METHOD me->update_idoc_status
          EXPORTING
            iv_status      = gc_idoc_status-error
            iv_msgty       = if_mrm_constants=>gc_msgty_e
            iv_msgid       = <lfs_err>-id
            iv_msgno       = <lfs_err>-number
            iv_msgv_1      = <lfs_err>-message_v1
            iv_msgv_2      = <lfs_err>-message_v2
            iv_msgv_3      = space
            iv_msgv_4      = space
          CHANGING
            ct_idoc_data1  = ct_idoc_data1
            ct_idoc_status = ct_idoc_status.
      ENDLOOP.

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      gv_succe = abap_false.
      RETURN.

    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.

      CALL FUNCTION 'DEQUEUE_ALL'
        EXPORTING
          _synchron = abap_true.

      gv_succe = abap_true.
    ENDIF.

    CLEAR:
    gt_order_item_in_hoi,gt_order_item_inx_hoi,
    gt_partners_hoi,gt_schedule_lines_hoi,
    gt_schedule_linesx_hoi,gt_order_text_hoi,
    gt_conditions_in_hoi,gt_conditions_inx_hoi.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->UPDATE_SO_SPLIT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_VBEP_DETAIL                 TYPE        GTT_VBEP_DETAIL
* | [--->] IV_CALL_COUNT                  TYPE        CHAR1(optional)
* | [<---] ES_RETURN                      TYPE        BAPIRET1
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
 METHOD update_so_split.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_SO_SPLIT                                  *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  07/29/2020                                       *
**  Object ID         :  OTCI1084                                         *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK921693                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
*   11/24/2020 | CR_39940   | 24093780   | Contract locked before SO Split
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
*  Local types
   TYPES:BEGIN OF lty_preq,
           vbeln TYPE ebeln,
           posnr TYPE ebelp,
         END OF lty_preq.
   "Local variable declaration
   DATA:lv_last_line_item    TYPE posnr_va,
        lv_po_last_line_item TYPE ebelp,
        lv_msg               TYPE c LENGTH 255,
        lv_ps_psp_pnr        TYPE ps_posid,
        lv_po_num            TYPE ebeln,
        lv_agreement         TYPE eqegraarg,                "CR_39940
        lv_uname             TYPE syst_uname VALUE '*',     "CR_39940
        lv_number            TYPE sy-tabix,                 "CR_39940
        lv_subrc             TYPE sy-subrc.                 "CR_39940


   "Local data declaration for tables
   DATA:
     lt_items         TYPE STANDARD TABLE OF bapiekpo, "po item texts
     lt_return        TYPE STANDARD TABLE OF bapireturn, "Err tab
     lt_return_change TYPE STANDARD TABLE OF bapiret2, "PO change return table
     lt_poitem        TYPE STANDARD TABLE OF bapimepoitem,     "Bapi get details tab
     lt_poitemx       TYPE STANDARD TABLE OF bapimepoitemx,    "Bapi item update tab
     lt_poschedule    TYPE STANDARD TABLE OF bapimeposchedule, "Schedule item
     lt_poschedulex   TYPE STANDARD TABLE OF bapimeposchedulx, "Schedule item update
     lt_po_item_texts TYPE STANDARD TABLE OF bapiekpotx,
     lt_potextitem    TYPE STANDARD TABLE OF bapimepotext,
     lt_order_text    TYPE STANDARD TABLE OF bapisdtext,
     lt_enq           TYPE STANDARD TABLE OF seqg3         , "CR_39940
     ls_header_change TYPE bapimepoheader,
     ls_poheadx       TYPE bapimepoheaderx.

   DATA:lt_partners        TYPE STANDARD TABLE OF bapiparnr,
        lt_order_item_in   TYPE STANDARD TABLE OF bapisditm,
        lt_order_item_inx  TYPE STANDARD TABLE OF bapisditmx,
        lt_schedule_lines  TYPE STANDARD TABLE OF bapischdl,
        lt_schedule_linesx TYPE STANDARD TABLE OF bapischdlx,
        lt_condition       TYPE STANDARD TABLE OF bapimepocondheader,
        lt_conditions_so   TYPE STANDARD TABLE OF bapicond,
        lt_conditions_sox  TYPE STANDARD TABLE OF bapicondx,
        ls_condition       TYPE bapimepocondheader,
        lt_conditionx      TYPE STANDARD TABLE OF bapimepocondheaderx,
        ls_conditionx      TYPE bapimepocondheaderx,
        ls_preq            TYPE lty_preq,
        lt_fieldinfo       TYPE TABLE OF dfies,
        lt_preq            TYPE STANDARD TABLE OF lty_preq,
        ls_condx           TYPE bapicondx,
        ls_cond            TYPE bapicond.
   "Local structure declaration
   DATA:
     ls_poitemx          TYPE bapimepoitemx,
     ls_potextitem       TYPE bapimepotext,
     ls_items_backup     TYPE bapiekpo,
     ls_poschedule       TYPE bapimeposchedule,
     ls_poschedulex      TYPE bapimeposchedulx,
     ls_header           TYPE bapiekkol,
     ls_poitem           TYPE bapimepoitem,
     ls_order_header_inx TYPE bapisdh1x,
     ls_partners         TYPE bapiparnr,
     ls_sales            TYPE sales_key,
     ls_order_text       TYPE bapisdtext.

*   Local structure declaration
   DATA:ls_bapi_view    TYPE order_view,
        ls_order_header TYPE bapisdhd,
        ls_poheader     TYPE bapiekkol,
        lt_sales        TYPE STANDARD TABLE OF sales_key,
        lt_order_header TYPE STANDARD TABLE OF bapisdhd,
        lt_so_items     TYPE STANDARD TABLE OF bapisditbos,
        lt_so_items1    TYPE STANDARD TABLE OF bapisdit,
        lt_so_schedule  TYPE STANDARD TABLE OF bapisdhedu,
        lt_so_partners  TYPE STANDARD TABLE OF bapisdpart,
        lt_so_condiions TYPE STANDARD TABLE OF bapisdcond,
        lt_so_texts     TYPE STANDARD TABLE OF bapitextli,
        lv_memory_1059  TYPE char20.

*  Local constants
   CONSTANTS:
     lc_en             TYPE spras VALUE 'E', "Language key
     lc_msgid          TYPE sy-msgid VALUE 'ZPTP_MSGS', "Messge class
     lc_msg046         TYPE char3 VALUE '046', "MSG number
     lc_msg026         TYPE char3 VALUE '026', "MSG number
     lc_bapisditm      TYPE ddobjname VALUE 'BAPISDITM', "Order item
     lc_bapicond       TYPE ddobjname VALUE 'BAPICOND', "Order conditions
     lc_read_db        TYPE char1 VALUE 'A', "Read from DB Memory
     lc_ptp_1059       TYPE c LENGTH 9 VALUE 'ZPTP_1059',
     lc_1084_wait_time TYPE rvari_vnam VALUE 'ZOTCI1084_WAIT_TIME',
     lc_1              TYPE i VALUE 1, "constant 1
     lc_max_time       TYPE i VALUE 10, "Maximum while loop to check if SO locked
     lc_ekko           TYPE eqegraname VALUE 'EKKO',        "CR_39940
     lc_1058_ptp       TYPE bdidocstat-msgid VALUE 'ZPTP_1058'. "CR_39940

   CLEAR:lt_order_item_in,
         lt_order_item_inx,
         lt_schedule_lines,
         lt_schedule_linesx,
         lt_order_text,
         lt_poitem,
         lt_poitemx,
         lt_poschedule,
         lt_poschedulex,
         gt_potextheader,
         lt_potextitem.

   ls_sales-vbeln = gv_document_number.
   APPEND ls_sales TO lt_sales.

*Enable data to be read for SD Header, SD Items and SD Schedule Lines
   ls_bapi_view-header     = abap_true.
   ls_bapi_view-item       = abap_true.
   ls_bapi_view-sdschedule = abap_true.
   ls_bapi_view-partner    = abap_true.
   ls_bapi_view-sdcond     = abap_true.
   ls_bapi_view-sdcond_add = abap_true.
   ls_bapi_view-text = abap_true.

   CALL FUNCTION 'BAPISDORDER_GETDETAILEDLIST'
     EXPORTING
       i_bapi_view          = ls_bapi_view
       i_memory_read        = lc_read_db
     TABLES
       sales_documents      = lt_sales
       order_headers_out    = lt_order_header
       order_items_out      = lt_so_items1
       order_schedules_out  = lt_so_schedule
       order_partners_out   = lt_so_partners
       order_conditions_out = lt_so_condiions
       order_textlines_out  = lt_so_texts.

   IF lt_order_header IS NOT INITIAL.
     ls_order_header = lt_order_header[ 1 ].
   ENDIF.
   MOVE-CORRESPONDING lt_so_items1 TO lt_so_items.

   "Check if details exist
   IF line_exists( it_vbep_detail[ 1 ] ) .
     "Idoc data gt_ekpo detail contains change items
     DATA(ls_vbep_detail) = it_vbep_detail[ 1 ].
     "Add flag to check GTS block exists

     CLEAR:gv_check_gts_block_exist,
           gv_csp_line_item.

     gv_check_gts_block_exist = abap_true.
     gv_csp_line_item = ls_vbep_detail-posnr.

     IF line_exists( lt_so_items[ doc_number = ls_vbep_detail-vbeln itm_number = ls_vbep_detail-posnr ] ).
       "Read bapi data with first line item
       DATA(ls_so_items) = lt_so_items[ doc_number = ls_vbep_detail-vbeln itm_number = ls_vbep_detail-posnr ].
       "Populate item tabs to sen to bapi change
       DATA(ls_order_item_in_c) = VALUE bapisditm( itm_number = ls_so_items-itm_number
                                                   plant      = ls_so_items-plant
                                                   item_categ = ls_so_items-item_categ ).
       "Update X table
       DATA(ls_order_item_inx_c) = VALUE bapisditmx( itm_number = ls_so_items-itm_number
                                                     plant      = abap_true
                                                     item_categ = abap_true
                                                     updateflag = if_mrm_constants=>gc_updkz-update ).
*      SMP Flag
       IF NOT line_exists(  lt_order_text[ doc_number =  gv_document_number itm_number = ls_so_items-itm_number
                                          text_id = gc_zicg ] ).
         ls_order_text  = VALUE #( doc_number =  gv_document_number
                                   itm_number = ls_so_items-itm_number
                                   text_id = gc_zicg
                                   langu = lc_en
                                   text_line = ls_vbep_detail-smp_flag
                                    ).  " timestamp.
         APPEND ls_order_text TO lt_order_text.
         CLEAR ls_order_text.
       ENDIF.

*      ZAK Original Line item
       IF NOT line_exists( lt_order_text[ doc_number =  gv_document_number
                                          itm_number = ls_so_items-itm_number
                                          text_id    = gc_zzak ] ).
         ls_order_text  = VALUE #( doc_number =  gv_document_number
                                   itm_number = ls_so_items-itm_number
                                   text_id    = gc_zzak
                                   langu      = lc_en
                                   text_line  = ls_vbep_detail-smp_addtnl ).  "timestamp.
         APPEND ls_order_text TO lt_order_text.
         CLEAR ls_order_text.
       ENDIF.

       APPEND:ls_order_item_in_c TO lt_order_item_in,
              ls_order_item_inx_c TO lt_order_item_inx.
       CLEAR:ls_order_item_in_c,ls_order_item_inx_c,ls_order_text.
     ELSE.
       RETURN.
     ENDIF.

   ENDIF.
   "fetch item with only ord_req quantity not zero
   LOOP AT lt_so_schedule ASSIGNING FIELD-SYMBOL(<lfs_so_schd>) WHERE doc_number = gv_document_number AND
                                                                      itm_number = ls_so_items-itm_number  AND
                                                                      req_qty <> space.
     DATA(ls_vbep) = <lfs_so_schd>."populate VBEP structure if found
   ENDLOOP.

   CALL METHOD me->fetch_po_line_item
     EXPORTING
       iv_posnv = CONV posnr( ls_so_items-itm_number ) ##OPERATOR[POSNR]
     IMPORTING
       es_vbfa  = DATA(ls_vbfa).
   IF ls_vbfa IS NOT INITIAL.
     CLEAR lv_po_num.
     lv_po_num = |{ ls_vbfa-vbeln ALPHA = IN }| .
     CLEAR:lt_return_change,
           lt_items.
     CALL FUNCTION 'BAPI_PO_GETDETAIL'  "#EC CI_USAGE_OK[1803189]
       EXPORTING
         purchaseorder = lv_po_num
         items         = abap_true
       IMPORTING
         po_header     = ls_poheader
       TABLES
         po_items      = lt_items
         return        = lt_return_change.
   ENDIF.
   IF line_exists( lt_items[ po_number = ls_vbfa-vbeln  po_item = ls_vbfa-posnn ] ).
     DATA(ls_items) = lt_items[ po_number = ls_vbfa-vbeln  po_item = ls_vbfa-posnn ].
   ENDIF.

   "Delete AB lines for a PO if it has one
   CALL METHOD delete_ab_texts
     EXPORTING
       iv_ebeln = ls_items-po_number
       iv_ebelp = ls_items-po_item.

   "Populate schedule lines internal table
   DATA(ls_schedule_lines) = VALUE bapischdl( itm_number = ls_so_items-itm_number
                                              sched_line = ls_vbep-sched_line
                                              req_date   = ls_vbep_detail-edatu
                                              req_qty    = ls_vbep_detail-wmeng  ).
   "Populate schdule lines update tab
   DATA(ls_schedule_linesx) = VALUE  bapischdlx(
                                   itm_number = ls_so_items-itm_number
                                   sched_line = ls_vbep-sched_line
                                   updateflag = if_mrm_constants=>gc_updkz-update
                                   req_date   = abap_true
                                   req_qty    = abap_true  ).

   APPEND:ls_schedule_lines TO lt_schedule_lines,
          ls_schedule_linesx TO lt_schedule_linesx.
   CLEAR: ls_schedule_lines, ls_schedule_linesx.

   "Insert new line item"lt_ekpo_detail[ 1 ] contains change line item
   DESCRIBE TABLE  lt_so_items LINES DATA(lv_last_item).
   IF line_exists( lt_so_items[ lv_last_item ] ).
     "Fetch last line item and append rest of the lines with update U before passing to BAPI
     DATA(ls_so_last_item) =  lt_so_items[ lv_last_item ].
     lv_last_line_item = ls_so_last_item-itm_number.
   ENDIF.

   CLEAR:lt_preq,
         lt_partners.
   "Loop through the idoc changes from second row to Append to SO
   LOOP AT it_vbep_detail ASSIGNING FIELD-SYMBOL(<lfs_vbep>) FROM 2.
     lv_last_line_item = lv_last_line_item + gc_000010.
     "Append to item tab

     CLEAR lv_ps_psp_pnr.
     CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
       EXPORTING
         input  = ls_so_items-wbs_elem
       IMPORTING
         output = lv_ps_psp_pnr.

     ls_preq = VALUE lty_preq( vbeln = ls_so_items-doc_number
                               posnr = lv_last_line_item ).
     APPEND ls_preq TO lt_preq.

     MOVE-CORRESPONDING ls_so_items TO ls_order_item_in_c.
     ls_order_item_in_c-itm_number  = lv_last_line_item.
     ls_order_item_in_c-material    = ls_so_items-material.
     ls_order_item_in_c-route       = ls_so_items-route.
     ls_order_item_in_c-wbs_elem    = lv_ps_psp_pnr  .
     ls_order_item_in_c-cust_mat35  = ls_so_items-cust_mat35.
     ls_order_item_in_c-untof_wght  = ls_so_items-unit_of_wt. "++ Adding weight unit
     ls_order_item_in_c-unof_wtiso  = ls_so_items-unit_wtiso. "++ Adding weight unit
     ls_order_item_in_c-store_loc   = ls_so_items-stge_loc.   "++ Storage location is missing in both line items 10 & 20: CR36963
     ls_order_item_in_c-ref_1       = lv_last_line_item.      "++ VBKD-IHREZ CR36963

     "Updte ITEMX tab
     CLEAR lt_fieldinfo.
     CALL FUNCTION 'DDIF_FIELDINFO_GET' "#EC CI_SUBRC
       EXPORTING
         tabname        = lc_bapisditm
         langu          = sy-langu
       TABLES
         dfies_tab      = lt_fieldinfo
       EXCEPTIONS
         not_found      = 1
         internal_error = 2
         OTHERS         = 3.
     IF sy-subrc <> 0.
* Implement suitable error handling here
     ENDIF.

     LOOP AT lt_fieldinfo ASSIGNING FIELD-SYMBOL(<lfs_fieldinfo>). "#EC CI_NESTED
       ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE  ls_order_item_in_c TO FIELD-SYMBOL(<lfs_bapi>).
       IF sy-subrc <> 0. EXIT. ENDIF.
       ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_order_item_inx_c TO FIELD-SYMBOL(<lfs_bapix>).
       IF <lfs_bapi> IS NOT INITIAL.
         <lfs_bapix> = abap_true.
       ENDIF.
     ENDLOOP.

     ls_order_item_inx_c-itm_number = lv_last_line_item.
     ls_order_item_inx_c-updateflag = if_mrm_constants=>gc_updkz-insert.
     ls_order_item_inx_c-material   = abap_true.
     ls_order_item_inx_c-route      = abap_true.
     ls_order_item_inx_c-wbs_elem   = abap_true.
     ls_order_item_inx_c-plant      = abap_true.
     ls_order_item_inx_c-item_categ = abap_true.
     ls_order_item_inx_c-cust_mat35 = abap_true.
     ls_order_item_inx_c-untof_wght = abap_true.
     ls_order_item_inx_c-store_loc  = abap_true.  "++ Storage location is missing in both line items 10 & 20: CR36963
     ls_order_item_inx_c-ref_1      = abap_true.  "++ VBKD-IHREZ CR36963

     "Populate schedule line table
     ls_schedule_lines = VALUE #( itm_number =  lv_last_line_item
                                  sched_line  = gc_001
                                  req_date    = <lfs_vbep>-edatu
                                  req_qty     = <lfs_vbep>-wmeng  ).
     "Populate schedule update
     ls_schedule_linesx = VALUE #( itm_number =  lv_last_line_item
                                   sched_line = gc_001
                                   updateflag = if_mrm_constants=>gc_updkz-insert
                                   req_date   = abap_true
                                   req_qty    = abap_true  ).


     LOOP AT lt_so_partners ASSIGNING FIELD-SYMBOL(<lfs_so_partners>) WHERE sd_doc = gv_document_number "#EC CI_STDSEQ "#EC CI_NESTED
                                                                      AND itm_number = ls_so_items-itm_number.
       ls_partners-partn_role = <lfs_so_partners>-partn_role.
       IF <lfs_so_partners>-customer IS ASSIGNED AND <lfs_so_partners>-customer IS NOT INITIAL.
         ls_partners-partn_numb = <lfs_so_partners>-customer.
       ENDIF.

       IF <lfs_so_partners>-vendor_no IS ASSIGNED AND <lfs_so_partners>-vendor_no IS NOT INITIAL.
         ls_partners-partn_numb = <lfs_so_partners>-vendor_no.
       ENDIF.

       ls_partners-itm_number = lv_last_line_item.
       APPEND ls_partners TO lt_partners.
     ENDLOOP.

     LOOP AT lt_so_condiions ASSIGNING FIELD-SYMBOL(<lfs_so_condiions>) WHERE sd_doc = gv_document_number "#EC CI_NESTED
        AND itm_number = ls_so_items-itm_number AND cond_type = gc_zmzq.

       MOVE-CORRESPONDING <lfs_so_condiions> TO ls_cond.
       APPEND ls_cond TO lt_conditions_so.
       CLEAR ls_condx.
       ls_condx-itm_number = ls_cond-itm_number .
       ls_condx-cond_type  = gc_zmzq.
       ls_condx-updateflag = if_mrm_constants=>gc_updkz-update.
       APPEND ls_condx TO lt_conditions_sox.

       DATA(ls_conditions_in) = VALUE bapicond( itm_number     = lv_last_line_item
                                                cond_type      = <lfs_so_condiions>-cond_type
                                                cond_value     = <lfs_so_condiions>-cond_value / 10
                                                cond_p_unt     = <lfs_so_condiions>-cond_p_unt ).
       APPEND:ls_conditions_in TO lt_conditions_so.

       DATA(ls_conditions_inx) = VALUE bapicondx(  itm_number  = lv_last_line_item
                                                   cond_type     = <lfs_so_condiions>-cond_type
                                                   cond_value    = abap_true
                                                   cond_p_unt    = abap_true
                                                   updateflag    = if_mrm_constants=>gc_updkz-insert ).
       APPEND ls_conditions_inx TO lt_conditions_sox.

       CLEAR lt_fieldinfo.
       CALL FUNCTION 'DDIF_FIELDINFO_GET' "#EC CI_SUBRC
         EXPORTING
           tabname        = lc_bapicond
           langu          = sy-langu
         TABLES
           dfies_tab      = lt_fieldinfo
         EXCEPTIONS
           not_found      = 1
           internal_error = 2
           OTHERS         = 3.
       IF sy-subrc <> 0.
* Implement suitable error handling here
       ENDIF.
       LOOP AT lt_fieldinfo ASSIGNING <lfs_fieldinfo>.   "#EC CI_NESTED
         ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_cond TO <lfs_bapi>.
         IF sy-subrc <> 0. EXIT. ENDIF.
         ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_condx TO <lfs_bapix>.
         IF <lfs_bapi> IS NOT INITIAL.
           <lfs_bapix> = abap_true.
         ENDIF.
       ENDLOOP.

     ENDLOOP.
     DATA(lv_text_name) = |{ gv_document_number && ls_so_items-itm_number }|.
     CONDENSE lv_text_name NO-GAPS.

     LOOP AT lt_so_texts ASSIGNING FIELD-SYMBOL(<lfs_so_texts>)  WHERE applobject = gc_vbbp "#EC CI_STDSEQ "#EC CI_NESTED
                                                                 AND text_name = lv_text_name.
       IF <lfs_so_texts>-text_id EQ gc_zicg OR
          <lfs_so_texts>-text_id EQ gc_zrso OR
          <lfs_so_texts>-text_id EQ gc_zrsi OR
          <lfs_so_texts>-text_id EQ gc_zzak.
         CONTINUE.
       ENDIF.

       ls_order_text  = VALUE #( doc_number = gv_document_number
                              itm_number = lv_last_line_item
                              text_id = <lfs_so_texts>-text_id
                              langu = lc_en
                              text_line = <lfs_so_texts>-line ).  " timestamp.
       APPEND ls_order_text TO lt_order_text.
       CLEAR ls_order_text.
     ENDLOOP.

     TRY.
         DATA(lv_itemtext) = lt_so_texts[ applobject = gc_vbbp
                                          text_name = | { gv_document_number && ls_so_items-itm_number } |
                                          text_id = gc_zsrn ].
         ls_order_text  = VALUE #(
                                doc_number = gv_document_number
                                itm_number = lv_last_line_item
                                text_id = gc_zsrn
                                langu = lc_en
                                text_line = lv_itemtext-line  ).  "timestamp.
         APPEND ls_order_text TO lt_order_text.
         CLEAR ls_order_text.
       CATCH cx_sy_itab_line_not_found.
         CLEAR lv_itemtext.
     ENDTRY.

     ls_order_text  = VALUE #( doc_number = gv_document_number
                             itm_number = lv_last_line_item
                             text_id = gc_zicg
                             langu = lc_en
                             text_line = gc_n  ).  " timestamp.
     APPEND ls_order_text TO lt_order_text.
     CLEAR ls_order_text.

*    ZAK New Line Item
     IF NOT line_exists( lt_order_text[ doc_number =  gv_document_number
                                        itm_number = lv_last_line_item
                                        text_id    = gc_zzak ] ).
       ls_order_text  = VALUE #( doc_number =  gv_document_number
*                                 itm_number = ls_so_items-itm_number
                                 itm_number = lv_last_line_item
                                 text_id    = gc_zzak
                                 langu      = lc_en
                                 text_line  = <lfs_vbep>-smp_addtnl ).  "Additional change flag
       APPEND ls_order_text TO lt_order_text.
       CLEAR ls_order_text.
     ENDIF.

     ls_order_text  = VALUE #( doc_number = gv_document_number
                               itm_number = lv_last_line_item
                               text_id   = gc_zrso
                               langu     = lc_en
                               text_line = ls_so_items-itm_number  ).  " ZRSO
     APPEND ls_order_text TO lt_order_text.
     CLEAR ls_order_text.
*     endif.

     ls_order_text  = VALUE #( doc_number = gv_document_number
                            itm_number = lv_last_line_item
                            text_id = gc_zrsi
                            langu = lc_en
                            text_line = <lfs_vbep>-zsi ).  " timestamp.  ZSI
     APPEND ls_order_text TO lt_order_text.
     CLEAR ls_order_text.


     "Populate itabs to send to Bapi Change
     APPEND:ls_order_item_in_c  TO lt_order_item_in,
            ls_order_item_inx_c TO lt_order_item_inx,
            ls_schedule_lines   TO lt_schedule_lines,
            ls_schedule_linesx  TO lt_schedule_linesx.
     CLEAR:ls_schedule_lines,
           ls_schedule_linesx,
           ls_order_item_in_c,
           ls_order_item_inx_c.
   ENDLOOP.

   "Update split Sales org using Bapi BAPI_SALESORDER_CHANGE
   gs_order_header_inx-updateflag = if_mrm_constants=>gc_updkz-update.

**********************************************************************
*   Delete duplicate Text Details
**********************************************************************
   SORT lt_order_text BY doc_number itm_number text_id.
   DELETE ADJACENT DUPLICATES FROM lt_order_text COMPARING doc_number itm_number text_id.

* Check if Contract if open/locked by any user before proceeding to SO Split.
*   Return if Locked with error message
*   Begin of CR_39940 by 24093840 on 11/24/2020 S4DK949398
   CLEAR lt_enq.


   lv_agreement = | { sy-mandt } | && |{ ls_items-agreement }|.
   CONDENSE lv_agreement NO-GAPS.
   CALL FUNCTION 'ENQUEUE_READ'
     EXPORTING
       gclient               = sy-mandt
       gname                 = lc_ekko
       garg                  = lv_agreement
       guname                = lv_uname
*      LOCAL                 = lv_local
*      FAST                  = lv_fast
*      GARGNOWC              = lv_gargnowc
     IMPORTING
       number                = lv_number
       subrc                 = lv_subrc
     TABLES
       enq                   = lt_enq
     EXCEPTIONS
       communication_failure = 1
       system_failure        = 2
       OTHERS                = 3.
   IF sy-subrc = 0 AND lt_enq IS NOT INITIAL.
     "Fail , update with 51

     update_idoc_status(
                    EXPORTING
                             iv_status = gc_idoc_status-error
                             iv_msgty  = if_mrm_constants=>gc_msgty_e
                             iv_msgid  = lc_1058_ptp
                             iv_msgno  = CONV syst_msgno( lc_msg026 )
                             iv_msgv_1 = CONV edi_stapa1( lt_enq[ 1 ]-guname )
                             iv_msgv_2 = CONV edi_stapa2( ls_items-agreement )
                             iv_msgv_3 = space
                             iv_msgv_4 = space
                   CHANGING
                           ct_idoc_data1  = gt_idoc_data1[]
                           ct_idoc_status = ct_idoc_status[] ).
     gv_succe = abap_false.
     RETURN.
   ENDIF.
*   End of CR_39940 by 24093840 on 11/24/2020 S4DK949398


*  Fill parameters for Enqueue and Dequeue
   DATA(lv_locked)   = abap_false.
   DATA(lv_counter)  = lc_1.
   DATA(lv_max_time) = lc_max_time.
   WHILE lv_locked IS INITIAL.
     CALL FUNCTION 'ENQUEUE_EVVBAKE'
       EXPORTING
         mode_vbak      = if_mrm_constants=>gc_msgty_e
         mandt          = sy-mandt
         vbeln          = gv_document_number
         _wait          = abap_true
       EXCEPTIONS
         foreign_lock   = 1
         system_failure = 2
         OTHERS         = 3.
     IF sy-subrc = 0.
       lv_locked = abap_true.
     ELSE.
       WAIT UP TO lc_1 SECONDS.
       lv_counter = lv_counter + 1.
       IF lv_counter > lv_max_time.
         EXIT.
       ENDIF.
* Implement suitable error handling here
     ENDIF.
   ENDWHILE.

   CALL FUNCTION 'DEQUEUE_EVVBAKE'
     EXPORTING
       mode_vbak = 'E'
       mandt     = sy-mandt
       vbeln     = gv_document_number
       _synchron = 'X'.

   gs_order_header_inx-updateflag = if_mrm_constants=>gc_updkz-update.
   CLEAR lt_return_change.
   CLEAR gv_gts_block_exist.

   CALL FUNCTION 'ZOTC_I1084_ORDCHG'
     DESTINATION 'NONE'
     EXPORTING
       iv_so_num                = gv_document_number " Purchasing Document Number
       is_order_header_in       = gs_order_header_in
       is_order_header_inx      = ls_order_header_inx ##ENH_OK " Purchase Order Header Data (Change Parameter)
       iv_check_gts_block_exist = gv_check_gts_block_exist
       iv_csp_line_item         = gv_csp_line_item
     IMPORTING
       ev_gts_block_exist       = gv_gts_block_exist
     TABLES
       it_return_so             = lt_return_change  " Return Parameter
       it_order_item_in_c       = lt_order_item_in ##ENH_OK " Purchase Order Item
       it_order_item_inx_c      = lt_order_item_inx " Purchase Order Item Data (Change Parameter)
       it_schedule_lines        = lt_schedule_lines "Partners data
       it_schedule_linesx       = lt_schedule_linesx " Fields for Purchase Order Delivery Schedule Lines
       it_order_text            = lt_order_text  " Fields for Schedule Lines in Purchase Order (Change Toolbar)
       it_partners              = lt_partners
       it_conditions_in         = lt_conditions_so  " Communication Fields for Maintaining Conditions in the Order
       it_conditions_inx        = lt_conditions_sox " Communication Fields for Maintaining Conditions in the Order
     EXCEPTIONS
       system_failure           = 1 MESSAGE lv_msg
       communication_failure    = 2 MESSAGE lv_msg
       OTHERS                   = 3.

   IF sy-subrc <> 0.
* Capture the Dump message from RFC Failure.
     APPEND INITIAL LINE TO lt_return_change ASSIGNING FIELD-SYMBOL(<lfs_ret>).
     <lfs_ret> = VALUE bapiret2( message = lv_msg
                                 id      = lc_msgid
                                 number  = lc_msg046
                                 type    = if_mrm_constants=>gc_msgty_e ).

   ENDIF.
   IF gv_gts_block_exist EQ abap_true.
     CLEAR gv_gts_block_exist.
     "Fail , update with 51
     update_idoc_status(
                    EXPORTING
                             iv_status = gc_idoc_status-error
                             iv_msgty  = if_mrm_constants=>gc_msgty_e
                             iv_msgid  = gc_msgid_1
                             iv_msgno  = gc_messages-gc_msgno_482
                             iv_msgv_1 = space
                             iv_msgv_2 = space
                             iv_msgv_3 = space
                             iv_msgv_4 = space
                   CHANGING
                           ct_idoc_data1  = gt_idoc_data1[]
                           ct_idoc_status = ct_idoc_status[] ).
     gv_succe = abap_false.
     RETURN.
   ENDIF.

   "If changes is not sucessful return
   IF line_exists( lt_return_change[ type = if_mrm_constants=>gc_msgty_e ] ) OR
      line_exists( lt_return_change[ type = if_mrm_constants=>gc_msgty_a ] ).
     LOOP AT lt_return_change  INTO DATA(ls_err) WHERE type = if_mrm_constants=>gc_msgty_e OR type = if_mrm_constants=>gc_msgty_a.
       DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idoc_number
                                              status  = gc_idoc_status-error
                                              msgty  = ls_err-type
                                              msgid  = ls_err-id
                                              msgno  = ls_err-number
                                              msgv1  = ls_err-message_v1
                                              msgv2  = ls_err-message_v2
                                              msgv3  = ls_err-message_v3
                                              msgv4  = ls_err-message_v4
                                              repid  = sy-repid ).
       APPEND ls_idoc_status TO ct_idoc_status.
     ENDLOOP.

     CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

     gv_succe = abap_false.
     RETURN.
   ELSE.
     CALL METHOD me->fetch_po_line_item
       EXPORTING
         iv_posnv = CONV posnr( ls_so_items-itm_number ) ##OPERATOR[POSNR]
       IMPORTING
         es_vbfa  = ls_vbfa.
     IF ls_vbfa IS NOT INITIAL.
       CLEAR lv_po_num.
       lv_po_num = |{ ls_vbfa-vbeln ALPHA = IN }| .
       CLEAR lt_partners.
       "Fetch PO details using gv_po_num
       CALL FUNCTION 'BAPI_PO_GETDETAIL'  "#EC CI_USAGE_OK[2438131]
         EXPORTING
           purchaseorder = lv_po_num
           items         = abap_true
           schedules     = abap_true
           item_texts    = abap_true
           header_texts  = abap_true
           confirmations = abap_true
         IMPORTING
           po_header     = ls_header
         TABLES
           po_items      = lt_items
           po_item_texts = lt_po_item_texts
           return        = lt_return.
       "if data does not exist return
       IF line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_e ] ) OR line_exists( lt_return[ type = if_mrm_constants=>gc_msgty_a ] ).
         TRY.
             ls_err = lt_return[ type = if_mrm_constants=>gc_msgty_e ].
           CATCH cx_sy_itab_line_not_found.
             CLEAR ls_err.
         ENDTRY.

         es_return = VALUE #( type = if_mrm_constants=>gc_msgty_e
                              message =  | { ls_err-message } { lv_po_num } | ).

         RETURN.
       ENDIF.
       "Fetch last item from header
       CLEAR lv_po_last_line_item.
       lv_po_last_line_item = ls_header-last_item.

       "check first line item and check if quantity is the same
       ls_items = lt_items[ po_number = ls_vbfa-vbeln po_item = ls_vbfa-posnn ].
       ASSIGN lt_potextitem[ po_number = ls_vbfa-vbeln
                             po_item =  ls_vbfa-posnn
                             text_id = gc_save_text-gc_tdid_f48 ] TO FIELD-SYMBOL(<lfs_potextitem>).

       IF sy-subrc EQ 0 AND <lfs_potextitem> IS ASSIGNED.
         <lfs_potextitem>-text_line =  ls_vbep_detail-smp_flag.
       ELSE.
         ls_potextitem  = VALUE #( po_number = ls_vbfa-vbeln
                                   po_item =  ls_vbfa-posnn
                                   text_id =  gc_save_text-gc_tdid_f48
                                   text_line =  ls_vbep_detail-smp_flag ).
         APPEND ls_potextitem  TO lt_potextitem .
         CLEAR ls_potextitem .

       ENDIF.

       ASSIGN lt_potextitem[ po_number = ls_vbfa-vbeln
                             po_item =  ls_vbfa-posnn
                             text_id = gc_save_text-gc_tdid_f49 ] TO <lfs_potextitem>.
       IF sy-subrc EQ 0 AND <lfs_potextitem> IS ASSIGNED.
         <lfs_potextitem>-text_line =  ls_vbep_detail-smp_addtnl.
       ELSE.
         ls_potextitem  = VALUE #(  po_number = ls_vbfa-vbeln
                                    po_item   =  ls_vbfa-posnn
                                    text_id   =  gc_save_text-gc_tdid_f49
                                    text_line =  ls_vbep_detail-smp_addtnl ).
         APPEND ls_potextitem TO lt_potextitem  .
         CLEAR ls_potextitem .
       ENDIF.

       IF ls_vbep_detail-lt1_text IS NOT INITIAL.
         ASSIGN lt_potextitem[ po_number = ls_vbfa-vbeln
                               po_item = ls_vbfa-posnn
                               text_id = gv_parent_text_id "gc_save_text-gc_tdid_f01
                                ] TO <lfs_potextitem>.
         IF sy-subrc EQ 0 AND <lfs_potextitem> IS ASSIGNED.
           <lfs_potextitem>-text_line = ls_vbep_detail-lt1_text.
         ELSE.
           ls_potextitem = VALUE #( po_number = ls_vbfa-vbeln
                                    po_item = ls_vbfa-posnn
                                    text_id = gv_parent_text_id "gc_save_text-gc_tdid_f01
                                    text_line = ls_vbep_detail-lt1_text ).
           APPEND ls_potextitem TO lt_potextitem.
         ENDIF.
       ENDIF.

       CLEAR ls_items_backup.
*********************************************************************************************
       "ls_items_backup contains back up of BAPI line item details
       ls_items_backup = ls_items.
*********************************************************************************************
       "Change Quantity for the first line item. Existing line item
       MOVE-CORRESPONDING ls_items_backup TO ls_poitem.
       IF ls_poitem-quantity NE ls_vbep_detail-wmeng.
         ls_poitem-quantity = ls_vbep_detail-wmeng.
         ls_poitemx = VALUE #( po_item  = ls_poitem-po_item
                               po_itemx = abap_true
                               material = abap_true
                               quantity = abap_true
                               plant    = abap_true
                               acctasscat = abap_true
                               ) .
         APPEND:ls_poitem TO lt_poitem,
                ls_poitemx TO lt_poitemx.

         ls_poschedule = VALUE #( po_item    = ls_poitem-po_item
                               sched_line    = gc_001
                               delivery_date = ls_vbep_detail-edatu
                               quantity      = ls_vbep_detail-wmeng
                            ).
         APPEND ls_poschedule TO lt_poschedule.

         ls_poschedulex = VALUE #( po_item     = ls_poitem-po_item
                                 sched_line    = gc_001
                                 po_itemx      = abap_true
                                 sched_linex   = abap_true
                                 delivery_date = abap_true
                                 quantity      = abap_true
                               ).
         APPEND ls_poschedulex TO lt_poschedulex.
       ENDIF.

       CLEAR:ls_poitem,ls_poitemx.

       "Fetch PR and PR line item from VBEP
       SELECT  vbeln,
               posnr,
               banfn,
               bnfpo
       INTO TABLE @DATA(lt_vbep)
        FROM vbep WHERE vbeln = @gv_document_number
       AND wmeng <> @space.
       IF sy-subrc EQ 0.
         SORT lt_vbep BY vbeln posnr.
       ENDIF.

*   Fetch condition types
       SELECT SINGLE ebeln,knumv FROM ekko
                                 INTO @DATA(ls_ekko)
                                 WHERE ebeln = @lv_po_num.
       IF sy-subrc EQ 0.
*       Pass KNUMV in PRCD_ELEMENTS-CONDITION RECORD NO
         SELECT kschl,
                kbetr,
                kpein,
                kmein
            FROM prcd_elements                            "#EC CI_SUBRC
                   UP TO 1 ROWS                         "#EC CI_NOORDER
                   INTO @DATA(ls_knumv)
                   WHERE knumv = @ls_ekko-knumv
                   AND kposn = @ls_vbfa-posnn
                   AND kschl = @gc_zmzp.
         ENDSELECT.
         IF sy-subrc NE 0.
           CLEAR ls_knumv.
         ENDIF.
       ENDIF.

** Get Tvarvc Variable data
       SELECT low UP TO 1 ROWS            "#EC CI_NOORDER "#EC CI_SUBRC
         FROM tvarvc
         INTO @DATA(lv_wait)
         WHERE name EQ @lc_1084_wait_time.
       ENDSELECT.

       "Append new line items to PO along with PR and PR number
       DATA(lv_index) = 1.
*      As Line numbember 1 it_vbep_detail contains existing entry to be changed.
*      VBEP_DETAILS loops from line 2 to add appending lines to existing PO line items.
       LOOP AT it_vbep_detail ASSIGNING FIELD-SYMBOL(<lfs_vbep_detail>) FROM 2.
*        lv_po_last_line_item holds the last item level from BAPI . adding the intervel will give us new line item .
         lv_po_last_line_item = lv_po_last_line_item + ls_header-item_intvl.
*        lt_preq table contains rows newly added to SO .Fetch lt_preq data by passing index
         IF line_exists( lt_preq[ lv_index ] ).
           CLEAR ls_preq.
           ls_preq = lt_preq[ lv_index ].
*          lt_prq contains POSNR . Pass posnr to LT_VBEP and fetch BANFN and BAFNPO
           IF line_exists( lt_vbep[ posnr =  ls_preq-posnr ] ).
             DATA(ls_vbep1) = lt_vbep[ posnr = ls_preq-posnr ].
           ENDIF.
         ENDIF.
*        Move existing details to new PO line
         MOVE-CORRESPONDING ls_items_backup TO ls_poitem.
         ls_poitem-quantity   = <lfs_vbep_detail>-wmeng."Quantity
         ls_poitem-preq_no    = ls_vbep1-banfn.         "This PR must be closed before callig bapi PO Change
         ls_poitem-preq_item  = ls_vbep1-bnfpo.         "This BNFPO is the PR line item number
         ls_poitem-po_item    = lv_po_last_line_item.   "New line item in PO
         ls_poitem-order_reason = ls_items_backup-ord_reas.
         ls_poitem-agreement =  ls_items_backup-agreement.
         ls_poitem-agmt_item = ls_items_backup-agmt_item.
*        Populate X table
         ls_poitemx = VALUE #( po_item    = ls_poitem-po_item "lv_po_last_line_item
                               po_itemx   = abap_true
                               material   = abap_true
                               quantity   = abap_true
                               plant      = abap_true
                               net_price  = abap_true
                               preq_no    = abap_true
                               preq_item  = abap_true
                               acctasscat = abap_true
                               order_reason = abap_true
                               agreement = abap_true
                               agmt_item = abap_true  ). "Needed Contract and Contract line item only for new Line item

*        Schedule line item data for PO.
         ls_poschedule = VALUE #( po_item       = lv_po_last_line_item    "Latest line item
                                  sched_line    = gc_001                  "Schedule line number
                                  delivery_date = <lfs_vbep_detail>-edatu "Date
                                  quantity      = <lfs_vbep_detail>-wmeng "Quantity
                                  req_closed    = abap_true ).
*        Schedule line itab for Changes
         ls_poschedulex = VALUE #( po_item     = lv_po_last_line_item
                                 sched_line    = gc_001
                                 po_itemx      = abap_true
                                 sched_linex   = abap_true
                                 delivery_date = abap_true
                                 quantity      = abap_true
                                 req_closed    = abap_true ).

*        For ZMZP price condition type populate condition itab
         IF ls_knumv-kschl = gc_zmzp.
           ls_condition = VALUE #(  itm_number = lv_po_last_line_item
                                    cond_type  = gc_zmzp
                                    cond_value = ( ls_knumv-kbetr / 10 )
                                    cond_p_unt = ls_knumv-kpein
                                    cond_unit  = ls_knumv-kmein
                                    change_id  = if_mrm_constants=>gc_updkz-insert   ).

           APPEND: ls_condition TO lt_condition.

           ls_conditionx = VALUE #(  itm_number = lv_po_last_line_item
                                                     cond_type  = gc_zmzp
                                                     cond_value = abap_true
                                                     cond_p_unt = abap_true
                                                     cond_unit  = abap_true
                                                     change_id  = abap_true ).
           APPEND : ls_conditionx TO lt_conditionx.
         ENDIF.

* select zmzp line item and populate condition table
***********************************************************************************************
*      Populate Texts Internal table
***********************************************************************************************
         LOOP AT lt_po_item_texts ASSIGNING FIELD-SYMBOL(<lfs_item_texts>) WHERE po_number = lv_po_num AND "#EC CI_STDSEQ "#EC CI_NESTED
                                                                                po_item = ls_items_backup-po_item.
           IF <lfs_item_texts>-text_id = gv_parent_text_id OR "gc_save_text-gc_tdid_f01. "Update F01 with parent line item number rather than text in parent line item
             <lfs_item_texts>-text_id = gv_split_text.
             CONTINUE.
           ELSE.
             IF NOT line_exists( lt_potextitem[  po_number = lv_po_num po_item = lv_po_last_line_item text_id = <lfs_item_texts>-text_id ] ).
               ls_potextitem  = VALUE #( po_number = lv_po_num
                                         po_item = lv_po_last_line_item
                                         text_id = <lfs_item_texts>-text_id
                                         text_line = <lfs_item_texts>-text_line ).
               APPEND ls_potextitem TO lt_potextitem.
               CLEAR ls_potextitem .
             ENDIF.
           ENDIF.
           CLEAR ls_potextitem .
         ENDLOOP.

         IF NOT line_exists( lt_potextitem[ po_number = lv_po_num po_item =  lv_po_last_line_item text_id =  gc_save_text-gc_tdid_f48 ]  ).
           ls_potextitem = VALUE #( po_number = lv_po_num
                                    po_item =  lv_po_last_line_item
                                    text_id =  gc_save_text-gc_tdid_f48
                                    text_line =  ls_vbep_detail-smp_flag ).
           APPEND ls_potextitem TO lt_potextitem .
           CLEAR ls_potextitem.
         ENDIF.

         IF NOT line_exists( lt_potextitem[ po_number = lv_po_num po_item =   lv_po_last_line_item text_id =  gc_save_text-gc_tdid_f49 ] ).
           ls_potextitem = VALUE #(  po_number = lv_po_num
                                     po_item =   lv_po_last_line_item
                                     text_id =  gc_save_text-gc_tdid_f49
*                                   text_line =  ls_items_backup-po_item
                                     text_line =  ls_vbep_detail-smp_addtnl
                                     ).
           APPEND ls_potextitem  TO lt_potextitem  .
           CLEAR ls_potextitem .
         ENDIF.

         IF ls_vbep_detail-lt1_text IS NOT INITIAL.
           ls_potextitem = VALUE #( po_number = lv_po_num
                                    po_item = lv_po_last_line_item
                                    text_id =  gv_parent_text_id "gc_save_text-gc_tdid_f01
                                    text_line = ls_vbep_detail-lt1_text ).

           APPEND ls_potextitem TO lt_potextitem.
           CLEAR ls_potextitem.
         ENDIF.


         ls_potextitem = VALUE #( po_number = lv_po_num
                                 po_item    = lv_po_last_line_item
                                 text_id    = gv_split_text     "F60
                                 text_line  = ls_items_backup-po_item ).
         APPEND ls_potextitem TO lt_potextitem.
         CLEAR ls_potextitem.

         APPEND:ls_poschedule TO lt_poschedule,
                ls_poschedulex TO lt_poschedulex.
         APPEND:ls_poitem TO lt_poitem,
                ls_poitemx TO lt_poitemx.
         CLEAR:ls_poitem,ls_poitemx.
         CLEAR ls_potextitem.
         lv_index = lv_index + 1.
       ENDLOOP.

       SORT:lt_potextitem BY po_number po_item text_id.

       DELETE ADJACENT DUPLICATES FROM:lt_potextitem COMPARING po_number po_item text_id.

*      After SO Change using BAPI PO gets locked. Add DEQUEUE_ALL and wait time for lock to release
       CALL FUNCTION 'DEQUEUE_ALL'
         EXPORTING
           _synchron = abap_true.

       "While execution if SO changes Lock PO,add wait time else wait time is zero
       IF lv_wait IS NOT INITIAL.
         WAIT UP TO lv_wait SECONDS. " Add wait to release lock on PO while updating SO using BAPI
       ENDIF.

       "Export values to VOFM routine 950/951/952
       EXPORT lt_condition FROM lt_condition TO DATABASE indx(pt) ID lv_po_num.
       ls_poheadx-po_number = abap_true .
       ls_header_change = CORRESPONDING #( ls_header ).

       CALL FUNCTION 'ZPTP_I1058_ORDCHG_PO' ##FM_SUBRC_OK
         DESTINATION 'NONE'
         EXPORTING
           iv_po_num             = lv_po_num
           iv_header_change      = ls_header_change ##ENH_OK
           iv_poheadx            = ls_poheadx ##ENH_OK
           iv_bapi_call_count    = iv_call_count  "Added by  24093785 on 19th Oct 2020
         TABLES
           it_return_po_change   = lt_return_change
           it_poitem             = lt_poitem ##ENH_OK
           it_poitemx            = lt_poitemx ##ENH_OK
           it_poschedule         = lt_poschedule ##ENH_OK
           it_poschedulex        = lt_poschedulex ##ENH_OK
           it_condition          = lt_condition
           it_conditionx         = lt_conditionx
           it_potextitem         = lt_potextitem ##ENH_OK
           it_idoc_data          = gt_idoc_data1
         EXCEPTIONS
           system_failure        = 1 MESSAGE lv_msg
           communication_failure = 2 MESSAGE lv_msg
           OTHERS                = 3.
       IF sy-subrc <> 0.
* Capture the Dump message from RFC Failure.
         DATA(ls_ret) = VALUE bapiret2( message = lv_msg
                                    id      = lc_msgid
                                    number  = lc_msg046
                                    type    = if_mrm_constants=>gc_msgty_e ).
         APPEND ls_ret TO lt_return_change.
       ENDIF.
       IF line_exists( lt_return_change[ type = if_mrm_constants=>gc_msgty_e ] ) OR
         line_exists( lt_return_change[ type = if_mrm_constants=>gc_msgty_a ] ).
         LOOP AT lt_return_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_e OR
                                                    type = if_mrm_constants=>gc_msgty_a .
           ls_idoc_status = VALUE bdidocstat( docnum = gv_idoc_number
                                              status  = gc_idoc_status-error
                                              msgty  = ls_err-type
                                              msgid  = ls_err-id
                                              msgno  = ls_err-number
                                              msgv1  = ls_err-message_v1
                                              msgv2  = ls_err-message_v2
                                              msgv3  = ls_err-message_v3
                                              msgv4  = ls_err-message_v4
                                              repid  = sy-repid ).

           APPEND ls_idoc_status TO ct_idoc_status.
         ENDLOOP.
*
       ELSE.
         "While execution if SO changes Lock PO,add wait time else wait time is zero
         IF lv_wait IS NOT INITIAL.
           WAIT UP TO lv_wait SECONDS. " Add wait to release lock on PO while updating SO using BAPI
         ENDIF.
         LOOP AT lt_return_change INTO ls_err WHERE type = if_mrm_constants=>gc_msgty_s.
           ls_idoc_status = VALUE bdidocstat( docnum = gv_idoc_number
                                              status  = gc_idoc_status-success
                                              msgty  = ls_err-type
                                              msgid  = ls_err-id
                                              msgno  = ls_err-number
                                              msgv1  = ls_err-message_v1
                                              msgv2  = ls_err-message_v2
                                              msgv3  = ls_err-message_v3
                                              msgv4  = ls_err-message_v4
                                              repid  = sy-repid
                                              ).
           APPEND ls_idoc_status TO ct_idoc_status.
         ENDLOOP.
       ENDIF.
     ENDIF.
   ENDIF.
 ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZOTCCL_I1084_ORDCHG->UPDATE_SO_SPLIT_HOI
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_VBEP_DETAIL                 TYPE        GTT_VBEP_DETAIL
* | [--->] IV_CALL_COUNT                  TYPE        CHAR1(optional)
* | [<-->] CT_IDOC_STATUS                 TYPE        BDTIDOCSTA
* +--------------------------------------------------------------------------------------</SIGNATURE>
 METHOD update_so_split_hoi.
***************************************************************************
**  Title             :  ORDCHG FROM E2OPEN to S4                         *
**  Method            :  UPDATE_SO_SPLIT_HOI                              *
**  Author            :  Kishore.S                                        *
**  Creation Date     :  11/29/2020                                       *
**  Object ID         :  OTC1084_CR_1516                                          *
**  Business Contact  :  Ashish Singh                                     *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN       *
**  TS Author         :  Kishore.S                                        *
**  Description       :  Update Sales Order                               *
**  Transport Request :  S4DK948161                                       *
**  Misc Notes        :                                                   *
**&-----------------------------------------------------------------------*
**& Change History:                                                       *
**&=======================================================================*
**& Date       | Request #  | Changed By   | Description                  *
**&-----------------------------------------------------------------------*
**&            |            |              |                              *
**&-----------------------------------------------------------------------*
***&----------------------------------------------------------------------*
*  Local types
   TYPES:BEGIN OF lty_preq,
           vbeln TYPE ebeln,
           posnr TYPE ebelp,
         END OF lty_preq.
   "Local variable declaration
   DATA:lv_last_line_item TYPE posnr_va,
        lv_msg            TYPE c LENGTH 255,
        lv_ps_psp_pnr     TYPE ps_posid.

   "Local data declaration for tables
   DATA:
     lt_items         TYPE STANDARD TABLE OF bapiekpo,         "po item texts
     lt_return        TYPE STANDARD TABLE OF bapireturn,       "Err tab
     lt_return_change TYPE STANDARD TABLE OF bapiret2,         "PO change return table
     lt_order_text    TYPE STANDARD TABLE OF bapisdtext,       "Order Text
     ls_header_change TYPE bapimepoheader.                     "Header Structure

   DATA:lt_partners        TYPE STANDARD TABLE OF bapiparnr,
        lt_order_item_in   TYPE STANDARD TABLE OF bapisditm,
        lt_order_item_inx  TYPE STANDARD TABLE OF bapisditmx,
        lt_schedule_lines  TYPE STANDARD TABLE OF bapischdl,
        lt_schedule_linesx TYPE STANDARD TABLE OF bapischdlx,
        lt_condition       TYPE STANDARD TABLE OF bapimepocondheader,
        lt_conditions_so   TYPE STANDARD TABLE OF bapicond,
        lt_conditions_sox  TYPE STANDARD TABLE OF bapicondx,
        ls_condition       TYPE bapimepocondheader,
        lt_conditionx      TYPE STANDARD TABLE OF bapimepocondheaderx,
        ls_conditionx      TYPE bapimepocondheaderx,
        ls_preq            TYPE lty_preq,
        lt_fieldinfo       TYPE TABLE OF dfies,
        ls_condx           TYPE bapicondx,
        ls_cond            TYPE bapicond.
   "Local structure declaration
   DATA:
     ls_items_backup     TYPE bapiekpo,
     ls_header           TYPE bapiekkol,
     ls_order_header_inx TYPE bapisdh1x,
     ls_partners         TYPE bapiparnr,
     ls_sales            TYPE sales_key.

*   Local structure declaration
   DATA:ls_bapi_view    TYPE order_view,
        ls_poheader     TYPE bapiekkol,
        lt_sales        TYPE STANDARD TABLE OF sales_key,
        lt_order_header TYPE STANDARD TABLE OF bapisdhd,
        lt_so_items     TYPE STANDARD TABLE OF bapisditbos,
        lt_so_items1    TYPE STANDARD TABLE OF bapisdit,
        lt_so_schedule  TYPE STANDARD TABLE OF bapisdhedu,
        lt_so_partners  TYPE STANDARD TABLE OF bapisdpart,
        lt_so_condiions TYPE STANDARD TABLE OF bapisdcond,
        lt_so_texts     TYPE STANDARD TABLE OF bapitextli,
        lv_memory_1059  TYPE char20.

*  Local constants
   CONSTANTS:
     lc_en             TYPE spras VALUE 'E',            "Language key
     lc_msgid          TYPE sy-msgid VALUE 'ZPTP_MSGS', "Messge class
     lc_msg046         TYPE char3 VALUE '046',          "MSG number
     lc_bapisditm      TYPE ddobjname VALUE 'BAPISDITM', "Order item
     lc_bapicond       TYPE ddobjname VALUE 'BAPICOND', "Order conditions
     lc_read_db        TYPE char1 VALUE 'A',            "Read from DB Memory
     lc_ptp_1059       TYPE c LENGTH 9 VALUE 'ZPTP_1059',
     lc_1084_wait_time TYPE rvari_vnam VALUE 'ZOTCI1084_WAIT_TIME',
     lc_1              TYPE i VALUE 1,                  "Minimum while loop to check if SO locked
     lc_max_time       TYPE i VALUE 10.                 "Maximum while loop to check if SO locked

   CLEAR:lt_order_item_in,
         lt_order_item_inx,
         lt_schedule_lines,
         lt_schedule_linesx,
         lt_order_text,
         gv_check_gts_block_exist,
         gv_csp_line_item.

   ls_sales-vbeln = gv_document_number.
   APPEND ls_sales TO lt_sales.

*Enable data to be read for SD Header, SD Items and SD Schedule Lines
   ls_bapi_view-header     = abap_true.
   ls_bapi_view-item       = abap_true.
   ls_bapi_view-sdschedule = abap_true.
   ls_bapi_view-partner    = abap_true.
   ls_bapi_view-sdcond     = abap_true.
   ls_bapi_view-sdcond_add = abap_true.
   ls_bapi_view-text       = abap_true.

   "Fetch Sales ORder Details
   CALL FUNCTION 'BAPISDORDER_GETDETAILEDLIST'
     EXPORTING
       i_bapi_view          = ls_bapi_view
       i_memory_read        = lc_read_db        "Fetch latest DB value
     TABLES
       sales_documents      = lt_sales
       order_headers_out    = lt_order_header
       order_items_out      = lt_so_items1
       order_schedules_out  = lt_so_schedule
       order_partners_out   = lt_so_partners
       order_conditions_out = lt_so_condiions
       order_textlines_out  = lt_so_texts.

   IF lt_so_items1 IS NOT INITIAL.
     lt_so_items = CORRESPONDING #( lt_so_items1 ).
   ENDIF.


   "Check if details exist
   IF line_exists( it_vbep_detail[ 1 ] ) .
     "Idoc data gt_ekpo detail contains change items
     DATA(ls_vbep_detail) = it_vbep_detail[ 1 ].

     "Add flag to check GTS block exists
     gv_check_gts_block_exist = abap_true.  "For SO split scenario mark gv_check_gts_block_exist as X to check SO while New line is added
     gv_csp_line_item         = ls_vbep_detail-posnr. "Existing Line item IN SO

     IF line_exists( lt_so_items[ doc_number = ls_vbep_detail-vbeln itm_number = ls_vbep_detail-posnr ] ).
       "Read bapi data with first line item
       DATA(ls_so_items) = lt_so_items[ doc_number = ls_vbep_detail-vbeln itm_number = ls_vbep_detail-posnr ].
       "Populate item tabs to sen to bapi change
       APPEND INITIAL LINE TO lt_order_item_in ASSIGNING FIELD-SYMBOL(<lfs_order_item_in_c>).
       <lfs_order_item_in_c> = VALUE bapisditm( itm_number = ls_so_items-itm_number
                                                plant      = ls_so_items-plant
                                                item_categ = ls_so_items-item_categ ).
       "Update X table
       APPEND INITIAL LINE TO lt_order_item_inx ASSIGNING FIELD-SYMBOL(<lfs_order_item_inx_c>).
       <lfs_order_item_inx_c> = VALUE bapisditmx( itm_number = ls_so_items-itm_number
                                                  plant      = abap_true
                                                  item_categ = abap_true
                                                  updateflag = if_mrm_constants=>gc_updkz-update ).
*      Add SMP Flag to SO existing line item
       APPEND INITIAL LINE TO lt_order_text ASSIGNING FIELD-SYMBOL(<lfs_order_text>).
       <lfs_order_text>  = VALUE #( doc_number =  gv_document_number     "SO
                                    itm_number = ls_so_items-itm_number  "Line item
                                    text_id    = gc_zicg                 "SO Line item Text ID
                                    langu      = lc_en                   "Languae
                                    text_line  = ls_vbep_detail-smp_flag )." SMP flag


*      ZAK Original Line item
       APPEND INITIAL LINE TO lt_order_text ASSIGNING <lfs_order_text>.
       <lfs_order_text>  = VALUE #( doc_number =  gv_document_number
                                 itm_number = ls_so_items-itm_number
                                 text_id    = gc_zzak
                                 langu      = lc_en
                                 text_line  = ls_vbep_detail-smp_addtnl ).  "timestamp.

     ELSE.
       RETURN.
     ENDIF.

   ENDIF.

   "Fetch item with only ord_req quantity not zero
   LOOP AT lt_so_schedule ASSIGNING FIELD-SYMBOL(<lfs_so_schd>) WHERE doc_number = gv_document_number AND
                                                                      itm_number = ls_so_items-itm_number  AND
                                                                      req_qty <> space.
     DATA(ls_vbep) = <lfs_so_schd>."populate VBEP structure if found
   ENDLOOP.

   "Call Internal method fetch_po_line_item to fetch Line item of PO by passing SO line item
   CALL METHOD me->fetch_po_line_item
     EXPORTING
       iv_posnv = CONV posnr( ls_so_items-itm_number ) ##OPERATOR[POSNR]
     IMPORTING
       es_vbfa  = DATA(ls_vbfa).
   "ls_vbfa contains Line item os So and Corresponding PO
   IF ls_vbfa IS NOT INITIAL.

     DATA(lv_po_num) = |{ ls_vbfa-vbeln ALPHA = IN WIDTH = 10 }| .

     CLEAR:lt_return_change,
           lt_items.
     CALL FUNCTION 'BAPI_PO_GETDETAIL'  "#EC CI_USAGE_OK[1803189]
       EXPORTING
         purchaseorder = CONV ebeln( lv_po_num )
         items         = abap_true
       IMPORTING
         po_header     = ls_poheader
       TABLES
         po_items      = lt_items
         return        = lt_return_change.
   ENDIF.
   IF line_exists( lt_items[ po_number = ls_vbfa-vbeln  po_item = ls_vbfa-posnn ] ).
     DATA(ls_items) = lt_items[ po_number = ls_vbfa-vbeln  po_item = ls_vbfa-posnn ].
   ENDIF.

   "Delete AB Confirmation lines for a PO Line item
   CALL METHOD delete_ab_texts
     EXPORTING
       iv_ebeln = ls_items-po_number
       iv_ebelp = ls_items-po_item.

*  Add schedule Lines for SO existing Line item
   APPEND INITIAL LINE TO lt_schedule_lines ASSIGNING FIELD-SYMBOL(<lfs_schedule_lines>).
   "Populate schedule lines internal table
   <lfs_schedule_lines> = VALUE bapischdl(   itm_number = ls_so_items-itm_number   "SO Line Item
                                             sched_line = ls_vbep-sched_line       "Schedule Line item
                                             req_date   = ls_vbep_detail-edatu     "Date
                                             req_qty    = ls_vbep_detail-wmeng  ). "Quantity

   APPEND INITIAL LINE TO lt_schedule_linesx ASSIGNING FIELD-SYMBOL(<lfs_schedule_linesx>).
   "Populate schdule lines update tab
   <lfs_schedule_linesx> = VALUE  bapischdlx(
                                   itm_number = ls_so_items-itm_number
                                   sched_line = ls_vbep-sched_line
                                   updateflag = if_mrm_constants=>gc_updkz-update
                                   req_date   = abap_true
                                   req_qty    = abap_true  ).

   "Fetch number of lines
   DATA(lv_last_item) = lines( lt_so_items ).

   "Read last line number in lt_so_items
   IF line_exists( lt_so_items[ lv_last_item ] ).
     "Fetch last line item and append rest of the lines with update U before passing to BAPI
     DATA(ls_so_last_item) =  lt_so_items[ lv_last_item ].

     " ls_so_last_item contains the line number in field itm_number
     lv_last_line_item = ls_so_last_item-itm_number.
   ENDIF.

   CLEAR:lt_partners.

   "Loop through the idoc changes from second row to Append to SO
   LOOP AT it_vbep_detail ASSIGNING FIELD-SYMBOL(<lfs_vbep>) FROM 2.
     lv_last_line_item = lv_last_line_item + gc_000010.
     "Append to item tab

     CLEAR lv_ps_psp_pnr.
     CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
       EXPORTING
         input  = ls_so_items-wbs_elem
       IMPORTING
         output = lv_ps_psp_pnr.

     IF <lfs_order_item_in_c> IS ASSIGNED.
       UNASSIGN <lfs_order_item_in_c>.
     ENDIF.

     APPEND INITIAL LINE TO lt_order_item_in ASSIGNING <lfs_order_item_in_c>.
     <lfs_order_item_in_c> = CORRESPONDING bapisditm( ls_so_items ).
     <lfs_order_item_in_c>-itm_number  = lv_last_line_item.        "Line item
     <lfs_order_item_in_c>-material    = ls_so_items-material.     "Material
     <lfs_order_item_in_c>-route       = ls_so_items-route.        "Route
     <lfs_order_item_in_c>-wbs_elem    = lv_ps_psp_pnr  .          "PNR
     <lfs_order_item_in_c>-cust_mat35  = ls_so_items-cust_mat35.   "Custoemr
     <lfs_order_item_in_c>-untof_wght  = ls_so_items-unit_of_wt. "++ Adding weight unit
     <lfs_order_item_in_c>-unof_wtiso  = ls_so_items-unit_wtiso. "++ Adding weight unit
     <lfs_order_item_in_c>-store_loc   = ls_so_items-stge_loc.   "++ Storage location is missing in both line items 10 & 20: CR36963
     <lfs_order_item_in_c>-ref_1       = lv_last_line_item.      "++ VBKD-IHREZ CR36963

     "Updte ITEMX tab
     CLEAR lt_fieldinfo.
     CALL FUNCTION 'DDIF_FIELDINFO_GET' "#EC CI_SUBRC
       EXPORTING
         tabname        = lc_bapisditm
         langu          = sy-langu
       TABLES
         dfies_tab      = lt_fieldinfo
       EXCEPTIONS
         not_found      = 1
         internal_error = 2
         OTHERS         = 3.
     IF sy-subrc <> 0.
* Implement suitable error handling here
     ENDIF.

     IF <lfs_order_item_inx_c> IS ASSIGNED .
       UNASSIGN <lfs_order_item_inx_c>.
     ENDIF.
     APPEND INITIAL LINE TO lt_order_item_inx ASSIGNING <lfs_order_item_inx_c>.

     LOOP AT lt_fieldinfo ASSIGNING FIELD-SYMBOL(<lfs_fieldinfo>). "#EC CI_NESTED
       ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE  <lfs_order_item_in_c> TO FIELD-SYMBOL(<lfs_bapi>).
       IF sy-subrc <> 0. EXIT. ENDIF.
       ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE <lfs_order_item_inx_c> TO FIELD-SYMBOL(<lfs_bapix>).
       IF <lfs_bapi> IS NOT INITIAL.
         <lfs_bapix> = abap_true.
       ENDIF.
     ENDLOOP.

     <lfs_order_item_inx_c>-itm_number = lv_last_line_item.
     <lfs_order_item_inx_c>-updateflag = if_mrm_constants=>gc_updkz-insert.
     <lfs_order_item_inx_c>-material   = abap_true.
     <lfs_order_item_inx_c>-route      = abap_true.
     <lfs_order_item_inx_c>-wbs_elem   = abap_true.
     <lfs_order_item_inx_c>-plant      = abap_true.
     <lfs_order_item_inx_c>-item_categ = abap_true.
     <lfs_order_item_inx_c>-cust_mat35 = abap_true.
     <lfs_order_item_inx_c>-untof_wght = abap_true.
     <lfs_order_item_inx_c>-store_loc  = abap_true.  "++ Storage location is missing in both line items 10 & 20: CR36963
     <lfs_order_item_inx_c>-ref_1      = abap_true.  "++ VBKD-IHREZ CR36963

     "Populate schedule line table
     IF <lfs_schedule_lines> IS ASSIGNED.
       UNASSIGN <lfs_schedule_lines>.
     ENDIF.
     "Schedule Lins for SO
     APPEND INITIAL LINE TO lt_schedule_lines ASSIGNING <lfs_schedule_lines>.
     <lfs_schedule_lines> = VALUE #( itm_number =  lv_last_line_item   "Last lienitem in SO
                                    sched_line  = gc_001               "Schedule  line
                                    req_date    = <lfs_vbep>-edatu     "New Date
                                    req_qty     = <lfs_vbep>-wmeng  ). "Quantity

     "Populate schedule update
     IF <lfs_schedule_linesx> IS ASSIGNED.
       UNASSIGN <lfs_schedule_linesx>.
     ENDIF.
     APPEND INITIAL LINE TO lt_schedule_linesx ASSIGNING <lfs_schedule_linesx>.
     <lfs_schedule_linesx> = VALUE #( itm_number =  lv_last_line_item
                                   sched_line = gc_001
                                   updateflag = if_mrm_constants=>gc_updkz-insert
                                   req_date   = abap_true
                                   req_qty    = abap_true  ).

     "Append Partner details of existing line item to new lines
     LOOP AT lt_so_partners ASSIGNING FIELD-SYMBOL(<lfs_so_partners>) WHERE sd_doc = gv_document_number "#EC CI_STDSEQ "#EC CI_NESTED
                                                                      AND itm_number = ls_so_items-itm_number.

       "Populate LT_PARTNERS to pass to BAPI
       APPEND INITIAL LINE TO lt_partners ASSIGNING FIELD-SYMBOL(<lfs_partners>).

       <lfs_partners> = VALUE #(
       partn_role = <lfs_so_partners>-partn_role
       partn_numb = COND #( WHEN <lfs_so_partners>-customer IS ASSIGNED AND <lfs_so_partners>-customer IS NOT INITIAL
                            THEN <lfs_so_partners>-customer
                            ELSE COND #(
                                 WHEN <lfs_so_partners>-vendor_no IS ASSIGNED AND <lfs_so_partners>-vendor_no IS NOT INITIAL
                                 THEN <lfs_so_partners>-vendor_no ) )
       itm_number = lv_last_line_item
                   ).
     ENDLOOP.

     "Copy Condition Price details from existing lien item to new Line
     LOOP AT lt_so_condiions ASSIGNING FIELD-SYMBOL(<lfs_so_condiions>) WHERE sd_doc     = gv_document_number "#EC CI_NESTED
                                                                          AND itm_number = ls_so_items-itm_number
                                                                          AND cond_type  = gc_zmzq.

       APPEND INITIAL LINE TO lt_conditions_so ASSIGNING FIELD-SYMBOL(<lfs_cond>).
       <lfs_cond> = CORRESPONDING #( <lfs_so_condiions> ).

       APPEND INITIAL LINE TO lt_conditions_sox ASSIGNING FIELD-SYMBOL(<lfs_condx>).
       <lfs_condx>-itm_number = ls_cond-itm_number .
       <lfs_condx>-cond_type  = gc_zmzq.
       <lfs_condx>-updateflag = if_mrm_constants=>gc_updkz-update.


       APPEND INITIAL LINE TO lt_conditions_so ASSIGNING FIELD-SYMBOL(<lfs_conditions_in>).
       <lfs_conditions_in> = VALUE bapicond(    itm_number     = lv_last_line_item
                                                cond_type      = <lfs_so_condiions>-cond_type
                                                cond_value     = <lfs_so_condiions>-cond_value / 10
                                                cond_p_unt     = <lfs_so_condiions>-cond_p_unt ).

       APPEND INITIAL LINE TO lt_conditions_sox ASSIGNING FIELD-SYMBOL(<lfs_conditions_inx>).
       <lfs_conditions_inx> = VALUE bapicondx(  itm_number  = lv_last_line_item
                                                   cond_type     = <lfs_so_condiions>-cond_type
                                                   cond_value    = abap_true
                                                   cond_p_unt    = abap_true
                                                   updateflag    = if_mrm_constants=>gc_updkz-insert ).


       CLEAR lt_fieldinfo.
       CALL FUNCTION 'DDIF_FIELDINFO_GET' "#EC CI_SUBRC
         EXPORTING
           tabname        = lc_bapicond
           langu          = sy-langu
         TABLES
           dfies_tab      = lt_fieldinfo
         EXCEPTIONS
           not_found      = 1
           internal_error = 2
           OTHERS         = 3.
       IF sy-subrc <> 0.
* Implement suitable error handling here
       ENDIF.
       LOOP AT lt_fieldinfo ASSIGNING <lfs_fieldinfo>.   "#EC CI_NESTED
         ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_cond TO <lfs_bapi>.
         IF sy-subrc <> 0. EXIT. ENDIF.
         ASSIGN COMPONENT <lfs_fieldinfo>-fieldname OF STRUCTURE ls_condx TO <lfs_bapix>.
         IF <lfs_bapi> IS NOT INITIAL.
           <lfs_bapix> = abap_true.
         ENDIF.
       ENDLOOP.

     ENDLOOP.
     DATA(lv_text_name) = |{ gv_document_number && ls_so_items-itm_number }|.
     CONDENSE lv_text_name NO-GAPS.

     LOOP AT lt_so_texts ASSIGNING FIELD-SYMBOL(<lfs_so_texts>)  WHERE applobject = gc_vbbp "#EC CI_STDSEQ "#EC CI_NESTED
                                                                 AND text_name = lv_text_name.
       IF <lfs_so_texts>-text_id EQ gc_zicg OR
          <lfs_so_texts>-text_id EQ gc_zrso OR
          <lfs_so_texts>-text_id EQ gc_zrsi OR
          <lfs_so_texts>-text_id EQ gc_zzak.
         CONTINUE.
       ENDIF.

       IF <lfs_order_text> IS ASSIGNED.
         UNASSIGN <lfs_order_text>.
       ENDIF.
       APPEND INITIAL LINE TO lt_order_text ASSIGNING <lfs_order_text>.
       <lfs_order_text>  = VALUE #( doc_number = gv_document_number
                                    itm_number = lv_last_line_item
                                    text_id = <lfs_so_texts>-text_id
                                    langu = lc_en
                                    text_line = <lfs_so_texts>-line ).  " timestamp.
     ENDLOOP.

     TRY.
         DATA(lv_itemtext) = lt_so_texts[ applobject = gc_vbbp
                                          text_name  = | { gv_document_number && ls_so_items-itm_number } |
                                          text_id    = gc_zsrn ].

         IF <lfs_order_text> IS ASSIGNED.
           UNASSIGN <lfs_order_text>.
         ENDIF.
         APPEND INITIAL LINE TO lt_order_text ASSIGNING <lfs_order_text>.
         <lfs_order_text>  = VALUE #( doc_number = gv_document_number
                                   itm_number = lv_last_line_item
                                   text_id    = gc_zsrn
                                   langu      = lc_en
                                   text_line  = lv_itemtext-line  ).  "timestamp.
       CATCH cx_sy_itab_line_not_found.
         CLEAR lv_itemtext.
     ENDTRY.

     IF <lfs_order_text> IS ASSIGNED.
       UNASSIGN <lfs_order_text>.
     ENDIF.
     APPEND INITIAL LINE TO lt_order_text ASSIGNING <lfs_order_text>.
     <lfs_order_text>  = VALUE #( doc_number = gv_document_number
                             itm_number = lv_last_line_item
                             text_id = gc_zicg
                             langu = lc_en
                             text_line = gc_n  ).  " timestamp.

*    ZAK New Line Item
     IF <lfs_order_text> IS ASSIGNED.
       UNASSIGN <lfs_order_text>.
     ENDIF.
     APPEND INITIAL LINE TO lt_order_text ASSIGNING <lfs_order_text>.
     <lfs_order_text>  = VALUE #( doc_number =  gv_document_number
                               itm_number = lv_last_line_item
                               text_id    = gc_zzak
                               langu      = lc_en
                               text_line  = <lfs_vbep>-smp_addtnl ).  "Additional change flag


     IF <lfs_order_text> IS ASSIGNED.
       UNASSIGN <lfs_order_text>.
     ENDIF.
     APPEND INITIAL LINE TO lt_order_text ASSIGNING <lfs_order_text>.
     <lfs_order_text>  = VALUE #( doc_number = gv_document_number
                              itm_number = lv_last_line_item
                              text_id   = gc_zrso
                              langu     = lc_en
                              text_line = ls_so_items-itm_number  ).  " ZRSO

*
     IF <lfs_order_text> IS ASSIGNED.
       UNASSIGN <lfs_order_text>.
     ENDIF.
     APPEND INITIAL LINE TO lt_order_text ASSIGNING <lfs_order_text>.
     <lfs_order_text>  = VALUE #( doc_number = gv_document_number
                                  itm_number = lv_last_line_item
                                  text_id = gc_zrsi
                                  langu = lc_en
                                  text_line = <lfs_vbep>-zsi ).  " timestamp.  ZSI
   ENDLOOP.

   "Update split Sales org using Bapi BAPI_SALESORDER_CHANGE
   gs_order_header_inx_hoi-updateflag = if_mrm_constants=>gc_updkz-update.

**********************************************************************
*   Delete duplicate Text Details
**********************************************************************
   SORT lt_order_text BY doc_number itm_number text_id.
   DELETE ADJACENT DUPLICATES FROM lt_order_text COMPARING doc_number itm_number text_id.


*  Fill parameters for Enqueue and Dequeue
   DATA(lv_locked)   = abap_false.
   DATA(lv_counter)  = lc_1.
   DATA(lv_max_time) = lc_max_time.
   WHILE lv_locked IS INITIAL.
     CALL FUNCTION 'ENQUEUE_EVVBAKE'
       EXPORTING
         mode_vbak      = if_mrm_constants=>gc_msgty_e
         mandt          = sy-mandt
         vbeln          = gv_document_number
         _wait          = abap_true
       EXCEPTIONS
         foreign_lock   = 1
         system_failure = 2
         OTHERS         = 3.
     IF sy-subrc = 0.
       lv_locked = abap_true.
     ELSE.
       WAIT UP TO lc_1 SECONDS.
       lv_counter = lv_counter + 1.
       IF lv_counter > lv_max_time.
         EXIT.
       ENDIF.
* Implement suitable error handling here
     ENDIF.
   ENDWHILE.

   CALL FUNCTION 'DEQUEUE_EVVBAKE'
     EXPORTING
       mode_vbak = 'E'
       mandt     = sy-mandt
       vbeln     = gv_document_number
       _synchron = 'X'.

   gs_order_header_inx_hoi-updateflag = if_mrm_constants=>gc_updkz-update.

   CLEAR:lt_return_change.
   CLEAR:gv_gts_block_exist.

   CALL FUNCTION 'ZOTC_I1084_ORDCHG'
     DESTINATION 'NONE'
     EXPORTING
       iv_so_num                = gv_document_number " Purchasing Document Number
       is_order_header_in       = gs_order_header_in_hoi
       is_order_header_inx      = ls_order_header_inx ##ENH_OK " Purchase Order Header Data (Change Parameter)
       iv_check_gts_block_exist = gv_check_gts_block_exist
       iv_csp_line_item         = gv_csp_line_item
     IMPORTING
       ev_gts_block_exist       = gv_gts_block_exist
     TABLES
       it_return_so             = lt_return_change  " Return Parameter
       it_order_item_in_c       = lt_order_item_in ##ENH_OK " Purchase Order Item
       it_order_item_inx_c      = lt_order_item_inx " Purchase Order Item Data (Change Parameter)
       it_schedule_lines        = lt_schedule_lines "Partners data
       it_schedule_linesx       = lt_schedule_linesx " Fields for Purchase Order Delivery Schedule Lines
       it_order_text            = lt_order_text  " Fields for Schedule Lines in Purchase Order (Change Toolbar)
       it_partners              = lt_partners
       it_conditions_in         = lt_conditions_so  " Communication Fields for Maintaining Conditions in the Order
       it_conditions_inx        = lt_conditions_sox " Communication Fields for Maintaining Conditions in the Order
     EXCEPTIONS
       system_failure           = 1 MESSAGE lv_msg
       communication_failure    = 2 MESSAGE lv_msg
       OTHERS                   = 3.

   IF sy-subrc <> 0.
* Capture the Dump message from RFC Failure.
     APPEND INITIAL LINE TO lt_return_change ASSIGNING FIELD-SYMBOL(<lfs_ret>).
     <lfs_ret> = VALUE bapiret2( message = lv_msg
                                    id      = lc_msgid
                                    number  = lc_msg046
                                    type    = if_mrm_constants=>gc_msgty_e ).

   ENDIF.
   IF gv_gts_block_exist EQ abap_true.
     CLEAR gv_gts_block_exist.
     "Fail , update with 51
     update_idoc_status(
                    EXPORTING
                             iv_status = gc_idoc_status-error
                             iv_msgty  = if_mrm_constants=>gc_msgty_e
                             iv_msgid  = gc_msgid_1
                             iv_msgno  = gc_messages-gc_msgno_482
                             iv_msgv_1 = space
                             iv_msgv_2 = space
                             iv_msgv_3 = space
                             iv_msgv_4 = space
                   CHANGING
                           ct_idoc_data1  = gt_idoc_data1[]
                           ct_idoc_status = ct_idoc_status[] ).
     gv_succe = abap_false.
     RETURN.
   ENDIF.

   "If changes is not sucessful return
   IF line_exists( lt_return_change[ type = if_mrm_constants=>gc_msgty_e ] ) OR
      line_exists( lt_return_change[ type = if_mrm_constants=>gc_msgty_a ] ).
     LOOP AT lt_return_change  INTO DATA(ls_err) WHERE type = if_mrm_constants=>gc_msgty_e OR type = if_mrm_constants=>gc_msgty_a.
       DATA(ls_idoc_status) = VALUE bdidocstat( docnum = gv_idoc_number
                                              status  = gc_idoc_status-error
                                              msgty  = ls_err-type
                                              msgid  = ls_err-id
                                              msgno  = ls_err-number
                                              msgv1  = ls_err-message_v1
                                              msgv2  = ls_err-message_v2
                                              msgv3  = ls_err-message_v3
                                              msgv4  = ls_err-message_v4
                                              repid  = sy-repid ).
       APPEND ls_idoc_status TO ct_idoc_status.
     ENDLOOP.

     CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

     gv_succe = abap_false.
     RETURN.
   ENDIF.
 ENDMETHOD.
ENDCLASS.

*************************************************************************
**  Title             :  COMPONENT BUY/SELL SALES ORDER                  *
**  Author            :  Kishore.S                                       *
**  Creation Date     :  07/29/2020                                      *
**  Object ID         :  OTCI1084                                        *
**  Business Contact  :  Ashish Singh                                    *
**  TS Name           :  TS_OTCI1084_Sales_Order_Change from E2OPEN      *
**  TS Author         :  Kishore.S                                       *
**  Description       :  Update SO with data from E2OPEN                 *
**  Transport Request :  S4DK921693                                      *
**  Misc Notes        :                                                  *
*&-----------------------------------------------------------------------*
*& Change History:                                                       *
*&=======================================================================*
*& Date       | Request #| Changed By  | Description                     *
*&-----------------------------------------------------------------------*
*& 10.23.2020 | CR_452   |  24093780   | S4 to e2Open ORDCHG Idoc missing*
*                                          E1EDK35 segment               *
*&-----------------------------------------------------------------------*
*& 11.23.2020 | CR_1516  |  24093780   | S4DK948161 HOI Enhancement      *
*&-----------------------------------------------------------------------*
FUNCTION zotc_i1084_idoc_input_ordchg.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(INPUT_METHOD) LIKE  BDWFAP_PAR-INPUTMETHD
*"     VALUE(MASS_PROCESSING) LIKE  BDWFAP_PAR-MASS_PROC
*"  EXPORTING
*"     VALUE(WORKFLOW_RESULT) LIKE  BDWFAP_PAR-RESULT
*"     VALUE(APPLICATION_VARIABLE) LIKE  BDWFAP_PAR-APPL_VAR
*"     VALUE(IN_UPDATE_TASK) LIKE  BDWFAP_PAR-UPDATETASK
*"     VALUE(CALL_TRANSACTION_DONE) LIKE  BDWFAP_PAR-CALLTRANS
*"  TABLES
*"      IDOC_CONTRL STRUCTURE  EDIDC
*"      IDOC_DATA STRUCTURE  EDIDD
*"      IDOC_STATUS STRUCTURE  BDIDOCSTAT
*"      RETURN_VARIABLES STRUCTURE  BDWFRETVAR
*"      SERIALIZATION_INFO STRUCTURE  BDI_SER
*"      EDI_TEXT STRUCTURE  EDIORDTXT1 OPTIONAL
*"      EDI_TEXT_LINES STRUCTURE  EDIORDTXT2 OPTIONAL
*"----------------------------------------------------------------------
**"--------------------------------------------------------------------
**"*"Local Interface:
**"  IMPORTING
**"     VALUE(INPUT_METHOD) LIKE  BDWFAP_PAR-INPUTMETHD
**"     VALUE(MASS_PROCESSING) LIKE  BDWFAP_PAR-MASS_PROC
**"  EXPORTING
**"     VALUE(WORKFLOW_RESULT) LIKE  BDWFAP_PAR-RESULT
**"     VALUE(APPLICATION_VARIABLE) LIKE  BDWFAP_PAR-APPL_VAR
**"     VALUE(IN_UPDATE_TASK) LIKE  BDWFAP_PAR-UPDATETASK
**"     VALUE(CALL_TRANSACTION_DONE) LIKE  BDWFAP_PAR-CALLTRANS
**"  TABLES
**"      IDOC_CONTRL STRUCTURE  EDIDC
**"      IDOC_DATA STRUCTURE  EDIDD
**"      IDOC_STATUS STRUCTURE  BDIDOCSTAT
**"      RETURN_VARIABLES STRUCTURE  BDWFRETVAR
**"      SERIALIZATION_INFO STRUCTURE  BDI_SER
**"      EDI_TEXT STRUCTURE  EDIORDTXT1 OPTIONAL
**"      EDI_TEXT_LINES STRUCTURE  EDIORDTXT2 OPTIONAL
**"--------------------------------------------------------------------
*****************INITIALISATION************************************
* Local data declaration
  DATA:lt_vbep_split_temp TYPE STANDARD TABLE OF zotccl_i1084_ordchg=>gty_vbep_detail.

  "Utility class for I1058
  DATA(lrf_update_so) = NEW zotccl_i1084_ordchg( ).

  "Clear global variables
  lrf_update_so->initialize( CHANGING ct_idoc_status = idoc_status[] ).

*****************DATA VALIDATION***************************************
*******************************************************************************************
**1)   Get SO number fromIDOC E1EDK01-BELNR and poppulate PO's for the Sales Order
*******************************************************************************************
  " Move idoc data in Temp table
  lrf_update_so->gt_idoc_data1[] = idoc_data[].
  IF line_exists( idoc_contrl[ 1 ] ).
    lrf_update_so->gv_idoc_number = idoc_contrl[ 1 ]-docnum.
  ENDIF.
  "Mark sucess as true before passing to method get_so_document_number
  lrf_update_so->gv_succe = abap_true.
  "Get SO based on idoc data
  lrf_update_so->get_so_document_number( CHANGING ct_idoc_data1  = idoc_data[]
                                                  ct_idoc_status = idoc_status[] ).
***************************************************************************


***********UPDATED SEGMENT RECORDS*****************************************
  IF  lrf_update_so->gv_document_number IS NOT INITIAL AND
                                        lrf_update_so->gv_succe = abap_true.

********************************************************************************************
*** Begin of CR_1516 by 27093780 by 12/1/2020
********************************************************************************************
*   Call method to fetch TVARVC for FEB objects
    IF line_exists( zotccl_0028_vals=>mt_tvarvc[ name = zotccl_0028_vals=>gc_feb_2020_active
                                                 low  = abap_true ] ).
      "Check if the Document type is present in the TVARVC for HOI
      IF lrf_update_so->check_itmcat_hoi_so( ) IS NOT INITIAL.

        lrf_update_so->gv_hoi_flag = abap_true.
        "Get header SMP flag text
        lrf_update_so->get_header_text_hoi( ).
        "Line Item  details copy from IDOC: for sales order
        lrf_update_so->get_item_data_hoi( ).
        "If the DATA is populated in According for all Change Types
        IF lrf_update_so->gv_succe = abap_true.
          "Call method update_so_hoi to update SO
          lrf_update_so->update_so_hoi( CHANGING ct_idoc_data1  = idoc_data[]
                                                 ct_idoc_status = idoc_status[] ).
          IF lrf_update_so->gv_succe = abap_true.
            "Sucess , update with 53
            lrf_update_so->update_idoc_status(
                           EXPORTING
                                    iv_status = lrf_update_so->gc_idoc_status-success
                                    iv_msgty  = if_mrm_constants=>gc_msgty_s
                                    iv_msgid  = lrf_update_so->gc_msgid_1
                                    iv_msgno  = lrf_update_so->gc_messages-gc_msgno_478
                                    iv_msgv_1 = space
                                    iv_msgv_2 = space
                                    iv_msgv_3 = space
                                    iv_msgv_4 = space
                           CHANGING
                                    ct_idoc_data1  = lrf_update_so->gt_idoc_data1[]
                                    ct_idoc_status = idoc_status[] ).
          ELSE.
            "Fail , update with 51
            lrf_update_so->update_idoc_status(
                           EXPORTING
                                    iv_status = lrf_update_so->gc_idoc_status-error
                                    iv_msgty  = if_mrm_constants=>gc_msgty_e
                                    iv_msgid  = lrf_update_so->gc_msgid_1
                                    iv_msgno  = lrf_update_so->gc_messages-gc_msgno_472
                                    iv_msgv_1 = space
                                    iv_msgv_2 = space
                                    iv_msgv_3 = space
                                    iv_msgv_4 = space
                          CHANGING
                                  ct_idoc_data1  = lrf_update_so->gt_idoc_data1[]
                                  ct_idoc_status = idoc_status[] ).
          ENDIF.

*Split Scenario
          "Table VBEP contains data for split condition
          IF zotccl_i1084_ordchg=>gt_vbep_detail_hoi IS NOT INITIAL.
            "Seperate VBEP details internal table
            SORT zotccl_i1084_ordchg=>gt_vbep_detail_hoi BY vbeln posnr.
            "Loop at VBEP table to populate temp tables
            LOOP AT zotccl_i1084_ordchg=>gt_vbep_detail_hoi ASSIGNING FIELD-SYMBOL(<lfs_vbep_detail_split>).
              "Populate table index in temporary variable
              DATA(lv_tabix) = sy-tabix.
              DATA(ls_vbep_split_temp) = <lfs_vbep_detail_split>.
              APPEND ls_vbep_split_temp TO lt_vbep_split_temp.
              "Check if present line number less than number of records
              IF lv_tabix LT lines( zotccl_i1084_ordchg=>gt_vbep_detail_hoi ).
                ASSIGN  zotccl_i1084_ordchg=>gt_vbep_detail_hoi[ ( lv_tabix + 1 ) ] TO FIELD-SYMBOL(<lfs_vbep_detail>).
                IF sy-subrc EQ 0 AND <lfs_vbep_detail> IS ASSIGNED .
                  "If line number if diferent call method to split
                  IF <lfs_vbep_detail>-posnr <> ls_vbep_split_temp-posnr.
                    CALL METHOD lrf_update_so->update_so_split_hoi
                      EXPORTING
                        it_vbep_detail = lt_vbep_split_temp
                      CHANGING
                        ct_idoc_status = idoc_status[].
                    CLEAR lt_vbep_split_temp.
                  ENDIF.
                ENDIF.
              ELSE.
                "If line number reached maximum
                CALL METHOD lrf_update_so->update_so_split_hoi
                  EXPORTING
                    it_vbep_detail = lt_vbep_split_temp
                    iv_call_count  = abap_true
                  CHANGING
                    ct_idoc_status = idoc_status[].
                CLEAR lt_vbep_split_temp.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDIF.

        "Check if IDOC status is both 51 and 53. Remove sucess messages 53 ages and only display 51
        IF line_exists( idoc_status[ status = lrf_update_so->gc_idoc_status-error ] ) AND
           line_exists( idoc_status[ status =  lrf_update_so->gc_idoc_status-success ] ).
          DELETE idoc_status WHERE status = lrf_update_so->gc_idoc_status-success.
        ENDIF.
        RETURN.
      ENDIF.
    ENDIF.

*   End of CR_1516 by 27093780 by 12/1/2020

*******************HEADER TEXT by segment E1EDK35 *************************
    "Get header SMP flag text
    lrf_update_so->get_header_text( ).
    "Get Item SMP flag texts
    lrf_update_so->get_item_text( ).
*************" Line Item  details copy from IDOC: for sales order***********
    lrf_update_so->get_item_data( ).

******************UPDATE SALES ORDER****************************************
********* If Po line item cancel is called
    IF zotccl_i1084_ordchg=>gt_vbfa_icl IS NOT INITIAL.
      lrf_update_so->delete_line_item_po( CHANGING ct_idoc_data1  = idoc_data[]
                                                   ct_idoc_status = idoc_status[] ).
    ENDIF.

    IF lrf_update_so->gv_succe = abap_true.
      "Update sales order
      lrf_update_so->update_so( CHANGING ct_idoc_data1  = idoc_data[]
                                         ct_idoc_status = idoc_status[] ).

      "Error handling
      IF lrf_update_so->gv_succe = abap_true.
        "check for delivery address changes
        IF lrf_update_so->gt_ekkn_delivery IS NOT INITIAL.
          lrf_update_so->update_delivery_address_po( CHANGING ct_idoc_data1  = idoc_data[]
                                                              ct_idoc_status = idoc_status[] ).
        ENDIF.

*          Update PO Texts
        IF lrf_update_so->gt_potextitem IS NOT INITIAL OR
          lrf_update_so->gt_potextheader IS NOT INITIAL.
          lrf_update_so->gt_idoc_data1 = idoc_data[].
          lrf_update_so->update_po_texts( CHANGING ct_idoc_data1  = idoc_data[]
                                                   ct_idoc_status = idoc_status[]  ).
        ENDIF.
        "Sucess , update with 53
        lrf_update_so->update_idoc_status(
                       EXPORTING
                                iv_status = lrf_update_so->gc_idoc_status-success
                                iv_msgty  = if_mrm_constants=>gc_msgty_s
                                iv_msgid  = lrf_update_so->gc_msgid_1
                                iv_msgno  = lrf_update_so->gc_messages-gc_msgno_478
                                iv_msgv_1 = space
                                iv_msgv_2 = space
                                iv_msgv_3 = space
                                iv_msgv_4 = space
                       CHANGING
                                ct_idoc_data1  = lrf_update_so->gt_idoc_data1[]
                                ct_idoc_status = idoc_status[] ).
      ELSE.
        "Fail , update with 51
        lrf_update_so->update_idoc_status(
                       EXPORTING
                                iv_status = lrf_update_so->gc_idoc_status-error
                                iv_msgty  = if_mrm_constants=>gc_msgty_e
                                iv_msgid  = lrf_update_so->gc_msgid_1
                                iv_msgno  = lrf_update_so->gc_messages-gc_msgno_472
                                iv_msgv_1 = space
                                iv_msgv_2 = space
                                iv_msgv_3 = space
                                iv_msgv_4 = space
                      CHANGING
                              ct_idoc_data1  = lrf_update_so->gt_idoc_data1[]
                              ct_idoc_status = idoc_status[] ).

        lrf_update_so->gv_stop_flag = abap_true.
      ENDIF.
    ELSE.
      "Fail , update with 51
      lrf_update_so->update_idoc_status(
                     EXPORTING
                              iv_status = lrf_update_so->gc_idoc_status-error
                              iv_msgty  = if_mrm_constants=>gc_msgty_e
                              iv_msgid  = lrf_update_so->gc_msgid_1
                              iv_msgno  = lrf_update_so->gc_messages-gc_msgno_472
                              iv_msgv_1 = space
                              iv_msgv_2 = space
                              iv_msgv_3 = space
                              iv_msgv_4 = space
                    CHANGING
                            ct_idoc_data1  = lrf_update_so->gt_idoc_data1[]
                            ct_idoc_status = idoc_status[] ).
      lrf_update_so->gv_stop_flag = abap_true.
    ENDIF.


    "Table VBEP contains data for split condition
    IF zotccl_i1084_ordchg=>gt_vbep_detail IS NOT INITIAL.
      "Seperate VBEP details internal table
      SORT zotccl_i1084_ordchg=>gt_vbep_detail BY vbeln posnr.
      "Loop at VBEP table to populate temp tables
      LOOP AT zotccl_i1084_ordchg=>gt_vbep_detail ASSIGNING <lfs_vbep_detail_split>.
        "Populate table index in temporary variable
        lv_tabix = sy-tabix.
        ls_vbep_split_temp = <lfs_vbep_detail_split>.
        APPEND ls_vbep_split_temp TO lt_vbep_split_temp.
        "Check if present line number less than number of records
        IF lv_tabix LT lines( zotccl_i1084_ordchg=>gt_vbep_detail ).
          READ TABLE zotccl_i1084_ordchg=>gt_vbep_detail ASSIGNING <lfs_vbep_detail> INDEX ( lv_tabix + 1 ). "#EC CI_SUBRC
          IF sy-subrc EQ 0 AND <lfs_vbep_detail> IS ASSIGNED .
            "If line number if diferent call method to split
            IF <lfs_vbep_detail>-posnr <> ls_vbep_split_temp-posnr.

              CALL METHOD lrf_update_so->update_so_split
                EXPORTING
                  it_vbep_detail = lt_vbep_split_temp
                CHANGING
                  ct_idoc_status = idoc_status[].
              CLEAR lt_vbep_split_temp.
            ENDIF.
          ENDIF.
        ELSE.
          "If line number reached maximum
          CALL METHOD lrf_update_so->update_so_split
            EXPORTING
              it_vbep_detail = lt_vbep_split_temp
              iv_call_count  = abap_true
            CHANGING
              ct_idoc_status = idoc_status[].
          CLEAR lt_vbep_split_temp.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.

  "Check if IDOC status is both 51 and 53. Remove sucess messages 53 ages and only display 51
  IF line_exists( idoc_status[ status = lrf_update_so->gc_idoc_status-error ] ) AND
     line_exists( idoc_status[ status =  lrf_update_so->gc_idoc_status-success ] ).
    DELETE idoc_status WHERE status = lrf_update_so->gc_idoc_status-success.
  ENDIF.
ENDFUNCTION.                                             "#EC CI_VALPAR
